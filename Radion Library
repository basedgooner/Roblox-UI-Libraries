local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local function Tween(obj, props, time, style, dir)
    return TweenService:Create(obj, TweenInfo.new(time or 0.25, style or Enum.EasingStyle.Quart, dir or Enum.EasingDirection.Out), props)
end

local Library = {}
Library.__index = Library

function Library:Create(config)
    config = config or {}
    local self = setmetatable({}, Library)

    self.Theme = config.Theme or {
        Primary = Color3.fromRGB(88,101,242),
        Secondary = Color3.fromRGB(71,82,196),
        Background = Color3.fromRGB(28,30,33),
        Panel = Color3.fromRGB(40,43,48),
        Element = Color3.fromRGB(50,53,59),
        Text = Color3.fromRGB(255,255,255),
        SubText = Color3.fromRGB(180,182,185),
        Divider = Color3.fromRGB(64,67,72),
        Success = Color3.fromRGB(67,181,129),
        Warning = Color3.fromRGB(250,168,26),
        Error = Color3.fromRGB(240,71,71)
    }

    self.Settings = {
        ToggleKey = config.ToggleKey or Enum.KeyCode.K,
        SaveConfig = config.SaveConfig ~= false,
        ConfigName = config.ConfigName or "PremiumUILib",
        AnimationSpeed = 0.25,
        NotificationDuration = 3
    }

    self.Toggled = true
    self.Pages = {}
    self.CurrentPage = nil

    local gui = Instance.new("ScreenGui")
    gui.Name = "PremiumUILib"
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.Parent = game:GetService("CoreGui")

    self.Main = Instance.new("Frame")
    self.Main.Size = UDim2.new(0,700,0,500)
    self.Main.Position = UDim2.new(0.5,-350,0.5,-250)
    self.Main.BackgroundColor3 = self.Theme.Background
    self.Main.AnchorPoint = Vector2.new(0.5,0.5)
    self.Main.ClipsDescendants = true
    self.Main.Parent = gui

    local mainCorner = Instance.new("UICorner", self.Main)
    mainCorner.CornerRadius = UDim.new(0,12)

    local topbar = Instance.new("Frame")
    topbar.Size = UDim2.new(1,0,0,45)
    topbar.BackgroundColor3 = self.Theme.Panel
    topbar.Parent = self.Main
    Instance.new("UICorner", topbar).CornerRadius = UDim.new(0,12)

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(0.5,0,1,0)
    title.Position = UDim2.new(0,15,0,0)
    title.BackgroundTransparency = 1
    title.Text = config.Name or "Premium UI"
    title.Font = Enum.Font.Gotham
    title.TextSize = 16
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.TextColor3 = self.Theme.Text
    title.Parent = topbar

    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0,24,0,24)
    closeBtn.Position = UDim2.new(1,-34,0.5,-12)
    closeBtn.BackgroundTransparency = 1
    closeBtn.Text = "Ã—"
    closeBtn.Font = Enum.Font.Gotham
    closeBtn.TextSize = 20
    closeBtn.TextColor3 = self.Theme.SubText
    closeBtn.Parent = topbar

    local nav = Instance.new("Frame")
    nav.Size = UDim2.new(1,0,0,35)
    nav.Position = UDim2.new(0,0,0,45)
    nav.BackgroundTransparency = 1
    nav.Parent = self.Main
    local navList = Instance.new("UIListLayout", nav)
    navList.FillDirection = Enum.FillDirection.Horizontal
    navList.HorizontalAlignment = Enum.HorizontalAlignment.Left
    navList.Padding = UDim.new(0,2)

    self.Content = Instance.new("Frame")
    self.Content.Size = UDim2.new(1,-30,1,-90)
    self.Content.Position = UDim2.new(0,15,0,90)
    self.Content.BackgroundTransparency = 1
    self.Content.Parent = self.Main

    self.NotifContainer = Instance.new("Frame")
    self.NotifContainer.Size = UDim2.new(0,300,1,-20)
    self.NotifContainer.Position = UDim2.new(1,-320,1,-20)
    self.NotifContainer.BackgroundTransparency = 1
    self.NotifContainer.AnchorPoint = Vector2.new(0,1)
    self.NotifContainer.Parent = gui
    local notifList = Instance.new("UIListLayout", self.NotifContainer)
    notifList.FillDirection = Enum.FillDirection.Vertical
    notifList.HorizontalAlignment = Enum.HorizontalAlignment.Right
    notifList.VerticalAlignment = Enum.VerticalAlignment.Bottom
    notifList.Padding = UDim.new(0,8)

    local dragging, dragStart, startPos
    topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.Main.Position
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            self.Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset+delta.X, startPos.Y.Scale, startPos.Y.Offset+delta.Y)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging=false end
    end)

    function self:Toggle()
        self.Toggled = not self.Toggled
        if self.Toggled then
            self.Main.Visible = true
            Tween(self.Main,{Size=UDim2.new(0,700,0,500)},self.Settings.AnimationSpeed):Play()
        else
            local t = Tween(self.Main,{Size=UDim2.new(0,700,0,0)},self.Settings.AnimationSpeed)
            t:Play()
            t.Completed:Connect(function() self.Main.Visible=false end)
        end
    end

    closeBtn.MouseButton1Click:Connect(function() self:Toggle() end)
    UserInputService.InputBegan:Connect(function(input, gp)
        if not gp and input.KeyCode == self.Settings.ToggleKey then self:Toggle() end
    end)

    function self:Notify(opt)
        opt = opt or {}
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1,0,0,0)
        frame.BackgroundColor3 = self.Theme.Element
        frame.ClipsDescendants = true
        frame.Parent = self.NotifContainer
        Instance.new("UICorner", frame).CornerRadius = UDim.new(0,8)
        local bar = Instance.new("Frame", frame)
        bar.Size = UDim2.new(0,3,1,0)
        bar.BackgroundColor3 = self.Theme[opt.Type or "Primary"] or self.Theme.Primary
        bar.BorderSizePixel = 0
        local title = Instance.new("TextLabel", frame)
        title.Size = UDim2.new(1,-20,0,20)
        title.Position = UDim2.new(0,12,0,8)
        title.BackgroundTransparency = 1
        title.Font = Enum.Font.GothamBold
        title.Text = opt.Title or "Notification"
        title.TextSize = 14
        title.TextColor3 = self.Theme.Text
        title.TextXAlignment = Enum.TextXAlignment.Left
        local msg = Instance.new("TextLabel", frame)
        msg.Size = UDim2.new(1,-20,0,20)
        msg.Position = UDim2.new(0,12,0,28)
        msg.BackgroundTransparency = 1
        msg.Font = Enum.Font.Gotham
        msg.Text = opt.Text or ""
        msg.TextSize = 12
        msg.TextColor3 = self.Theme.SubText
        msg.TextXAlignment = Enum.TextXAlignment.Left
        msg.TextWrapped = true
        local h = math.max(60,game:GetService("TextService"):GetTextSize(msg.Text,12,Enum.Font.Gotham,Vector2.new(280,math.huge)).Y+40)
        Tween(frame,{Size=UDim2.new(1,0,0,h)},0.25):Play()
        task.wait(opt.Duration or self.Settings.NotificationDuration)
        local out = Tween(frame,{Size=UDim2.new(1,0,0,0)},0.25)
        out:Play()
        out.Completed:Connect(function() frame:Destroy() end)
    end

    function self:CreatePage(name)
        local page = {Name=name, Elements={}}
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(0,100,1,0)
        btn.BackgroundTransparency = 1
        btn.Text = name
        btn.Font = Enum.Font.Gotham
        btn.TextSize = 14
        btn.TextColor3 = self.Theme.SubText
        btn.Parent = nav
        local underline = Instance.new("Frame", btn)
        underline.Size = UDim2.new(1,0,0,2)
        underline.Position = UDim2.new(0,0,1,-2)
        underline.BackgroundColor3 = self.Theme.Primary
        underline.Visible = false
        local content = Instance.new("ScrollingFrame")
        content.Size = UDim2.new(1,0,1,0)
        content.BackgroundTransparency = 1
        content.Visible = false
        content.ScrollBarThickness = 3
        content.ScrollBarImageColor3 = self.Theme.Divider
        content.Parent = self.Content
        local list = Instance.new("UIListLayout", content)
        list.FillDirection = Enum.FillDirection.Vertical
        list.Padding = UDim.new(0,10)
        list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            content.CanvasSize = UDim2.new(0,0,0,list.AbsoluteContentSize.Y+10)
        end)
        btn.MouseButton1Click:Connect(function()
            for _,p in pairs(self.Pages) do
                p.Content.Visible=false
                p.Button.TextColor3=self.Theme.SubText
                p.Underline.Visible=false
            end
            content.Visible=true
            btn.TextColor3=self.Theme.Text
            underline.Visible=true
            self.CurrentPage=page
        end)
        if #self.Pages==0 then
            content.Visible=true
            btn.TextColor3=self.Theme.Text
            underline.Visible=true
            self.CurrentPage=page
        end
        page.Button=btn
        page.Underline=underline
        page.Content=content
        table.insert(self.Pages,page)
        return page
    end

    return self
end

return Library
