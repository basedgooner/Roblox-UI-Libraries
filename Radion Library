local Library = {}
Library.__index = Library

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local function CreateTween(obj, info, props)
    return TweenService:Create(obj, TweenInfo.new(info.Time or 0.3, info.Style or Enum.EasingStyle.Quart, info.Direction or Enum.EasingDirection.Out), props)
end

local function CreateInstance(class, props)
    local obj = Instance.new(class)
    for k, v in pairs(props) do
        obj[k] = v
    end
    return obj
end

function Library:Create(config)
    config = config or {}
    local self = setmetatable({}, Library)
    
    self.Theme = config.Theme or {
        Background = Color3.fromRGB(18, 18, 22),
        Secondary = Color3.fromRGB(24, 24, 30),
        Tertiary = Color3.fromRGB(32, 32, 40),
        Accent = Color3.fromRGB(88, 101, 242),
        Text = Color3.fromRGB(240, 240, 245),
        TextDim = Color3.fromRGB(160, 160, 170),
        Border = Color3.fromRGB(40, 40, 50),
        Success = Color3.fromRGB(67, 181, 129),
        Warning = Color3.fromRGB(250, 179, 127),
        Error = Color3.fromRGB(240, 71, 71)
    }
    
    self.Settings = {
        ToggleKey = config.ToggleKey or Enum.KeyCode.K,
        SaveConfig = config.SaveConfig ~= false,
        ConfigName = config.ConfigName or "UIConfig",
        NotificationDuration = config.NotificationDuration or 3,
        AnimationSpeed = config.AnimationSpeed or 0.3
    }
    
    self.Notifications = {}
    self.Windows = {}
    self.Toggles = {}
    self.CurrentPage = nil
    self.Debounce = {}
    
    self:Initialize()
    return self
end

function Library:Initialize()
    self.ScreenGui = CreateInstance("ScreenGui", {
        Name = HttpService:GenerateGUID(false),
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        Parent = game:GetService("CoreGui")
    })
    
    self.Container = CreateInstance("Frame", {
        Name = "Container",
        Size = UDim2.new(0, 620, 0, 460),
        Position = UDim2.new(0.5, -310, 0.5, -230),
        BackgroundColor3 = self.Theme.Background,
        BorderSizePixel = 0,
        Parent = self.ScreenGui,
        ClipsDescendants = true
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = self.Container
    })
    
    CreateInstance("UIStroke", {
        Color = self.Theme.Border,
        Thickness = 1,
        Transparency = 0.5,
        Parent = self.Container
    })
    
    self.Header = CreateInstance("Frame", {
        Name = "Header",
        Size = UDim2.new(1, 0, 0, 48),
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Parent = self.Container
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 12),
        Parent = self.Header
    })
    
    CreateInstance("Frame", {
        Name = "HeaderCover",
        Size = UDim2.new(1, 0, 0, 12),
        Position = UDim2.new(0, 0, 1, -12),
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Parent = self.Header
    })
    
    self.Title = CreateInstance("TextLabel", {
        Name = "Title",
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 16, 0, 0),
        BackgroundTransparency = 1,
        Font = Enum.Font.Gotham,
        Text = "Interface",
        TextColor3 = self.Theme.Text,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.Header
    })
    
    self.CloseButton = CreateInstance("TextButton", {
        Name = "Close",
        Size = UDim2.new(0, 32, 0, 32),
        Position = UDim2.new(1, -40, 0.5, -16),
        BackgroundColor3 = self.Theme.Tertiary,
        BorderSizePixel = 0,
        Font = Enum.Font.Gotham,
        Text = "Ã—",
        TextColor3 = self.Theme.TextDim,
        TextSize = 24,
        Parent = self.Header
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = self.CloseButton
    })
    
    self.TabContainer = CreateInstance("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(1, -32, 0, 36),
        Position = UDim2.new(0, 16, 0, 56),
        BackgroundTransparency = 1,
        Parent = self.Container
    })
    
    CreateInstance("UIListLayout", {
        FillDirection = Enum.FillDirection.Horizontal,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8),
        Parent = self.TabContainer
    })
    
    self.PageContainer = CreateInstance("Frame", {
        Name = "PageContainer",
        Size = UDim2.new(1, -32, 1, -108),
        Position = UDim2.new(0, 16, 0, 100),
        BackgroundTransparency = 1,
        Parent = self.Container
    })
    
    self.NotificationContainer = CreateInstance("Frame", {
        Name = "NotificationContainer",
        Size = UDim2.new(0, 320, 1, 0),
        Position = UDim2.new(1, -340, 0, 0),
        BackgroundTransparency = 1,
        Parent = self.ScreenGui
    })
    
    CreateInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 8),
        VerticalAlignment = Enum.VerticalAlignment.Bottom,
        Parent = self.NotificationContainer
    })
    
    CreateInstance("UIPadding", {
        PaddingBottom = UDim.new(0, 20),
        PaddingRight = UDim.new(0, 20),
        Parent = self.NotificationContainer
    })
    
    self:SetupDragging()
    self:SetupToggle()
    self:SetupCloseButton()
    
    if self.Settings.SaveConfig then
        self:LoadConfig()
    end
end

function Library:SetupDragging()
    local dragging, dragStart, startPos
    
    self.Header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.Container.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            self.Container.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

function Library:SetupToggle()
    UserInputService.InputBegan:Connect(function(input, processed)
        if not processed and input.KeyCode == self.Settings.ToggleKey then
            self:Toggle()
        end
    end)
end

function Library:SetupCloseButton()
    self.CloseButton.MouseEnter:Connect(function()
        CreateTween(self.CloseButton, {Time = 0.2}, {BackgroundColor3 = self.Theme.Error}):Play()
        CreateTween(self.CloseButton, {Time = 0.2}, {TextColor3 = self.Theme.Text}):Play()
    end)
    
    self.CloseButton.MouseLeave:Connect(function()
        CreateTween(self.CloseButton, {Time = 0.2}, {BackgroundColor3 = self.Theme.Tertiary}):Play()
        CreateTween(self.CloseButton, {Time = 0.2}, {TextColor3 = self.Theme.TextDim}):Play()
    end)
    
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Toggle()
    end)
end

function Library:Toggle()
    self.Visible = not self.Visible
    if self.Visible then
        self.Container.Size = UDim2.new(0, 0, 0, 0)
        self.Container.Visible = true
        CreateTween(self.Container, {Time = 0.4, Style = Enum.EasingStyle.Back}, {Size = UDim2.new(0, 620, 0, 460)}):Play()
    else
        local tween = CreateTween(self.Container, {Time = 0.3}, {Size = UDim2.new(0, 620, 0, 0)})
        tween:Play()
        tween.Completed:Connect(function()
            self.Container.Visible = false
        end)
        if self.Settings.SaveConfig then
            self:SaveConfig()
        end
    end
end

function Library:CreateWindow(title)
    local window = {}
    window.Title = title or "Window"
    window.Tabs = {}
    
    self.Title.Text = window.Title
    self.Windows[window.Title] = window
    
    function window:CreateTab(name, icon)
        local tab = {}
        tab.Name = name
        tab.Elements = {}
        
        tab.Button = CreateInstance("TextButton", {
            Name = name,
            Size = UDim2.new(0, 100, 1, 0),
            BackgroundColor3 = self.CurrentPage == name and Library.Theme.Accent or Library.Theme.Tertiary,
            BorderSizePixel = 0,
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = self.CurrentPage == name and Library.Theme.Text or Library.Theme.TextDim,
            TextSize = 14,
            Parent = Library.TabContainer
        })
        
        CreateInstance("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = tab.Button
        })
        
        tab.Page = CreateInstance("ScrollingFrame", {
            Name = name,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Library.Theme.Accent,
            Visible = false,
            Parent = Library.PageContainer
        })
        
        CreateInstance("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8),
            Parent = tab.Page
        })
        
        tab.Button.MouseButton1Click:Connect(function()
            Library:SelectTab(tab)
        end)
        
        tab.Button.MouseEnter:Connect(function()
            if Library.CurrentPage ~= name then
                CreateTween(tab.Button, {Time = 0.2}, {BackgroundColor3 = Library.Theme.Border}):Play()
            end
        end)
        
        tab.Button.MouseLeave:Connect(function()
            if Library.CurrentPage ~= name then
                CreateTween(tab.Button, {Time = 0.2}, {BackgroundColor3 = Library.Theme.Tertiary}):Play()
            end
        end)
        
        function tab:CreateSection(title)
            local section = {}
            
            section.Container = CreateInstance("Frame", {
                Name = title,
                Size = UDim2.new(1, 0, 0, 40),
                BackgroundColor3 = Library.Theme.Secondary,
                BorderSizePixel = 0,
                Parent = tab.Page
            })
            
            CreateInstance("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = section.Container
            })
            
            section.Title = CreateInstance("TextLabel", {
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 5),
                BackgroundTransparency = 1,
                Font = Enum.Font.GothamBold,
                Text = title,
                TextColor3 = Library.Theme.Text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = section.Container
            })
            
            section.Content = CreateInstance("Frame", {
                Size = UDim2.new(1, -20, 1, -35),
                Position = UDim2.new(0, 10, 0, 30),
                BackgroundTransparency = 1,
                Parent = section.Container
            })
            
            CreateInstance("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 6),
                Parent = section.Content
            })
            
            function section:AddButton(text, callback)
                local button = {}
                
                button.Container = CreateInstance("TextButton", {
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundColor3 = Library.Theme.Tertiary,
                    BorderSizePixel = 0,
                    Font = Enum.Font.Gotham,
                    Text = text,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 13,
                    Parent = section.Content
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = button.Container
                })
                
                button.Container.MouseEnter:Connect(function()
                    CreateTween(button.Container, {Time = 0.2}, {BackgroundColor3 = Library.Theme.Accent}):Play()
                end)
                
                button.Container.MouseLeave:Connect(function()
                    CreateTween(button.Container, {Time = 0.2}, {BackgroundColor3 = Library.Theme.Tertiary}):Play()
                end)
                
                button.Container.MouseButton1Click:Connect(function()
                    if callback then
                        callback()
                    end
                end)
                
                section.Container.Size = UDim2.new(1, 0, 0, section.Content.UIListLayout.AbsoluteContentSize.Y + 40)
                section.Content.ChildAdded:Connect(function()
                    section.Container.Size = UDim2.new(1, 0, 0, section.Content.UIListLayout.AbsoluteContentSize.Y + 40)
                end)
                
                return button
            end
            
            function section:AddToggle(text, default, callback)
                local toggle = {}
                toggle.Value = default or false
                
                toggle.Container = CreateInstance("Frame", {
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundTransparency = 1,
                    Parent = section.Content
                })
                
                toggle.Label = CreateInstance("TextLabel", {
                    Size = UDim2.new(1, -50, 1, 0),
                    BackgroundTransparency = 1,
                    Font = Enum.Font.Gotham,
                    Text = text,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = toggle.Container
                })
                
                toggle.Button = CreateInstance("TextButton", {
                    Size = UDim2.new(0, 44, 0, 24),
                    Position = UDim2.new(1, -44, 0.5, -12),
                    BackgroundColor3 = toggle.Value and Library.Theme.Accent or Library.Theme.Tertiary,
                    BorderSizePixel = 0,
                    Text = "",
                    Parent = toggle.Container
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 12),
                    Parent = toggle.Button
                })
                
                toggle.Indicator = CreateInstance("Frame", {
                    Size = UDim2.new(0, 18, 0, 18),
                    Position = toggle.Value and UDim2.new(1, -21, 0.5, -9) or UDim2.new(0, 3, 0.5, -9),
                    BackgroundColor3 = Library.Theme.Text,
                    BorderSizePixel = 0,
                    Parent = toggle.Button
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 9),
                    Parent = toggle.Indicator
                })
                
                function toggle:Set(value)
                    toggle.Value = value
                    Library.Toggles[text] = value
                    
                    CreateTween(toggle.Button, {Time = 0.2}, {BackgroundColor3 = value and Library.Theme.Accent or Library.Theme.Tertiary}):Play()
                    CreateTween(toggle.Indicator, {Time = 0.2}, {Position = value and UDim2.new(1, -21, 0.5, -9) or UDim2.new(0, 3, 0.5, -9)}):Play()
                    
                    if callback then
                        callback(value)
                    end
                end
                
                toggle.Button.MouseButton1Click:Connect(function()
                    toggle:Set(not toggle.Value)
                end)
                
                section.Container.Size = UDim2.new(1, 0, 0, section.Content.UIListLayout.AbsoluteContentSize.Y + 40)
                
                return toggle
            end
            
            function section:AddSlider(text, min, max, default, step, callback)
                local slider = {}
                slider.Value = default or min
                slider.Min = min
                slider.Max = max
                slider.Step = step or 1
                
                slider.Container = CreateInstance("Frame", {
                    Size = UDim2.new(1, 0, 0, 48),
                    BackgroundTransparency = 1,
                    Parent = section.Content
                })
                
                slider.Label = CreateInstance("TextLabel", {
                    Size = UDim2.new(1, -50, 0, 20),
                    BackgroundTransparency = 1,
                    Font = Enum.Font.Gotham,
                    Text = text,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = slider.Container
                })
                
                slider.Value = CreateInstance("TextLabel", {
                    Size = UDim2.new(0, 40, 0, 20),
                    Position = UDim2.new(1, -40, 0, 0),
                    BackgroundTransparency = 1,
                    Font = Enum.Font.Gotham,
                    Text = tostring(slider.Value),
                    TextColor3 = Library.Theme.TextDim,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Right,
                    Parent = slider.Container
                })
                
                slider.Track = CreateInstance("Frame", {
                    Size = UDim2.new(1, 0, 0, 6),
                    Position = UDim2.new(0, 0, 0, 28),
                    BackgroundColor3 = Library.Theme.Tertiary,
                    BorderSizePixel = 0,
                    Parent = slider.Container
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 3),
                    Parent = slider.Track
                })
                
                slider.Fill = CreateInstance("Frame", {
                    Size = UDim2.new((slider.Value - min) / (max - min), 0, 1, 0),
                    BackgroundColor3 = Library.Theme.Accent,
                    BorderSizePixel = 0,
                    Parent = slider.Track
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 3),
                    Parent = slider.Fill
                })
                
                slider.Knob = CreateInstance("Frame", {
                    Size = UDim2.new(0, 16, 0, 16),
                    Position = UDim2.new((slider.Value - min) / (max - min), -8, 0.5, -8),
                    BackgroundColor3 = Library.Theme.Text,
                    BorderSizePixel = 0,
                    Parent = slider.Track
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 8),
                    Parent = slider.Knob
                })
                
                function slider:Set(value)
                    value = math.clamp(value, slider.Min, slider.Max)
                    value = math.floor(value / slider.Step + 0.5) * slider.Step
                    slider.Value = value
                    
                    local percent = (value - slider.Min) / (slider.Max - slider.Min)
                    CreateTween(slider.Fill, {Time = 0.1}, {Size = UDim2.new(percent, 0, 1, 0)}):Play()
                    CreateTween(slider.Knob, {Time = 0.1}, {Position = UDim2.new(percent, -8, 0.5, -8)}):Play()
                    slider.Value.Text = tostring(value)
                    
                    if callback then
                        callback(value)
                    end
                end
                
                local dragging = false
                
                slider.Track.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        local connection
                        connection = RunService.RenderStepped:Connect(function()
                            if dragging then
                                local mouse = UserInputService:GetMouseLocation()
                                local percent = math.clamp((mouse.X - slider.Track.AbsolutePosition.X) / slider.Track.AbsoluteSize.X, 0, 1)
                                local value = slider.Min + (slider.Max - slider.Min) * percent
                                slider:Set(value)
                            else
                                connection:Disconnect()
                            end
                        end)
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                section.Container.Size = UDim2.new(1, 0, 0, section.Content.UIListLayout.AbsoluteContentSize.Y + 40)
                
                return slider
            end
            
            function section:AddDropdown(text, options, default, callback, multiselect)
                local dropdown = {}
                dropdown.Options = options or {}
                dropdown.Value = multiselect and (default or {}) or default
                dropdown.MultiSelect = multiselect or false
                dropdown.Open = false
                
                dropdown.Container = CreateInstance("Frame", {
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundTransparency = 1,
                    Parent = section.Content
                })
                
                dropdown.Button = CreateInstance("TextButton", {
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundColor3 = Library.Theme.Tertiary,
                    BorderSizePixel = 0,
                    Font = Enum.Font.Gotham,
                    Text = "",
                    Parent = dropdown.Container
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = dropdown.Button
                })
                
                dropdown.Label = CreateInstance("TextLabel", {
                    Size = UDim2.new(1, -30, 1, 0),
                    Position = UDim2.new(0, 10, 0, 0),
                    BackgroundTransparency = 1,
                    Font = Enum.Font.Gotham,
                    Text = text,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = dropdown.Button
                })
                
                dropdown.Arrow = CreateInstance("TextLabel", {
                    Size = UDim2.new(0, 20, 1, 0),
                    Position = UDim2.new(1, -25, 0, 0),
                    BackgroundTransparency = 1,
                    Font = Enum.Font.Gotham,
                    Text = "â–¼",
                    TextColor3 = Library.Theme.TextDim,
                    TextSize = 10,
                    Parent = dropdown.Button
                })
                
                dropdown.OptionContainer = CreateInstance("Frame", {
                    Size = UDim2.new(1, 0, 0, 0),
                    Position = UDim2.new(0, 0, 1, 4),
                    BackgroundColor3 = Library.Theme.Secondary,
                    BorderSizePixel = 0,
                    ClipsDescendants = true,
                    Visible = false,
                    Parent = dropdown.Container
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = dropdown.OptionContainer
                })
                
                CreateInstance("UIStroke", {
                    Color = Library.Theme.Border,
                    Thickness = 1,
                    Transparency = 0.5,
                    Parent = dropdown.OptionContainer
                })
                
                dropdown.OptionList = CreateInstance("Frame", {
                    Size = UDim2.new(1, -8, 1, -8),
                    Position = UDim2.new(0, 4, 0, 4),
                    BackgroundTransparency = 1,
                    Parent = dropdown.OptionContainer
                })
                
                CreateInstance("UIListLayout", {
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 2),
                    Parent = dropdown.OptionList
                })
                
                function dropdown:UpdateLabel()
                    if dropdown.MultiSelect then
                        local selected = {}
                        for _, v in pairs(dropdown.Value) do
                            table.insert(selected, v)
                        end
                        dropdown.Label.Text = #selected > 0 and table.concat(selected, ", ") or text
                    else
                        dropdown.Label.Text = dropdown.Value or text
                    end
                end
                
                function dropdown:Toggle()
                    dropdown.Open = not dropdown.Open
                    dropdown.OptionContainer.Visible = dropdown.Open
                    CreateTween(dropdown.Arrow, {Time = 0.2}, {Rotation = dropdown.Open and 180 or 0}):Play()
                    CreateTween(dropdown.OptionContainer, {Time = 0.2}, {Size = UDim2.new(1, 0, 0, dropdown.Open and math.min(#dropdown.Options * 26 + 8, 156) or 0)}):Play()
                    dropdown.Container.Size = UDim2.new(1, 0, 0, dropdown.Open and 32 + math.min(#dropdown.Options * 26 + 12, 160) or 32)
                    section.Container.Size = UDim2.new(1, 0, 0, section.Content.UIListLayout.AbsoluteContentSize.Y + 40)
                end
                
                function dropdown:Set(value)
                    if dropdown.MultiSelect then
                        dropdown.Value = value
                    else
                        dropdown.Value = value
                    end
                    dropdown:UpdateLabel()
                    if callback then
                        callback(dropdown.Value)
                    end
                end
                
                function dropdown:Refresh(options)
                    dropdown.Options = options or {}
                    for _, child in pairs(dropdown.OptionList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    for _, option in pairs(dropdown.Options) do
                        local optionButton = CreateInstance("TextButton", {
                            Size = UDim2.new(1, 0, 0, 24),
                            BackgroundColor3 = Library.Theme.Tertiary,
                            BorderSizePixel = 0,
                            Font = Enum.Font.Gotham,
                            Text = option,
                            TextColor3 = Library.Theme.Text,
                            TextSize = 12,
                            Parent = dropdown.OptionList
                        })
                        
                        CreateInstance("UICorner", {
                            CornerRadius = UDim.new(0, 4),
                            Parent = optionButton
                        })
                        
                        optionButton.MouseEnter:Connect(function()
                            CreateTween(optionButton, {Time = 0.1}, {BackgroundColor3 = Library.Theme.Accent}):Play()
                        end)
                        
                        optionButton.MouseLeave:Connect(function()
                            CreateTween(optionButton, {Time = 0.1}, {BackgroundColor3 = Library.Theme.Tertiary}):Play()
                        end)
                        
                        optionButton.MouseButton1Click:Connect(function()
                            if dropdown.MultiSelect then
                                if table.find(dropdown.Value, option) then
                                    table.remove(dropdown.Value, table.find(dropdown.Value, option))
                                else
                                    table.insert(dropdown.Value, option)
                                end
                            else
                                dropdown.Value = option
                                dropdown:Toggle()
                            end
                            dropdown:UpdateLabel()
                            if callback then
                                callback(dropdown.Value)
                            end
                        end)
                    end
                end
                
                dropdown.Button.MouseButton1Click:Connect(function()
                    dropdown:Toggle()
                end)
                
                dropdown:Refresh(dropdown.Options)
                dropdown:UpdateLabel()
                
                section.Container.Size = UDim2.new(1, 0, 0, section.Content.UIListLayout.AbsoluteContentSize.Y + 40)
                
                return dropdown
            end
            
            function section:AddTextBox(text, default, callback)
                local textbox = {}
                textbox.Value = default or ""
                
                textbox.Container = CreateInstance("Frame", {
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundTransparency = 1,
                    Parent = section.Content
                })
                
                textbox.Label = CreateInstance("TextLabel", {
                    Size = UDim2.new(0.5, -5, 1, 0),
                    BackgroundTransparency = 1,
                    Font = Enum.Font.Gotham,
                    Text = text,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = textbox.Container
                })
                
                textbox.Input = CreateInstance("TextBox", {
                    Size = UDim2.new(0.5, -5, 1, 0),
                    Position = UDim2.new(0.5, 5, 0, 0),
                    BackgroundColor3 = Library.Theme.Tertiary,
                    BorderSizePixel = 0,
                    Font = Enum.Font.Gotham,
                    Text = default or "",
                    TextColor3 = Library.Theme.Text,
                    TextSize = 13,
                    ClearTextOnFocus = false,
                    Parent = textbox.Container
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = textbox.Input
                })
                
                textbox.Input.FocusLost:Connect(function(enterPressed)
                    textbox.Value = textbox.Input.Text
                    if callback then
                        callback(textbox.Value, enterPressed)
                    end
                end)
                
                textbox.Input.Focused:Connect(function()
                    CreateTween(textbox.Input, {Time = 0.2}, {BackgroundColor3 = Library.Theme.Border}):Play()
                end)
                
                textbox.Input.FocusLost:Connect(function()
                    CreateTween(textbox.Input, {Time = 0.2}, {BackgroundColor3 = Library.Theme.Tertiary}):Play()
                end)
                
                section.Container.Size = UDim2.new(1, 0, 0, section.Content.UIListLayout.AbsoluteContentSize.Y + 40)
                
                return textbox
            end
            
            function section:AddKeybind(text, default, callback)
                local keybind = {}
                keybind.Value = default or Enum.KeyCode.Unknown
                keybind.Binding = false
                
                keybind.Container = CreateInstance("Frame", {
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundTransparency = 1,
                    Parent = section.Content
                })
                
                keybind.Label = CreateInstance("TextLabel", {
                    Size = UDim2.new(1, -80, 1, 0),
                    BackgroundTransparency = 1,
                    Font = Enum.Font.Gotham,
                    Text = text,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = keybind.Container
                })
                
                keybind.Button = CreateInstance("TextButton", {
                    Size = UDim2.new(0, 70, 0, 24),
                    Position = UDim2.new(1, -70, 0.5, -12),
                    BackgroundColor3 = Library.Theme.Tertiary,
                    BorderSizePixel = 0,
                    Font = Enum.Font.Gotham,
                    Text = keybind.Value.Name,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 12,
                    Parent = keybind.Container
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = keybind.Button
                })
                
                keybind.Button.MouseButton1Click:Connect(function()
                    keybind.Binding = true
                    keybind.Button.Text = "..."
                    CreateTween(keybind.Button, {Time = 0.2}, {BackgroundColor3 = Library.Theme.Accent}):Play()
                end)
                
                UserInputService.InputBegan:Connect(function(input, processed)
                    if keybind.Binding and not processed then
                        if input.KeyCode ~= Enum.KeyCode.Unknown then
                            keybind.Value = input.KeyCode
                            keybind.Button.Text = input.KeyCode.Name
                            keybind.Binding = false
                            CreateTween(keybind.Button, {Time = 0.2}, {BackgroundColor3 = Library.Theme.Tertiary}):Play()
                            if callback then
                                callback(input.KeyCode)
                            end
                        end
                    elseif input.KeyCode == keybind.Value and not processed then
                        if callback then
                            callback(input.KeyCode)
                        end
                    end
                end)
                
                section.Container.Size = UDim2.new(1, 0, 0, section.Content.UIListLayout.AbsoluteContentSize.Y + 40)
                
                return keybind
            end
            
            function section:AddColorPicker(text, default, callback)
                local colorpicker = {}
                colorpicker.Value = default or Color3.fromRGB(255, 255, 255)
                
                colorpicker.Container = CreateInstance("Frame", {
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundTransparency = 1,
                    Parent = section.Content
                })
                
                colorpicker.Label = CreateInstance("TextLabel", {
                    Size = UDim2.new(1, -40, 1, 0),
                    BackgroundTransparency = 1,
                    Font = Enum.Font.Gotham,
                    Text = text,
                    TextColor3 = Library.Theme.Text,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = colorpicker.Container
                })
                
                colorpicker.Preview = CreateInstance("Frame", {
                    Size = UDim2.new(0, 30, 0, 24),
                    Position = UDim2.new(1, -30, 0.5, -12),
                    BackgroundColor3 = colorpicker.Value,
                    BorderSizePixel = 0,
                    Parent = colorpicker.Container
                })
                
                CreateInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = colorpicker.Preview
                })
                
                CreateInstance("UIStroke", {
                    Color = Library.Theme.Border,
                    Thickness = 1,
                    Transparency = 0.5,
                    Parent = colorpicker.Preview
                })
                
                section.Container.Size = UDim2.new(1, 0, 0, section.Content.UIListLayout.AbsoluteContentSize.Y + 40)
                
                return colorpicker
            end
            
            return section
        end
        
        table.insert(window.Tabs, tab)
        if #window.Tabs == 1 then
            Library:SelectTab(tab)
        end
        
        return tab
    end
    
    return window
end

function Library:SelectTab(tab)
    for _, window in pairs(self.Windows) do
        for _, t in pairs(window.Tabs) do
            t.Page.Visible = false
            CreateTween(t.Button, {Time = 0.2}, {BackgroundColor3 = self.Theme.Tertiary}):Play()
            CreateTween(t.Button, {Time = 0.2}, {TextColor3 = self.Theme.TextDim}):Play()
        end
    end
    
    tab.Page.Visible = true
    self.CurrentPage = tab.Name
    CreateTween(tab.Button, {Time = 0.2}, {BackgroundColor3 = self.Theme.Accent}):Play()
    CreateTween(tab.Button, {Time = 0.2}, {TextColor3 = self.Theme.Text}):Play()
end

function Library:Notify(config)
    config = config or {}
    local notification = {}
    
    notification.Container = CreateInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 60),
        BackgroundColor3 = self.Theme.Secondary,
        BorderSizePixel = 0,
        Parent = self.NotificationContainer
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = notification.Container
    })
    
    notification.Accent = CreateInstance("Frame", {
        Size = UDim2.new(0, 4, 1, 0),
        BackgroundColor3 = config.Type == "success" and self.Theme.Success or config.Type == "warning" and self.Theme.Warning or config.Type == "error" and self.Theme.Error or self.Theme.Accent,
        BorderSizePixel = 0,
        Parent = notification.Container
    })
    
    CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = notification.Accent
    })
    
    notification.Title = CreateInstance("TextLabel", {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 15, 0, 8),
        BackgroundTransparency = 1,
        Font = Enum.Font.GothamBold,
        Text = config.Title or "Notification",
        TextColor3 = self.Theme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = notification.Container
    })
    
    notification.Content = CreateInstance("TextLabel", {
        Size = UDim2.new(1, -20, 0, 20),
        Position = UDim2.new(0, 15, 0, 28),
        BackgroundTransparency = 1,
        Font = Enum.Font.Gotham,
        Text = config.Content or "",
        TextColor3 = self.Theme.TextDim,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = notification.Container
    })
    
    notification.Container.Size = UDim2.new(0, 0, 0, 60)
    CreateTween(notification.Container, {Time = 0.3, Style = Enum.EasingStyle.Back}, {Size = UDim2.new(1, 0, 0, 60)}):Play()
    
    task.wait(config.Duration or self.Settings.NotificationDuration)
    
    local tween = CreateTween(notification.Container, {Time = 0.3}, {Size = UDim2.new(0, 0, 0, 60)})
    tween:Play()
    tween.Completed:Connect(function()
        notification.Container:Destroy()
    end)
    
    table.insert(self.Notifications, notification)
    
    if #self.Notifications > 5 then
        local oldest = table.remove(self.Notifications, 1)
        if oldest.Container then
            oldest.Container:Destroy()
        end
    end
end

function Library:SetTheme(theme)
    for key, color in pairs(theme) do
        if self.Theme[key] then
            self.Theme[key] = color
        end
    end
    
    self.Container.BackgroundColor3 = self.Theme.Background
    self.Header.BackgroundColor3 = self.Theme.Secondary
    self.Header.HeaderCover.BackgroundColor3 = self.Theme.Secondary
    self.Title.TextColor3 = self.Theme.Text
    self.CloseButton.BackgroundColor3 = self.Theme.Tertiary
    self.CloseButton.TextColor3 = self.Theme.TextDim
    
    for _, window in pairs(self.Windows) do
        for _, tab in pairs(window.Tabs) do
            tab.Button.BackgroundColor3 = self.CurrentPage == tab.Name and self.Theme.Accent or self.Theme.Tertiary
            tab.Button.TextColor3 = self.CurrentPage == tab.Name and self.Theme.Text or self.Theme.TextDim
        end
    end
end

function Library:SaveConfig()
    if not self.Settings.SaveConfig then return end
    local config = {
        Theme = self.Theme,
        Settings = self.Settings,
        Toggles = self.Toggles
    }
    writefile(self.Settings.ConfigName .. ".json", HttpService:JSONEncode(config))
end

function Library:LoadConfig()
    if not self.Settings.SaveConfig then return end
    if isfile(self.Settings.ConfigName .. ".json") then
        local success, config = pcall(function()
            return HttpService:JSONDecode(readfile(self.Settings.ConfigName .. ".json"))
        end)
        if success then
            if config.Theme then
                self:SetTheme(config.Theme)
            end
            if config.Settings then
                for key, value in pairs(config.Settings) do
                    self.Settings[key] = value
                end
            end
            if config.Toggles then
                self.Toggles = config.Toggles
            end
        end
    end
end

function Library:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

return Library
