local Library = {}
Library.__index = Library

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local function CreateTween(obj, props, duration, style, direction)
   return TweenService:Create(obj, TweenInfo.new(duration or 0.3, style or Enum.EasingStyle.Quart, direction or Enum.EasingDirection.Out), props)
end

local function MakeDraggable(frame, handle)
   local dragging, dragStart, startPos
   
   handle.InputBegan:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 then
           dragging = true
           dragStart = input.Position
           startPos = frame.Position
       end
   end)
   
   UserInputService.InputChanged:Connect(function(input)
       if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
           local delta = input.Position - dragStart
           frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
       end
   end)
   
   UserInputService.InputEnded:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 then
           dragging = false
       end
   end)
end

local function CreateRipple(button)
   local ripple = Instance.new("Frame")
   ripple.Name = "Ripple"
   ripple.Parent = button
   ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
   ripple.BackgroundTransparency = 0.8
   ripple.BorderSizePixel = 0
   ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
   ripple.Size = UDim2.new(0, 0, 0, 0)
   ripple.AnchorPoint = Vector2.new(0.5, 0.5)
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(1, 0)
   corner.Parent = ripple
   
   CreateTween(ripple, {Size = UDim2.new(2, 0, 2, 0), BackgroundTransparency = 1}, 0.5):Play()
   
   task.wait(0.5)
   ripple:Destroy()
end

function Library:Create(config)
   config = config or {}
   
   local GUI = {}
   GUI.Theme = config.Theme or {
       Primary = Color3.fromRGB(88, 101, 242),
       Secondary = Color3.fromRGB(71, 82, 196),
       Background = Color3.fromRGB(32, 34, 37),
       SecondaryBackground = Color3.fromRGB(47, 49, 54),
       TertiaryBackground = Color3.fromRGB(54, 57, 63),
       Text = Color3.fromRGB(255, 255, 255),
       SubText = Color3.fromRGB(185, 187, 190),
       Divider = Color3.fromRGB(66, 69, 74),
       Success = Color3.fromRGB(67, 181, 129),
       Warning = Color3.fromRGB(250, 168, 26),
       Error = Color3.fromRGB(240, 71, 71)
   }
   
   GUI.Settings = {
       ToggleKey = config.ToggleKey or Enum.KeyCode.K,
       SaveConfig = config.SaveConfig ~= false,
       ConfigName = config.ConfigName or "LibraryConfig",
       NotificationDuration = config.NotificationDuration or 3,
       AnimationSpeed = config.AnimationSpeed or 0.3
   }
   
   GUI.Notifications = {}
   GUI.Pages = {}
   GUI.CurrentPage = nil
   GUI.Toggled = true
   
   local ScreenGui = Instance.new("ScreenGui")
   ScreenGui.Name = "LibraryUI"
   ScreenGui.Parent = game:GetService("CoreGui")
   ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
   
   local MainFrame = Instance.new("Frame")
   MainFrame.Name = "MainFrame"
   MainFrame.Parent = ScreenGui
   MainFrame.BackgroundColor3 = GUI.Theme.Background
   MainFrame.BorderSizePixel = 0
   MainFrame.Position = UDim2.new(0.5, -350, 0.5, -250)
   MainFrame.Size = UDim2.new(0, 700, 0, 500)
   MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
   MainFrame.ClipsDescendants = true
   
   local MainCorner = Instance.new("UICorner")
   MainCorner.CornerRadius = UDim.new(0, 12)
   MainCorner.Parent = MainFrame
   
   local TopBar = Instance.new("Frame")
   TopBar.Name = "TopBar"
   TopBar.Parent = MainFrame
   TopBar.BackgroundColor3 = GUI.Theme.SecondaryBackground
   TopBar.BorderSizePixel = 0
   TopBar.Size = UDim2.new(1, 0, 0, 45)
   
   local TopBarCorner = Instance.new("UICorner")
   TopBarCorner.CornerRadius = UDim.new(0, 12)
   TopBarCorner.Parent = TopBar
   
   local TopBarFix = Instance.new("Frame")
   TopBarFix.Name = "Fix"
   TopBarFix.Parent = TopBar
   TopBarFix.BackgroundColor3 = GUI.Theme.SecondaryBackground
   TopBarFix.BorderSizePixel = 0
   TopBarFix.Position = UDim2.new(0, 0, 0.5, 0)
   TopBarFix.Size = UDim2.new(1, 0, 0.5, 0)
   
   local Title = Instance.new("TextLabel")
   Title.Name = "Title"
   Title.Parent = TopBar
   Title.BackgroundTransparency = 1
   Title.Position = UDim2.new(0, 15, 0, 0)
   Title.Size = UDim2.new(0.5, 0, 1, 0)
   Title.Font = Enum.Font.Gotham
   Title.Text = config.Name or "Library"
   Title.TextColor3 = GUI.Theme.Text
   Title.TextSize = 16
   Title.TextXAlignment = Enum.TextXAlignment.Left
   
   local CloseButton = Instance.new("TextButton")
   CloseButton.Name = "CloseButton"
   CloseButton.Parent = TopBar
   CloseButton.BackgroundColor3 = GUI.Theme.Error
   CloseButton.BackgroundTransparency = 1
   CloseButton.Position = UDim2.new(1, -35, 0.5, -10)
   CloseButton.Size = UDim2.new(0, 20, 0, 20)
   CloseButton.Font = Enum.Font.Gotham
   CloseButton.Text = "×"
   CloseButton.TextColor3 = GUI.Theme.SubText
   CloseButton.TextSize = 20
   
   local CloseCorner = Instance.new("UICorner")
   CloseCorner.CornerRadius = UDim.new(0, 4)
   CloseCorner.Parent = CloseButton
   
   CloseButton.MouseEnter:Connect(function()
       CreateTween(CloseButton, {BackgroundTransparency = 0.8}, 0.2):Play()
   end)
   
   CloseButton.MouseLeave:Connect(function()
       CreateTween(CloseButton, {BackgroundTransparency = 1}, 0.2):Play()
   end)
   
   local NavigationFrame = Instance.new("Frame")
   NavigationFrame.Name = "Navigation"
   NavigationFrame.Parent = MainFrame
   NavigationFrame.BackgroundTransparency = 1
   NavigationFrame.Position = UDim2.new(0, 0, 0, 45)
   NavigationFrame.Size = UDim2.new(1, 0, 0, 35)
   
   local NavigationLayout = Instance.new("UIListLayout")
   NavigationLayout.Parent = NavigationFrame
   NavigationLayout.FillDirection = Enum.FillDirection.Horizontal
   NavigationLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
   NavigationLayout.SortOrder = Enum.SortOrder.LayoutOrder
   NavigationLayout.Padding = UDim.new(0, 0)
   
   local ContentFrame = Instance.new("Frame")
   ContentFrame.Name = "Content"
   ContentFrame.Parent = MainFrame
   ContentFrame.BackgroundTransparency = 1
   ContentFrame.Position = UDim2.new(0, 15, 0, 90)
   ContentFrame.Size = UDim2.new(1, -30, 1, -105)
   
   local NotificationContainer = Instance.new("Frame")
   NotificationContainer.Name = "Notifications"
   NotificationContainer.Parent = ScreenGui
   NotificationContainer.BackgroundTransparency = 1
   NotificationContainer.Position = UDim2.new(1, -320, 1, -20)
   NotificationContainer.Size = UDim2.new(0, 300, 1, -40)
   NotificationContainer.AnchorPoint = Vector2.new(0, 1)
   
   local NotificationLayout = Instance.new("UIListLayout")
   NotificationLayout.Parent = NotificationContainer
   NotificationLayout.FillDirection = Enum.FillDirection.Vertical
   NotificationLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
   NotificationLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
   NotificationLayout.SortOrder = Enum.SortOrder.LayoutOrder
   NotificationLayout.Padding = UDim.new(0, 8)
   
   MakeDraggable(MainFrame, TopBar)
   
   function GUI:Toggle()
       GUI.Toggled = not GUI.Toggled
       
       if GUI.Toggled then
           MainFrame.Visible = true
           CreateTween(MainFrame, {Size = UDim2.new(0, 700, 0, 500)}, GUI.Settings.AnimationSpeed):Play()
       else
           local tween = CreateTween(MainFrame, {Size = UDim2.new(0, 700, 0, 0)}, GUI.Settings.AnimationSpeed)
           tween:Play()
           tween.Completed:Connect(function()
               MainFrame.Visible = false
           end)
       end
   end
   
   CloseButton.MouseButton1Click:Connect(function()
       GUI:Toggle()
   end)
   
   UserInputService.InputBegan:Connect(function(input, processed)
       if not processed and input.KeyCode == GUI.Settings.ToggleKey then
           GUI:Toggle()
       end
   end)
   
   function GUI:Notify(options)
       options = options or {}
       
       local Notification = Instance.new("Frame")
       Notification.Name = "Notification"
       Notification.Parent = NotificationContainer
       Notification.BackgroundColor3 = GUI.Theme.TertiaryBackground
       Notification.BorderSizePixel = 0
       Notification.Size = UDim2.new(1, 0, 0, 0)
       Notification.ClipsDescendants = true
       
       local NotificationCorner = Instance.new("UICorner")
       NotificationCorner.CornerRadius = UDim.new(0, 8)
       NotificationCorner.Parent = Notification
       
       local AccentBar = Instance.new("Frame")
       AccentBar.Name = "Accent"
       AccentBar.Parent = Notification
       AccentBar.BackgroundColor3 = GUI.Theme[options.Type or "Primary"] or GUI.Theme.Primary
       AccentBar.BorderSizePixel = 0
       AccentBar.Size = UDim2.new(0, 3, 1, 0)
       
       local NotificationTitle = Instance.new("TextLabel")
       NotificationTitle.Name = "Title"
       NotificationTitle.Parent = Notification
       NotificationTitle.BackgroundTransparency = 1
       NotificationTitle.Position = UDim2.new(0, 15, 0, 8)
       NotificationTitle.Size = UDim2.new(1, -20, 0, 20)
       NotificationTitle.Font = Enum.Font.GothamBold
       NotificationTitle.Text = options.Title or "Notification"
       NotificationTitle.TextColor3 = GUI.Theme.Text
       NotificationTitle.TextSize = 14
       NotificationTitle.TextXAlignment = Enum.TextXAlignment.Left
       
       local NotificationText = Instance.new("TextLabel")
       NotificationText.Name = "Text"
       NotificationText.Parent = Notification
       NotificationText.BackgroundTransparency = 1
       NotificationText.Position = UDim2.new(0, 15, 0, 28)
       NotificationText.Size = UDim2.new(1, -20, 0, 20)
       NotificationText.Font = Enum.Font.Gotham
       NotificationText.Text = options.Text or ""
       NotificationText.TextColor3 = GUI.Theme.SubText
       NotificationText.TextSize = 12
       NotificationText.TextXAlignment = Enum.TextXAlignment.Left
       NotificationText.TextWrapped = true
       
       local textSize = game:GetService("TextService"):GetTextSize(NotificationText.Text, 12, Enum.Font.Gotham, Vector2.new(280, math.huge))
       local height = math.max(60, textSize.Y + 40)
       
       CreateTween(Notification, {Size = UDim2.new(1, 0, 0, height)}, 0.3):Play()
       
       task.wait(options.Duration or GUI.Settings.NotificationDuration)
       
       local fadeOut = CreateTween(Notification, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
       fadeOut:Play()
       fadeOut.Completed:Connect(function()
           Notification:Destroy()
       end)
   end
   
   function GUI:CreatePage(name)
       local Page = {}
       Page.Name = name
       Page.Elements = {}
       
       local PageButton = Instance.new("TextButton")
       PageButton.Name = name
       PageButton.Parent = NavigationFrame
       PageButton.BackgroundColor3 = GUI.Theme.Primary
       PageButton.BackgroundTransparency = 1
       PageButton.Size = UDim2.new(0, 100, 1, 0)
       PageButton.Font = Enum.Font.Gotham
       PageButton.Text = name
       PageButton.TextColor3 = GUI.Theme.SubText
       PageButton.TextSize = 14
       PageButton.BorderSizePixel = 0
       
       local PageIndicator = Instance.new("Frame")
       PageIndicator.Name = "Indicator"
       PageIndicator.Parent = PageButton
       PageIndicator.BackgroundColor3 = GUI.Theme.Primary
       PageIndicator.BorderSizePixel = 0
       PageIndicator.Position = UDim2.new(0, 0, 1, -2)
       PageIndicator.Size = UDim2.new(1, 0, 0, 2)
       PageIndicator.Visible = false
       
       local PageContent = Instance.new("ScrollingFrame")
       PageContent.Name = name
       PageContent.Parent = ContentFrame
       PageContent.BackgroundTransparency = 1
       PageContent.BorderSizePixel = 0
       PageContent.Size = UDim2.new(1, 0, 1, 0)
       PageContent.ScrollBarThickness = 3
       PageContent.ScrollBarImageColor3 = GUI.Theme.Divider
       PageContent.Visible = false
       PageContent.CanvasSize = UDim2.new(0, 0, 0, 0)
       
       local PageLayout = Instance.new("UIListLayout")
       PageLayout.Parent = PageContent
       PageLayout.FillDirection = Enum.FillDirection.Vertical
       PageLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
       PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
       PageLayout.Padding = UDim.new(0, 10)
       
       PageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
           PageContent.CanvasSize = UDim2.new(0, 0, 0, PageLayout.AbsoluteContentSize.Y + 10)
       end)
       
       PageButton.MouseButton1Click:Connect(function()
           for _, page in pairs(GUI.Pages) do
               page.Content.Visible = false
               page.NavButton.TextColor3 = GUI.Theme.SubText
               page.Indicator.Visible = false
           end
           
           PageContent.Visible = true
           Page.NavButton.TextColor3 = GUI.Theme.Text
           PageIndicator.Visible = true
           GUI.CurrentPage = Page
       end)
       
       Page.Content = PageContent
       Page.NavButton = PageButton
       Page.Indicator = PageIndicator
       
       if #GUI.Pages == 0 then
           PageContent.Visible = true
           Page.NavButton.TextColor3 = GUI.Theme.Text
           PageIndicator.Visible = true
           GUI.CurrentPage = Page
       end
       
       function Page:Button(options)
           options = options or {}
           
           local ButtonFrame = Instance.new("Frame")
           ButtonFrame.Name = "Button"
           ButtonFrame.Parent = PageContent
           ButtonFrame.BackgroundColor3 = GUI.Theme.SecondaryBackground
           ButtonFrame.BorderSizePixel = 0
           ButtonFrame.Size = UDim2.new(1, 0, 0, 45)
           
           local ButtonCorner = Instance.new("UICorner")
           ButtonCorner.CornerRadius = UDim.new(0, 8)
           ButtonCorner.Parent = ButtonFrame
           
           local Button = Instance.new("TextButton")
           Button.Name = "Button"
           Button.Parent = ButtonFrame
           Button.BackgroundColor3 = GUI.Theme.Primary
           Button.BorderSizePixel = 0
           Button.Position = UDim2.new(1, -120, 0.5, -15)
           Button.Size = UDim2.new(0, 100, 0, 30)
           Button.Font = Enum.Font.Gotham
           Button.Text = options.Text or "Click"
           Button.TextColor3 = GUI.Theme.Text
           Button.TextSize = 13
           
           local ButtonInnerCorner = Instance.new("UICorner")
           ButtonInnerCorner.CornerRadius = UDim.new(0, 6)
           ButtonInnerCorner.Parent = Button
           
           local ButtonLabel = Instance.new("TextLabel")
           ButtonLabel.Name = "Label"
           ButtonLabel.Parent = ButtonFrame
           ButtonLabel.BackgroundTransparency = 1
           ButtonLabel.Position = UDim2.new(0, 15, 0, 0)
           ButtonLabel.Size = UDim2.new(0.6, 0, 1, 0)
           ButtonLabel.Font = Enum.Font.Gotham
           ButtonLabel.Text = options.Name or "Button"
           ButtonLabel.TextColor3 = GUI.Theme.Text
           ButtonLabel.TextSize = 14
           ButtonLabel.TextXAlignment = Enum.TextXAlignment.Left
           
           Button.MouseButton1Click:Connect(function()
               CreateRipple(Button)
               if options.Callback then
                   options.Callback()
               end
           end)
           
           Button.MouseEnter:Connect(function()
               CreateTween(Button, {BackgroundColor3 = GUI.Theme.Secondary}, 0.2):Play()
           end)
           
           Button.MouseLeave:Connect(function()
               CreateTween(Button, {BackgroundColor3 = GUI.Theme.Primary}, 0.2):Play()
           end)
           
           return {Frame = ButtonFrame, ButtonInstance = Button, Label = ButtonLabel}
       end
       
       function Page:Toggle(options)
           options = options or {}
           local toggled = options.Default or false
           
           local ToggleFrame = Instance.new("Frame")
           ToggleFrame.Name = "Toggle"
           ToggleFrame.Parent = PageContent
           ToggleFrame.BackgroundColor3 = GUI.Theme.SecondaryBackground
           ToggleFrame.BorderSizePixel = 0
           ToggleFrame.Size = UDim2.new(1, 0, 0, 45)
           
           local ToggleCorner = Instance.new("UICorner")
           ToggleCorner.CornerRadius = UDim.new(0, 8)
           ToggleCorner.Parent = ToggleFrame
           
           local ToggleButton = Instance.new("TextButton")
           ToggleButton.Name = "Toggle"
           ToggleButton.Parent = ToggleFrame
           ToggleButton.BackgroundColor3 = toggled and GUI.Theme.Primary or GUI.Theme.Divider
           ToggleButton.BorderSizePixel = 0
           ToggleButton.Position = UDim2.new(1, -60, 0.5, -10)
           ToggleButton.Size = UDim2.new(0, 40, 0, 20)
           ToggleButton.Text = ""
           
           local ToggleButtonCorner = Instance.new("UICorner")
           ToggleButtonCorner.CornerRadius = UDim.new(1, 0)
           ToggleButtonCorner.Parent = ToggleButton
           
           local ToggleCircle = Instance.new("Frame")
           ToggleCircle.Name = "Circle"
           ToggleCircle.Parent = ToggleButton
           ToggleCircle.BackgroundColor3 = GUI.Theme.Text
           ToggleCircle.BorderSizePixel = 0
           ToggleCircle.Position = toggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
           ToggleCircle.Size = UDim2.new(0, 16, 0, 16)
           
           local ToggleCircleCorner = Instance.new("UICorner")
           ToggleCircleCorner.CornerRadius = UDim.new(1, 0)
           ToggleCircleCorner.Parent = ToggleCircle
           
           local ToggleLabel = Instance.new("TextLabel")
           ToggleLabel.Name = "Label"
           ToggleLabel.Parent = ToggleFrame
           ToggleLabel.BackgroundTransparency = 1
           ToggleLabel.Position = UDim2.new(0, 15, 0, 0)
           ToggleLabel.Size = UDim2.new(0.6, 0, 1, 0)
           ToggleLabel.Font = Enum.Font.Gotham
           ToggleLabel.Text = options.Name or "Toggle"
           ToggleLabel.TextColor3 = GUI.Theme.Text
           ToggleLabel.TextSize = 14
           ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
           
           local function SetToggle(value)
               toggled = value
               CreateTween(ToggleButton, {BackgroundColor3 = toggled and GUI.Theme.Primary or GUI.Theme.Divider}, 0.2):Play()
               CreateTween(ToggleCircle, {Position = toggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)}, 0.2):Play()
               
               if options.Callback then
                   options.Callback(toggled)
               end
           end
           
           ToggleButton.MouseButton1Click:Connect(function()
               SetToggle(not toggled)
           end)
           
           return {Frame = ToggleFrame, SetValue = SetToggle, GetValue = function() return toggled end}
       end
       
       function Page:Slider(options)
           options = options or {}
           local value = options.Default or options.Min or 0
           local min = options.Min or 0
           local max = options.Max or 100
           local step = options.Step or 1
           
           local SliderFrame = Instance.new("Frame")
           SliderFrame.Name = "Slider"
           SliderFrame.Parent = PageContent
           SliderFrame.BackgroundColor3 = GUI.Theme.SecondaryBackground
           SliderFrame.BorderSizePixel = 0
           SliderFrame.Size = UDim2.new(1, 0, 0, 60)
           
           local SliderCorner = Instance.new("UICorner")
           SliderCorner.CornerRadius = UDim.new(0, 8)
           SliderCorner.Parent = SliderFrame
           
           local SliderLabel = Instance.new("TextLabel")
           SliderLabel.Name = "Label"
           SliderLabel.Parent = SliderFrame
           SliderLabel.BackgroundTransparency = 1
           SliderLabel.Position = UDim2.new(0, 15, 0, 8)
           SliderLabel.Size = UDim2.new(0.6, 0, 0, 20)
           SliderLabel.Font = Enum.Font.Gotham
           SliderLabel.Text = options.Name or "Slider"
           SliderLabel.TextColor3 = GUI.Theme.Text
           SliderLabel.TextSize = 14
           SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
           
           local SliderValue = Instance.new("TextLabel")
           SliderValue.Name = "Value"
           SliderValue.Parent = SliderFrame
           SliderValue.BackgroundTransparency = 1
           SliderValue.Position = UDim2.new(1, -60, 0, 8)
           SliderValue.Size = UDim2.new(0, 45, 0, 20)
           SliderValue.Font = Enum.Font.Gotham
           SliderValue.Text = tostring(value)
           SliderValue.TextColor3 = GUI.Theme.SubText
           SliderValue.TextSize = 13
           SliderValue.TextXAlignment = Enum.TextXAlignment.Right
           
           local SliderBar = Instance.new("Frame")
           SliderBar.Name = "Bar"
           SliderBar.Parent = SliderFrame
           SliderBar.BackgroundColor3 = GUI.Theme.Divider
           SliderBar.BorderSizePixel = 0
           SliderBar.Position = UDim2.new(0, 15, 1, -20)
           SliderBar.Size = UDim2.new(1, -30, 0, 4)
           
           local SliderBarCorner = Instance.new("UICorner")
           SliderBarCorner.CornerRadius = UDim.new(1, 0)
           SliderBarCorner.Parent = SliderBar
           
           local SliderFill = Instance.new("Frame")
           SliderFill.Name = "Fill"
           SliderFill.Parent = SliderBar
           SliderFill.BackgroundColor3 = GUI.Theme.Primary
           SliderFill.BorderSizePixel = 0
           SliderFill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
           
           local SliderFillCorner = Instance.new("UICorner")
           SliderFillCorner.CornerRadius = UDim.new(1, 0)
           SliderFillCorner.Parent = SliderFill
           
           local SliderDrag = Instance.new("Frame")
           SliderDrag.Name = "Drag"
           SliderDrag.Parent = SliderBar
           SliderDrag.BackgroundColor3 = GUI.Theme.Text
           SliderDrag.BorderSizePixel = 0
           SliderDrag.Position = UDim2.new((value - min) / (max - min), -6, 0.5, -6)
           SliderDrag.Size = UDim2.new(0, 12, 0, 12)
           
           local SliderDragCorner = Instance.new("UICorner")
           SliderDragCorner.CornerRadius = UDim.new(1, 0)
           SliderDragCorner.Parent = SliderDrag
           
           local dragging = false
           
           local function UpdateSlider(input)
               local pos = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
               local rawValue = min + (max - min) * pos
               value = math.floor(rawValue / step + 0.5) * step
               value = math.clamp(value, min, max)
               
               SliderValue.Text = tostring(value)
               CreateTween(SliderFill, {Size = UDim2.new((value - min) / (max - min), 0, 1, 0)}, 0.1):Play()
               CreateTween(SliderDrag, {Position = UDim2.new((value - min) / (max - min), -6, 0.5, -6)}, 0.1):Play()
               
               if options.Callback then
                   options.Callback(value)
               end
           end
           
           SliderBar.InputBegan:Connect(function(input)
               if input.UserInputType == Enum.UserInputType.MouseButton1 then
                   dragging = true
                   UpdateSlider(input)
               end
           end)
           
           SliderDrag.InputBegan:Connect(function(input)
               if input.UserInputType == Enum.UserInputType.MouseButton1 then
                   dragging = true
               end
           end)
           
           UserInputService.InputChanged:Connect(function(input)
               if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                   UpdateSlider(input)
               end
           end)
           
           UserInputService.InputEnded:Connect(function(input)
               if input.UserInputType == Enum.UserInputType.MouseButton1 then
                   dragging = false
               end
           end)
           
           return {Frame = SliderFrame, SetValue = function(v) value = v UpdateSlider({Position = Vector3.new(SliderBar.AbsolutePosition.X + (v - min) / (max - min) * SliderBar.AbsoluteSize.X, 0, 0)}) end, GetValue = function() return value end}
       end
       
       function Page:Dropdown(options)
           options = options or {}
           local selected = options.Default
           local multi = options.Multi or false
           local selectedItems = multi and {} or nil
           
           local DropdownFrame = Instance.new("Frame")
           DropdownFrame.Name = "Dropdown"
           DropdownFrame.Parent = PageContent
           DropdownFrame.BackgroundColor3 = GUI.Theme.SecondaryBackground
         DropdownFrame.BorderSizePixel = 0
           DropdownFrame.Size = UDim2.new(1, 0, 0, 45)
           
           local DropdownCorner = Instance.new("UICorner")
           DropdownCorner.CornerRadius = UDim.new(0, 8)
           DropdownCorner.Parent = DropdownFrame
           
           local DropdownLabel = Instance.new("TextLabel")
           DropdownLabel.Name = "Label"
           DropdownLabel.Parent = DropdownFrame
           DropdownLabel.BackgroundTransparency = 1
           DropdownLabel.Position = UDim2.new(0, 15, 0, 0)
           DropdownLabel.Size = UDim2.new(0.4, 0, 0, 45)
           DropdownLabel.Font = Enum.Font.Gotham
           DropdownLabel.Text = options.Name or "Dropdown"
           DropdownLabel.TextColor3 = GUI.Theme.Text
           DropdownLabel.TextSize = 14
           DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
           
           local DropdownButton = Instance.new("TextButton")
           DropdownButton.Name = "Button"
           DropdownButton.Parent = DropdownFrame
           DropdownButton.BackgroundColor3 = GUI.Theme.TertiaryBackground
           DropdownButton.BorderSizePixel = 0
           DropdownButton.Position = UDim2.new(1, -185, 0.5, -15)
           DropdownButton.Size = UDim2.new(0, 165, 0, 30)
           DropdownButton.Font = Enum.Font.Gotham
           DropdownButton.Text = multi and "Select..." or (selected or "None")
           DropdownButton.TextColor3 = GUI.Theme.SubText
           DropdownButton.TextSize = 13
           DropdownButton.TextTruncate = Enum.TextTruncate.AtEnd
           DropdownButton.ClipsDescendants = true
           
           local DropdownButtonCorner = Instance.new("UICorner")
           DropdownButtonCorner.CornerRadius = UDim.new(0, 6)
           DropdownButtonCorner.Parent = DropdownButton
           
           local DropdownArrow = Instance.new("TextLabel")
           DropdownArrow.Name = "Arrow"
           DropdownArrow.Parent = DropdownButton
           DropdownArrow.BackgroundTransparency = 1
           DropdownArrow.Position = UDim2.new(1, -25, 0, 0)
           DropdownArrow.Size = UDim2.new(0, 20, 1, 0)
           DropdownArrow.Font = Enum.Font.Gotham
           DropdownArrow.Text = "▼"
           DropdownArrow.TextColor3 = GUI.Theme.SubText
           DropdownArrow.TextSize = 10
           
           local DropdownList = Instance.new("Frame")
           DropdownList.Name = "List"
           DropdownList.Parent = DropdownFrame
           DropdownList.BackgroundColor3 = GUI.Theme.TertiaryBackground
           DropdownList.BorderSizePixel = 0
           DropdownList.Position = UDim2.new(1, -185, 1, 5)
           DropdownList.Size = UDim2.new(0, 165, 0, 0)
           DropdownList.ClipsDescendants = true
           DropdownList.ZIndex = 10
           
           local DropdownListCorner = Instance.new("UICorner")
           DropdownListCorner.CornerRadius = UDim.new(0, 6)
           DropdownListCorner.Parent = DropdownList
           
           local DropdownListLayout = Instance.new("UIListLayout")
           DropdownListLayout.Parent = DropdownList
           DropdownListLayout.FillDirection = Enum.FillDirection.Vertical
           DropdownListLayout.SortOrder = Enum.SortOrder.LayoutOrder
           DropdownListLayout.Padding = UDim.new(0, 2)
           
           local isOpen = false
           local optionButtons = {}
           
           local function UpdateDropdownText()
               if multi then
                   local count = 0
                   for _ in pairs(selectedItems) do
                       count = count + 1
                   end
                   DropdownButton.Text = count > 0 and (count .. " selected") or "Select..."
               else
                   DropdownButton.Text = selected or "None"
               end
           end
           
           local function CreateOption(text)
               local OptionButton = Instance.new("TextButton")
               OptionButton.Name = text
               OptionButton.Parent = DropdownList
               OptionButton.BackgroundColor3 = GUI.Theme.SecondaryBackground
               OptionButton.BorderSizePixel = 0
               OptionButton.Size = UDim2.new(1, -4, 0, 28)
               OptionButton.Font = Enum.Font.Gotham
               OptionButton.Text = multi and "☐ " .. text or text
               OptionButton.TextColor3 = GUI.Theme.SubText
               OptionButton.TextSize = 12
               OptionButton.Position = UDim2.new(0, 2, 0, 0)
               
               local OptionCorner = Instance.new("UICorner")
               OptionCorner.CornerRadius = UDim.new(0, 4)
               OptionCorner.Parent = OptionButton
               
               if multi then
                   OptionButton.MouseButton1Click:Connect(function()
                       if selectedItems[text] then
                           selectedItems[text] = nil
                           OptionButton.Text = "☐ " .. text
                           OptionButton.TextColor3 = GUI.Theme.SubText
                       else
                           selectedItems[text] = true
                           OptionButton.Text = "☑ " .. text
                           OptionButton.TextColor3 = GUI.Theme.Text
                       end
                       UpdateDropdownText()
                       if options.Callback then
                           options.Callback(selectedItems)
                       end
                   end)
               else
                   OptionButton.MouseButton1Click:Connect(function()
                       selected = text
                       UpdateDropdownText()
                       for _, btn in pairs(optionButtons) do
                           btn.TextColor3 = GUI.Theme.SubText
                       end
                       OptionButton.TextColor3 = GUI.Theme.Text
                       isOpen = false
                       CreateTween(DropdownList, {Size = UDim2.new(0, 165, 0, 0)}, 0.2):Play()
                       CreateTween(DropdownArrow, {Rotation = 0}, 0.2):Play()
                       if options.Callback then
                           options.Callback(selected)
                       end
                   end)
               end
               
               OptionButton.MouseEnter:Connect(function()
                   CreateTween(OptionButton, {BackgroundColor3 = GUI.Theme.Divider}, 0.1):Play()
               end)
               
               OptionButton.MouseLeave:Connect(function()
                   CreateTween(OptionButton, {BackgroundColor3 = GUI.Theme.SecondaryBackground}, 0.1):Play()
               end)
               
               optionButtons[text] = OptionButton
               return OptionButton
           end
           
           local function SetOptions(optionsList)
               for _, btn in pairs(optionButtons) do
                   btn:Destroy()
               end
               optionButtons = {}
               
               for _, option in ipairs(optionsList) do
                   CreateOption(option)
               end
           end
           
           if options.Options then
               SetOptions(options.Options)
           end
           
           DropdownButton.MouseButton1Click:Connect(function()
               isOpen = not isOpen
               local targetSize = isOpen and UDim2.new(0, 165, 0, math.min(#optionButtons * 30 + 4, 150)) or UDim2.new(0, 165, 0, 0)
               CreateTween(DropdownList, {Size = targetSize}, 0.2):Play()
               CreateTween(DropdownArrow, {Rotation = isOpen and 180 or 0}, 0.2):Play()
           end)
           
           return {Frame = DropdownFrame, SetOptions = SetOptions, GetValue = function() return multi and selectedItems or selected end}
       end
       
       function Page:TextBox(options)
           options = options or {}
           
           local TextBoxFrame = Instance.new("Frame")
           TextBoxFrame.Name = "TextBox"
           TextBoxFrame.Parent = PageContent
           TextBoxFrame.BackgroundColor3 = GUI.Theme.SecondaryBackground
           TextBoxFrame.BorderSizePixel = 0
           TextBoxFrame.Size = UDim2.new(1, 0, 0, 45)
           
           local TextBoxCorner = Instance.new("UICorner")
           TextBoxCorner.CornerRadius = UDim.new(0, 8)
           TextBoxCorner.Parent = TextBoxFrame
           
           local TextBoxLabel = Instance.new("TextLabel")
           TextBoxLabel.Name = "Label"
           TextBoxLabel.Parent = TextBoxFrame
           TextBoxLabel.BackgroundTransparency = 1
           TextBoxLabel.Position = UDim2.new(0, 15, 0, 0)
           TextBoxLabel.Size = UDim2.new(0.4, 0, 1, 0)
           TextBoxLabel.Font = Enum.Font.Gotham
           TextBoxLabel.Text = options.Name or "TextBox"
           TextBoxLabel.TextColor3 = GUI.Theme.Text
           TextBoxLabel.TextSize = 14
           TextBoxLabel.TextXAlignment = Enum.TextXAlignment.Left
           
           local TextBox = Instance.new("TextBox")
           TextBox.Name = "Input"
           TextBox.Parent = TextBoxFrame
           TextBox.BackgroundColor3 = GUI.Theme.TertiaryBackground
           TextBox.BorderSizePixel = 0
           TextBox.Position = UDim2.new(1, -185, 0.5, -15)
           TextBox.Size = UDim2.new(0, 165, 0, 30)
           TextBox.Font = Enum.Font.Gotham
           TextBox.PlaceholderText = options.Placeholder or "Enter text..."
           TextBox.PlaceholderColor3 = GUI.Theme.SubText
           TextBox.Text = options.Default or ""
           TextBox.TextColor3 = GUI.Theme.Text
           TextBox.TextSize = 13
           TextBox.ClearTextOnFocus = false
           
           local TextBoxInputCorner = Instance.new("UICorner")
           TextBoxInputCorner.CornerRadius = UDim.new(0, 6)
           TextBoxInputCorner.Parent = TextBox
           
           TextBox.FocusLost:Connect(function()
               if options.Callback then
                   options.Callback(TextBox.Text)
               end
           end)
           
           TextBox.Focused:Connect(function()
               CreateTween(TextBox, {BackgroundColor3 = GUI.Theme.Divider}, 0.2):Play()
           end)
           
           TextBox.FocusLost:Connect(function()
               CreateTween(TextBox, {BackgroundColor3 = GUI.Theme.TertiaryBackground}, 0.2):Play()
           end)
           
           return {Frame = TextBoxFrame, SetValue = function(v) TextBox.Text = v end, GetValue = function() return TextBox.Text end}
       end
       
       function Page:Label(options)
           options = options or {}
           
           local LabelFrame = Instance.new("Frame")
           LabelFrame.Name = "Label"
           LabelFrame.Parent = PageContent
           LabelFrame.BackgroundColor3 = GUI.Theme.SecondaryBackground
           LabelFrame.BorderSizePixel = 0
           LabelFrame.Size = UDim2.new(1, 0, 0, 35)
           
           local LabelCorner = Instance.new("UICorner")
           LabelCorner.CornerRadius = UDim.new(0, 8)
           LabelCorner.Parent = LabelFrame
           
           local Label = Instance.new("TextLabel")
           Label.Name = "Text"
           Label.Parent = LabelFrame
           Label.BackgroundTransparency = 1
           Label.Position = UDim2.new(0, 15, 0, 0)
           Label.Size = UDim2.new(1, -30, 1, 0)
           Label.Font = Enum.Font.Gotham
           Label.Text = options.Text or "Label"
           Label.TextColor3 = GUI.Theme.Text
           Label.TextSize = 14
           Label.TextXAlignment = Enum.TextXAlignment.Left
           
           return {Frame = LabelFrame, SetText = function(v) Label.Text = v end}
       end
       
       function Page:Separator()
           local Separator = Instance.new("Frame")
           Separator.Name = "Separator"
           Separator.Parent = PageContent
           Separator.BackgroundColor3 = GUI.Theme.Divider
           Separator.BorderSizePixel = 0
           Separator.Size = UDim2.new(1, 0, 0, 1)
           
           return {Frame = Separator}
       end
       
       table.insert(GUI.Pages, Page)
       return Page
   end
   
   function GUI:SetTheme(theme)
       for key, color in pairs(theme) do
           if GUI.Theme[key] then
               GUI.Theme[key] = color
           end
       end
       
       MainFrame.BackgroundColor3 = GUI.Theme.Background
       TopBar.BackgroundColor3 = GUI.Theme.SecondaryBackground
       TopBarFix.BackgroundColor3 = GUI.Theme.SecondaryBackground
       Title.TextColor3 = GUI.Theme.Text
       CloseButton.TextColor3 = GUI.Theme.SubText
       
       for _, page in pairs(GUI.Pages) do
           page.NavButton.TextColor3 = page.Content.Visible and GUI.Theme.Text or GUI.Theme.SubText
           page.Indicator.BackgroundColor3 = GUI.Theme.Primary
       end
   end
   
   function GUI:SaveConfig()
       if not GUI.Settings.SaveConfig then return end
       
       local config = {
           Theme = GUI.Theme,
           Settings = GUI.Settings
       }
       
       if writefile then
           writefile(GUI.Settings.ConfigName .. ".json", HttpService:JSONEncode(config))
       end
   end
   
   function GUI:LoadConfig()
       if not GUI.Settings.SaveConfig then return end
       
       if readfile and isfile and isfile(GUI.Settings.ConfigName .. ".json") then
           local success, config = pcall(function()
               return HttpService:JSONDecode(readfile(GUI.Settings.ConfigName .. ".json"))
           end)
           
           if success then
               GUI:SetTheme(config.Theme or {})
               for key, value in pairs(config.Settings or {}) do
                   GUI.Settings[key] = value
               end
           end
       end
   end
   
   GUI:LoadConfig()
   
   return GUI
end

return Library
