local Library = {}
Library.Version = "1.0.0"

local Game = game
local HttpService = Game:GetService("HttpService")
local TweenService = Game:GetService("TweenService")
local UserInputService = Game:GetService("UserInputService")
local RunService = Game:GetService("RunService")
local TextService = Game:GetService("TextService")
local CoreGui = Game:GetService("CoreGui")

local getgenv = getgenv or function() return {} end
local syn = syn or {}
local writefile = writefile or function() end
local readfile = readfile or function() return "" end
local makefolder = makefolder or function() end
local isfolder = isfolder or function() return false end
local isfile = isfile or function() return false end

local MainEnvironment = getgenv()
MainEnvironment.Proxima = Library

local Instances = {}
local ActiveDrags = {}
local ActiveInput = {}

local function Create(instanceType, properties)
	local instance = Instance.new(instanceType)
	for prop, value in pairs(properties or {}) do
		if type(prop) == "number" then
			value.Parent = instance
		else
			instance[prop] = value
		end
	end
	table.insert(Instances, instance)
	return instance
end

Library.Settings = {
	Keybind = Enum.KeyCode.K,
	ConfigName = "ProximaConfig.json",
	ConfigFolder = "Proxima",
	NotificationDuration = 5,
	AnimationSpeed = 0.2,
	Theme = {
		Background = Color3.fromRGB(24, 24, 24),
		Primary = Color3.fromRGB(35, 35, 35),
		Secondary = Color3.fromRGB(45, 45, 45),
		Accent = Color3.fromRGB(0, 122, 255),
		Text = Color3.fromRGB(255, 255, 255),
		MutedText = Color3.fromRGB(180, 180, 180),
		Shadow = Color3.fromRGB(0, 0, 0),
		Error = Color3.fromRGB(231, 76, 60),
		Warning = Color3.fromRGB(241, 196, 15),
		Success = Color3.fromRGB(46, 204, 113),
		Info = Color3.fromRGB(52, 152, 219),
	},
	Font = {
		Main = Font.fromEnum(Enum.Font.GothamSemibold),
		Bold = Font.fromEnum(Enum.Font.GothamBold),
		Light = Font.fromEnum(Enum.Font.Gotham)
	},
	Rounding = 8,
	Size = {
		Width = 540,
		Height = 380
	}
}

local function Tween(instance, properties)
	local tweenInfo = TweenInfo.new(Library.Settings.AnimationSpeed, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
	return TweenService:Create(instance, tweenInfo, properties)
end

local function GetTextSize(text, font, size)
	return TextService:GetTextSize(text, size, font.Font, Vector2.new(1000, 1000))
end

Library.Cleanup = function()
	for _, instance in ipairs(Instances) do
		if instance and instance.Parent then
			instance:Destroy()
		end
	end
	Instances = {}
	ActiveDrags = {}
	ActiveInput = {}
end

local NotificationContainer
local function CreateNotificationContainer()
	if not NotificationContainer or not NotificationContainer.Parent then
		NotificationContainer = Create("Frame", {
			Name = "NotificationContainer",
			Size = UDim2.new(0, 300, 1, 0),
			Position = UDim2.new(1, -15, 0, 0),
			BackgroundTransparency = 1,
			Parent = CoreGui,
			[1] = Create("UIListLayout", {
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 10),
				HorizontalAlignment = Enum.HorizontalAlignment.Right,
				VerticalAlignment = Enum.VerticalAlignment.Bottom
			}),
			[2] = Create("UIPadding", {
				PaddingBottom = UDim.new(0, 15),
			})
		})
	end
end

Library.Notify = function(options)
	CreateNotificationContainer()

	local title = options.Title or "Notification"
	local text = options.Text or ""
	local notifType = options.Type or "Info"

	local colors = {
		Info = Library.Settings.Theme.Info,
		Success = Library.Settings.Theme.Success,
		Warning = Library.Settings.Theme.Warning,
		Error = Library.Settings.Theme.Error
	}
	local accentColor = colors[notifType] or colors.Info

	local notificationFrame = Create("Frame", {
		Name = "Notification",
		Size = UDim2.new(1, 0, 0, 65),
		Position = UDim2.new(1.2, 0, 0, 0),
		BackgroundColor3 = Library.Settings.Theme.Primary,
		BackgroundTransparency = 0.05,
		LayoutOrder = tick(),
		Parent = NotificationContainer,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0, Library.Settings.Rounding) }),
		[2] = Create("UIStroke", { Thickness = 1, Color = Library.Settings.Theme.Secondary }),
		[3] = Create("Frame", {
			Name = "AccentBar",
			Size = UDim2.new(0, 4, 1, 0),
			BackgroundColor3 = accentColor,
			BorderSizePixel = 0,
			[1] = Create("UICorner", { CornerRadius = UDim.new(0, Library.Settings.Rounding) }),
		}),
		[4] = Create("TextLabel", {
			Name = "Title",
			Size = UDim2.new(1, -20, 0, 20),
			Position = UDim2.new(0, 12, 0, 8),
			Font = Library.Settings.Font.Bold.Font,
			Text = title,
			TextColor3 = Library.Settings.Theme.Text,
			TextSize = 15,
			TextXAlignment = Enum.TextXAlignment.Left,
			BackgroundTransparency = 1
		}),
		[5] = Create("TextLabel", {
			Name = "Text",
			Size = UDim2.new(1, -20, 0, 20),
			Position = UDim2.new(0, 12, 0, 28),
			Font = Library.Settings.Font.Light.Font,
			Text = text,
			TextColor3 = Library.Settings.Theme.MutedText,
			TextSize = 13,
			TextXAlignment = Enum.TextXAlignment.Left,
			BackgroundTransparency = 1
		})
	})
	
	local frameTransparency = { BackgroundTransparency = 0.05 }
	local text1Transparency = { TextTransparency = 0 }
	local text2Transparency = { TextTransparency = 0 }

	Tween(notificationFrame, { Position = UDim2.new(0, 0, 0, 0) }):Play()

	task.delay(Library.Settings.NotificationDuration, function()
		if not notificationFrame or not notificationFrame.Parent then return end
		local outTween = Tween(notificationFrame, { Position = UDim2.new(1.2, 0, 0, 0) })
		outTween.Completed:Connect(function()
			if notificationFrame and notificationFrame.Parent then
				notificationFrame:Destroy()
			end
		end)
		outTween:Play()
	end)
end

local WindowObject = {}
WindowObject.__index = WindowObject

function WindowObject:SetTheme(themeTable)
	Library.Settings.Theme = themeTable
	for _, instance in ipairs(Instances) do
		if instance:IsA("GuiObject") then
			local className = instance.ClassName
			local name = instance.Name
			
			if name == "Background" or name == "PageContent" then instance.BackgroundColor3 = themeTable.Background end
			if name == "Header" or name == "Main" or name == "DropdownMenu" or name == "ToggleFrame" then instance.BackgroundColor3 = themeTable.Primary end
			if name == "PageButton" or name == "OptionButton" then instance.BackgroundColor3 = themeTable.Secondary end
			if name == "TitleLabel" or name == "NameLabel" or name == "ValueLabel" then instance.TextColor3 = themeTable.Text end
			if name == "CloseButton" then instance.TextColor3 = themeTable.MutedText end
			if instance:IsA("UIStroke") then instance.Color = themeTable.Secondary end
			if name == "Accent" or name == "Fill" or name == "ToggleKnobOn" then instance.BackgroundColor3 = themeTable.Accent end
		end
	end
end

function WindowObject:ToggleVisibility()
	self.Visible = not self.Visible
	local goal = self.Visible and Vector2.new(1, 1) or Vector2.new(0, 0)
	local tween = Tween(self.ScreenGui.Main, { Size = UDim2.fromScale(goal.X, goal.Y) })
	
	if self.Visible then
		self.ScreenGui.Enabled = true
	else
		tween.Completed:Connect(function()
			if not self.Visible then
				self.ScreenGui.Enabled = false
			end
		end)
	end
	
	tween:Play()
end

function WindowObject:SaveConfig()
	local data = {}
	for _, page in ipairs(self.Pages) do
		for _, element in ipairs(page.Elements) do
			if element.Name and element.Value ~= nil then
				data[element.Name] = element.Value
			end
		end
	end
	local success, result = pcall(HttpService.JSONEncode, HttpService, data)
	if success then
		if not isfolder(Library.Settings.ConfigFolder) then
			makefolder(Library.Settings.ConfigFolder)
		end
		writefile(Library.Settings.ConfigFolder .. "/" .. Library.Settings.ConfigName, result)
	end
end

function WindowObject:LoadConfig()
	local path = Library.Settings.ConfigFolder .. "/" .. Library.Settings.ConfigName
	if not isfile(path) then return end
	
	local success, encodedData = pcall(readfile, path)
	if not success or not encodedData then return end
	
	local success, data = pcall(HttpService.JSONDecode, HttpService, encodedData)
	if not success or type(data) ~= "table" then return end
	
	for _, page in ipairs(self.Pages) do
		for _, element in ipairs(page.Elements) do
			if element.Name and data[element.Name] ~= nil and element.Update then
				element:Update(data[element.Name], true)
			end
		end
	end
end

local PageObject = {}
PageObject.__index = PageObject

function PageObject:AddButton(options)
	local name = options.Name or "Button"
	local callback = options.Callback or function() end
	
	local ButtonObject = {}
	local frame = Create("Frame", {
		Name = name,
		Size = UDim2.new(1, 0, 0, 35),
		BackgroundTransparency = 1,
		Parent = self.Content,
	})

	local button = Create("TextButton", {
		Name = "Button",
		Size = UDim2.new(1, -20, 1, 0),
		Position = UDim2.fromScale(0.5, 0.5),
		AnchorPoint = Vector2.new(0.5, 0.5),
		Text = name,
		Font = Library.Settings.Font.Main.Font,
		TextSize = 14,
		TextColor3 = Library.Settings.Theme.Text,
		BackgroundColor3 = Library.Settings.Theme.Secondary,
		Parent = frame,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0, Library.Settings.Rounding - 2) })
	})

	button.MouseEnter:Connect(function() Tween(button, { BackgroundColor3 = Color3.fromHSV(Library.Settings.Theme.Secondary:ToHSV()) - Color3.new(0,0,0.1) }):Play() end)
	button.MouseLeave:Connect(function() Tween(button, { BackgroundColor3 = Library.Settings.Theme.Secondary }):Play() end)
	
	function ButtonObject:OnClick(func)
		if type(func) == "function" then
			callback = func
		end
		return self
	end

	button.MouseButton1Click:Connect(function()
		local success, err = pcall(callback)
		if not success then
			warn("Proxima | Button Error:", err)
		end
	end)

	self.Window.Elements[name] = ButtonObject
	table.insert(self.Elements, ButtonObject)
	return ButtonObject
end

function PageObject:AddToggle(options)
	local name = options.Name or "Toggle"
	local default = options.Default or false
	local callback = options.Callback or function() end

	local ToggleObject = { Name = name, Value = default }

	local frame = Create("Frame", {
		Name = name,
		Size = UDim2.new(1, 0, 0, 45),
		BackgroundTransparency = 1,
		Parent = self.Content,
	})

	Create("TextLabel", {
		Name = "NameLabel",
		Size = UDim2.new(0.8, 0, 0, 20),
		Position = UDim2.new(0, 10, 0, 0),
		Text = name,
		Font = Library.Settings.Font.Light.Font,
		TextSize = 14,
		TextColor3 = Library.Settings.Theme.Text,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = frame
	})

	local toggleFrame = Create("TextButton", {
		Name = "ToggleFrame",
		Size = UDim2.new(0, 40, 0, 20),
		Position = UDim2.new(1, -10, 0, 0),
		AnchorPoint = Vector2.new(1, 0),
		BackgroundColor3 = Library.Settings.Theme.Secondary,
		Text = "",
		Parent = frame,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0.5, 0) })
	})

	local knob = Create("Frame", {
		Name = "ToggleKnob",
		Size = UDim2.new(0, 16, 0, 16),
		Position = UDim2.fromScale(0, 0.5),
		AnchorPoint = Vector2.new(0, 0.5),
		BackgroundColor3 = Library.Settings.Theme.MutedText,
		BorderSizePixel = 0,
		Parent = toggleFrame,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0.5, 0) })
	})
	
	function ToggleObject:Update(newValue, silent)
		ToggleObject.Value = newValue
		local pos = newValue and UDim2.fromScale(1, 0.5) or UDim2.fromScale(0, 0.5)
		local anchor = newValue and Vector2.new(1, 0.5) or Vector2.new(0, 0.5)
		local color = newValue and Library.Settings.Theme.Accent or Library.Settings.Theme.MutedText
		
		knob.AnchorPoint = anchor
		Tween(knob, { Position = pos, BackgroundColor3 = color }):Play()
		
		if not silent then
			local success, err = pcall(callback, ToggleObject.Value)
			if not success then
				warn("Proxima | Toggle Error:", err)
			end
			self.Window:SaveConfig()
		end
	end
	
	function ToggleObject:OnChanged(func)
		if type(func) == "function" then
			callback = func
		end
		return self
	end
	
	toggleFrame.MouseButton1Click:Connect(function()
		ToggleObject:Update(not ToggleObject.Value)
	end)

	ToggleObject:Update(default, true)
	self.Window.Elements[name] = ToggleObject
	table.insert(self.Elements, ToggleObject)
	return ToggleObject
end

function PageObject:AddSlider(options)
	local name = options.Name or "Slider"
	local min = options.Min or 0
	local max = options.Max or 100
	local default = options.Default or min
	local step = options.Step or 1
	local suffix = options.Suffix or ""
	local callback = options.Callback or function() end

	local SliderObject = { Name = name, Value = default }
	
	local frame = Create("Frame", {
		Name = name,
		Size = UDim2.new(1, 0, 0, 60),
		BackgroundTransparency = 1,
		Parent = self.Content,
	})

	local nameLabel = Create("TextLabel", {
		Name = "NameLabel",
		Size = UDim2.new(0.5, 0, 0, 20),
		Position = UDim2.new(0, 10, 0, 0),
		Text = name,
		Font = Library.Settings.Font.Light.Font,
		TextSize = 14,
		TextColor3 = Library.Settings.Theme.Text,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = frame
	})

	local valueLabel = Create("TextLabel", {
		Name = "ValueLabel",
		Size = UDim2.new(0.5, -10, 0, 20),
		Position = UDim2.new(1, 0, 0, 0),
		AnchorPoint = Vector2.new(1, 0),
		Font = Library.Settings.Font.Light.Font,
		TextSize = 14,
		TextColor3 = Library.Settings.Theme.MutedText,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Right,
		Parent = frame
	})

	local track = Create("Frame", {
		Name = "Track",
		Size = UDim2.new(1, -20, 0, 6),
		Position = UDim2.new(0.5, 0, 0, 35),
		AnchorPoint = Vector2.new(0.5, 0),
		BackgroundColor3 = Library.Settings.Theme.Secondary,
		Parent = frame,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0.5, 0) })
	})

	local fill = Create("Frame", {
		Name = "Fill",
		Size = UDim2.new(0, 0, 1, 0),
		BackgroundColor3 = Library.Settings.Theme.Accent,
		Parent = track,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0.5, 0) })
	})
	
	local handle = Create("Frame", {
		Name = "Handle",
		Size = UDim2.new(0, 16, 0, 16),
		Position = UDim2.new(0, 0, 0.5, 0),
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Library.Settings.Theme.Text,
		Parent = track,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0.5, 0) })
	})

	function SliderObject:Update(newValue, silent)
		local clampedValue = math.clamp(newValue, min, max)
		local steppedValue = math.floor(clampedValue / step + 0.5) * step
		SliderObject.Value = steppedValue
		
		valueLabel.Text = tostring(steppedValue) .. suffix
		
		local percent = (steppedValue - min) / (max - min)
		local goal = UDim2.fromScale(percent, 1)

		Tween(fill, { Size = goal }):Play()
		Tween(handle, { Position = UDim2.fromScale(percent, 0.5) }):Play()
		
		if not silent then
			local success, err = pcall(callback, SliderObject.Value)
			if not success then
				warn("Proxima | Slider Error:", err)
			end
			self.Window:SaveConfig()
		end
	end

	local function UpdateFromInput(input)
		local relativePos = input.Position.X - track.AbsolutePosition.X
		local percent = math.clamp(relativePos / track.AbsoluteSize.X, 0, 1)
		local rawValue = min + (max - min) * percent
		SliderObject:Update(rawValue)
	end
	
	handle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			ActiveDrags[SliderObject] = RunService.RenderStepped:Connect(function()
				UpdateFromInput(UserInputService:GetMouseLocation())
			end)
		end
	end)

	handle.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			if ActiveDrags[SliderObject] then
				ActiveDrags[SliderObject]:Disconnect()
				ActiveDrags[SliderObject] = nil
				self.Window:SaveConfig()
			end
		end
	end)
	
	function SliderObject:OnChanged(func)
		if type(func) == "function" then
			callback = func
		end
		return self
	end
	
	SliderObject:Update(default, true)
	self.Window.Elements[name] = SliderObject
	table.insert(self.Elements, SliderObject)
	return SliderObject
end

function PageObject:AddDropdown(options)
	local name = options.Name or "Dropdown"
	local items = options.Items or {}
	local default = options.Default or items[1]
	local multiSelect = options.MultiSelect or false
	local callback = options.Callback or function() end

	local DropdownObject = { Name = name }
	DropdownObject.Value = multiSelect and (type(default) == "table" and default or {}) or (type(default) == "string" and default or tostring(default))

	local expanded = false
	local ZINDEX_TOP = 10

	local frame = Create("Frame", {
		Name = name,
		Size = UDim2.new(1, 0, 0, 65),
		BackgroundTransparency = 1,
		Parent = self.Content,
		ZIndex = 2
	})
	
	Create("TextLabel", {
		Name = "NameLabel",
		Size = UDim2.new(1, -20, 0, 20),
		Position = UDim2.new(0, 10, 0, 0),
		Text = name,
		Font = Library.Settings.Font.Light.Font,
		TextSize = 14,
		TextColor3 = Library.Settings.Theme.Text,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = frame
	})

	local dropdownButton = Create("TextButton", {
		Name = "DropdownButton",
		Size = UDim2.new(1, -20, 0, 35),
		Position = UDim2.new(0.5, 0, 1, 0),
		AnchorPoint = Vector2.new(0.5, 1),
		BackgroundColor3 = Library.Settings.Theme.Secondary,
		Text = "",
		Parent = frame,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0, Library.Settings.Rounding - 2) })
	})
	
	local valueLabel = Create("TextLabel", {
		Name = "ValueLabel",
		Size = UDim2.new(1, -30, 1, 0),
		Position = UDim2.new(0, 10, 0, 0),
		Font = Library.Settings.Font.Light.Font,
		Text = "Select...",
		TextSize = 14,
		TextColor3 = Library.Settings.Theme.MutedText,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = dropdownButton,
	})

	local arrow = Create("TextLabel", {
		Name = "Arrow",
		Size = UDim2.new(0, 20, 1, 0),
		Position = UDim2.new(1, -10, 0, 0),
		AnchorPoint = Vector2.new(1, 0),
		Font = Library.Settings.Font.Bold.Font,
		Text = "▼",
		TextSize = 14,
		TextColor3 = Library.Settings.Theme.MutedText,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Center,
		Parent = dropdownButton
	})

	local menu = Create("ScrollingFrame", {
		Name = "DropdownMenu",
		Size = UDim2.new(1, -20, 0, 0),
		Position = UDim2.new(0.5, 0, 1, 5),
		AnchorPoint = Vector2.new(0.5, 0),
		BackgroundColor3 = Library.Settings.Theme.Primary,
		BorderSizePixel = 1,
		BorderColor3 = Library.Settings.Theme.Secondary,
		ClipsDescendants = true,
		Visible = false,
		Parent = frame,
		ZIndex = ZINDEX_TOP,
		CanvasSize = UDim2.new(),
		ScrollBarThickness = 4,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0, Library.Settings.Rounding - 2) }),
		[2] = Create("UIListLayout", {
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 4)
		}),
		[3] = Create("UIPadding", {
			PaddingTop = UDim.new(0, 4),
			PaddingBottom = UDim.new(0, 4),
			PaddingLeft = UDim.new(0, 4),
			PaddingRight = UDim.new(0, 4),
		})
	})
	
	local function UpdateValueLabel()
		if multiSelect then
			local count = 0
			for _ in pairs(DropdownObject.Value) do
				count = count + 1
			end
			valueLabel.Text = count .. " Selected"
			valueLabel.TextColor3 = Library.Settings.Theme.Text
		else
			valueLabel.Text = tostring(DropdownObject.Value)
			valueLabel.TextColor3 = Library.Settings.Theme.Text
		end
	end

	local function ToggleMenu(state)
		expanded = state
		frame.ZIndex = state and ZINDEX_TOP or 2
		menu.Visible = true
		
		local height = math.min(#items * 34 + 8, 144)
		local goalSize = state and UDim2.new(1, -20, 0, height) or UDim2.new(1, -20, 0, 0)
		local goalRotation = state and 180 or 0

		Tween(menu, { Size = goalSize }):Play()
		Tween(arrow, { Rotation = goalRotation }):Play()

		if not state then
			task.wait(Library.Settings.AnimationSpeed)
			menu.Visible = false
		end
	end
	
	local function CreateOptionButtons()
		for _, child in ipairs(menu:GetChildren()) do
			if child:IsA("TextButton") then
				child:Destroy()
			end
		end

		for _, item in ipairs(items) do
			local itemStr = tostring(item)
			local optionButton = Create("TextButton", {
				Name = "OptionButton",
				Size = UDim2.new(1, -8, 0, 30),
				BackgroundColor3 = Library.Settings.Theme.Secondary,
				Text = itemStr,
				Font = Library.Settings.Font.Light.Font,
				TextSize = 14,
				TextColor3 = Library.Settings.Theme.Text,
				Parent = menu,
				[1] = Create("UICorner", { CornerRadius = UDim.new(0, Library.Settings.Rounding - 4)})
			})
			
			if multiSelect then
				local checkmark = Create("TextLabel", {
					Name = "Checkmark",
					Size = UDim2.new(0, 20, 1, 0),
					Position = UDim2.new(1, -10, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5),
					Font = Library.Settings.Font.Bold.Font,
					Text = "✓",
					TextSize = 16,
					TextColor3 = Library.Settings.Theme.Accent,
					BackgroundTransparency = 1,
					Visible = false,
					Parent = optionButton
				})
				
				if DropdownObject.Value[item] then
					checkmark.Visible = true
				end

				optionButton.MouseButton1Click:Connect(function()
					DropdownObject.Value[item] = not DropdownObject.Value[item]
					checkmark.Visible = DropdownObject.Value[item]
					UpdateValueLabel()
					local success, err = pcall(callback, DropdownObject.Value)
					if not success then
						warn("Proxima | Dropdown Error:", err)
					end
					self.Window:SaveConfig()
				end)
			else
				optionButton.MouseButton1Click:Connect(function()
					DropdownObject.Value = item
					UpdateValueLabel()
					ToggleMenu(false)
					local success, err = pcall(callback, DropdownObject.Value)
					if not success then
						warn("Proxima | Dropdown Error:", err)
					end
					self.Window:SaveConfig()
				end)
			end
		end
		menu.CanvasSize = UDim2.new(0, 0, 0, menu.UIListLayout.AbsoluteContentSize.Y)
	end

	dropdownButton.MouseButton1Click:Connect(function()
		ToggleMenu(not expanded)
	end)
	
	function DropdownObject:Update(newValue, silent)
		if multiSelect then
			DropdownObject.Value = type(newValue) == "table" and newValue or {}
		else
			DropdownObject.Value = newValue
		end
		UpdateValueLabel()
		CreateOptionButtons()
		
		if not silent then
			local success, err = pcall(callback, DropdownObject.Value)
			if not success then
				warn("Proxima | Dropdown Error:", err)
			end
			self.Window:SaveConfig()
		end
	end

	function DropdownObject:SetOptions(newItems)
		items = newItems or {}
		CreateOptionButtons()
		return self
	end

	function DropdownObject:OnChanged(func)
		if type(func) == "function" then
			callback = func
		end
		return self
	end

	DropdownObject:Update(DropdownObject.Value, true)
	self.Window.Elements[name] = DropdownObject
	table.insert(self.Elements, DropdownObject)
	return DropdownObject
end

function WindowObject:AddPage(name)
	local pageButton = Create("TextButton", {
		Name = "PageButton",
		Size = UDim2.new(0, GetTextSize(name, Library.Settings.Font.Main, 14).X + 20, 1, 0),
		Text = name,
		Font = Library.Settings.Font.Main.Font,
		TextSize = 14,
		TextColor3 = Library.Settings.Theme.MutedText,
		BackgroundColor3 = Library.Settings.Theme.Primary,
		Parent = self.PageButtons,
	})

	local pageContent = Create("ScrollingFrame", {
		Name = "PageContent",
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		Visible = #self.Pages == 0,
		Parent = self.PageContainer,
		CanvasSize = UDim2.new(),
		ScrollBarThickness = 4,
		[1] = Create("UIListLayout", {
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 5)
		}),
		[2] = Create("UIPadding", {
			PaddingLeft = UDim.new(0, 10),
			PaddingRight = UDim.new(0, 10),
			PaddingTop = UDim.new(0, 10)
		})
	})

	local Page = setmetatable({
		Name = name,
		Button = pageButton,
		Content = pageContent,
		Window = self,
		Elements = {}
	}, PageObject)

	RunService.Heartbeat:Connect(function()
		if pageContent.Visible then
			pageContent.CanvasSize = UDim2.new(0, 0, 0, pageContent.UIListLayout.AbsoluteContentSize.Y)
		end
	end)
	
	local accent = Create("Frame", {
		Name = "Accent",
		Size = UDim2.new(1, 0, 0, 2),
		Position = UDim2.new(0, 0, 1, 0),
		BackgroundColor3 = Library.Settings.Theme.Accent,
		BorderSizePixel = 0,
		Visible = #self.Pages == 0,
		Parent = pageButton
	})

	pageButton.MouseButton1Click:Connect(function()
		for _, p in ipairs(self.Pages) do
			p.Content.Visible = false
			p.Button.TextColor3 = Library.Settings.Theme.MutedText
			p.Button.Accent.Visible = false
		end
		Page.Content.Visible = true
		pageButton.TextColor3 = Library.Settings.Theme.Text
		accent.Visible = true
	end)

	if #self.Pages == 0 then
		pageButton.TextColor3 = Library.Settings.Theme.Text
	end
	
	table.insert(self.Pages, Page)
	return Page
end

function Library:CreateWindow(options)
	Library.Cleanup()

	local title = options.Title or "Proxima"
	Library.Settings.Size = options.Size or Library.Settings.Size
	Library.Settings.Keybind = options.Keybind or Library.Settings.Keybind

	local screenGui = Create("ScreenGui", {
		Name = title,
		DisplayOrder = 999,
		ResetOnSpawn = false,
		Parent = CoreGui
	})
	
	local main = Create("Frame", {
		Name = "Main",
		Size = UDim2.fromScale(1, 1),
		Position = UDim2.fromScale(0.5, 0.5),
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundColor3 = Library.Settings.Theme.Background,
		BorderSizePixel = 0,
		ClipsDescendants = true,
		Parent = screenGui,
		[1] = Create("UICorner", { CornerRadius = UDim.new(0, Library.Settings.Rounding) }),
		[2] = Create("UIStroke", { Thickness = 1, Color = Library.Settings.Theme.Secondary }),
		[3] = Create("UISizeConstraint", {
			MinSize = Vector2.new(Library.Settings.Size.Width, Library.Settings.Size.Height)
		})
	})
	
	local shadow = Create("ImageLabel", {
		Name = "Shadow",
		Size = UDim2.new(1, 20, 1, 20),
		Position = UDim2.fromScale(0.5, 0.5),
		AnchorPoint = Vector2.new(0.5, 0.5),
		BackgroundTransparency = 1,
		Image = "rbxassetid://16489868319",
		ImageColor3 = Library.Settings.Theme.Shadow,
		ImageTransparency = 0.5,
		ScaleType = Enum.ScaleType.Slice,
		SliceCenter = Rect.new(20, 20, 80, 80),
		ZIndex = -1,
		Parent = main
	})

	local header = Create("Frame", {
		Name = "Header",
		Size = UDim2.new(1, 0, 0, 40),
		BackgroundColor3 = Library.Settings.Theme.Primary,
		Parent = main,
	})

	local titleLabel = Create("TextLabel", {
		Name = "TitleLabel",
		Size = UDim2.new(1, -50, 1, 0),
		Position = UDim2.new(0, 15, 0, 0),
		Font = Library.Settings.Font.Bold.Font,
		Text = title,
		TextSize = 16,
		TextColor3 = Library.Settings.Theme.Text,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = header
	})

	local closeButton = Create("TextButton", {
		Name = "CloseButton",
		Size = UDim2.new(0, 40, 1, 0),
		Position = UDim2.fromScale(1, 0),
		AnchorPoint = Vector2.new(1, 0),
		Text = "X",
		Font = Library.Settings.Font.Bold.Font,
		TextSize = 16,
		TextColor3 = Library.Settings.Theme.MutedText,
		BackgroundTransparency = 1,
		Parent = header
	})

	local pageButtons = Create("Frame", {
		Name = "PageButtons",
		Size = UDim2.new(1, 0, 0, 35),
		Position = UDim2.new(0, 0, 0, 40),
		BackgroundColor3 = Library.Settings.Theme.Primary,
		Parent = main,
		[1] = Create("UIListLayout", {
			FillDirection = Enum.FillDirection.Horizontal,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 5)
		}),
		[2] = Create("UIPadding", {
			PaddingLeft = UDim.new(0, 10)
		}),
		[3] = Create("UIStroke", { ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Thickness = 1, Color = Library.Settings.Theme.Secondary, LineJoinMode = Enum.LineJoinMode.Round })
	})
	
	local pageContainer = Create("Frame", {
		Name = "PageContainer",
		Size = UDim2.new(1, 0, 1, -75),
		Position = UDim2.new(0, 0, 0, 75),
		BackgroundTransparency = 1,
		Parent = main
	})
	
	local Window = setmetatable({
		ScreenGui = screenGui,
		Main = main,
		PageButtons = pageButtons,
		PageContainer = pageContainer,
		Pages = {},
		Elements = {},
		Visible = true,
	}, WindowObject)
	
	header.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			if not ActiveInput.Drag then
				local initialPos = input.Position - main.AbsolutePosition
				ActiveInput.Drag = UserInputService.InputChanged:Connect(function(change)
					if change.UserInputType == Enum.UserInputType.MouseMovement or change.UserInputType == Enum.UserInputType.Touch then
						local newPos = UDim2.fromOffset(change.Position.X - initialPos.X, change.Position.Y - initialPos.Y)
						Tween(main, { Position = newPos }):Play()
					end
				end)
			end
		end
	end)

	header.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			if ActiveInput.Drag then
				ActiveInput.Drag:Disconnect()
				ActiveInput.Drag = nil
			end
		end
	end)

	closeButton.MouseButton1Click:Connect(function()
		Window:ToggleVisibility()
	end)

	UserInputService.InputBegan:Connect(function(input, processed)
		if processed then return end
		if input.KeyCode == Library.Settings.Keybind then
			Window:ToggleVisibility()
		end
	end)

	main.Size = UDim2.fromScale(0,0)
	Window:ToggleVisibility()
	Window:LoadConfig()

	return Window
end

return Library
