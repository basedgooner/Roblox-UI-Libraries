local Library = {}
Library.__index = Library

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local function GetSave()
   return CoreGui:FindFirstChild("LibrarySaveData") or Instance.new("Configuration", CoreGui)
end

local function SaveConfig(data)
   local save = GetSave()
   save.Name = "LibrarySaveData"
   for k, v in pairs(data) do
       local val = save:FindFirstChild(k) or Instance.new("StringValue", save)
       val.Name = k
       val.Value = HttpService:JSONEncode(v)
   end
end

local function LoadConfig()
   local save = GetSave()
   local data = {}
   for _, v in pairs(save:GetChildren()) do
       data[v.Name] = HttpService:JSONDecode(v.Value)
   end
   return data
end

local Themes = {
   Dark = {
       Background = Color3.fromRGB(18, 18, 22),
       Secondary = Color3.fromRGB(24, 24, 30),
       Tertiary = Color3.fromRGB(32, 32, 40),
       Text = Color3.fromRGB(240, 240, 245),
       TextDim = Color3.fromRGB(160, 160, 170),
       Accent = Color3.fromRGB(88, 101, 242),
       AccentDim = Color3.fromRGB(68, 81, 222),
       Success = Color3.fromRGB(46, 204, 113),
       Warning = Color3.fromRGB(241, 196, 15),
       Error = Color3.fromRGB(231, 76, 60),
       Border = Color3.fromRGB(42, 42, 52)
   },
   Light = {
       Background = Color3.fromRGB(252, 252, 253),
       Secondary = Color3.fromRGB(245, 245, 248),
       Tertiary = Color3.fromRGB(238, 238, 242),
       Text = Color3.fromRGB(20, 20, 25),
       TextDim = Color3.fromRGB(100, 100, 110),
       Accent = Color3.fromRGB(88, 101, 242),
       AccentDim = Color3.fromRGB(108, 121, 255),
       Success = Color3.fromRGB(46, 204, 113),
       Warning = Color3.fromRGB(241, 196, 15),
       Error = Color3.fromRGB(231, 76, 60),
       Border = Color3.fromRGB(220, 220, 230)
   },
   Midnight = {
       Background = Color3.fromRGB(10, 10, 15),
       Secondary = Color3.fromRGB(15, 15, 22),
       Tertiary = Color3.fromRGB(22, 22, 32),
       Text = Color3.fromRGB(230, 230, 240),
       TextDim = Color3.fromRGB(140, 140, 160),
       Accent = Color3.fromRGB(138, 101, 242),
       AccentDim = Color3.fromRGB(118, 81, 222),
       Success = Color3.fromRGB(46, 204, 113),
       Warning = Color3.fromRGB(241, 196, 15),
       Error = Color3.fromRGB(231, 76, 60),
       Border = Color3.fromRGB(32, 32, 45)
   }
}

local Settings = {
   Theme = "Dark",
   ToggleKey = Enum.KeyCode.K,
   AnimationDuration = 0.35,
   CornerRadius = 10,
   TextSize = 14,
   HeaderSize = 16,
   Padding = 12,
   ElementHeight = 38,
   NotificationDuration = 4,
   NotificationMax = 5,
   SaveOnClose = true
}

function Library:Create(config)
   local self = setmetatable({}, Library)
   
   self.Settings = {}
   for k, v in pairs(Settings) do
       self.Settings[k] = (config and config[k]) or v
   end
   
   self.Theme = Themes[self.Settings.Theme] or Themes.Dark
   self.Pages = {}
   self.Elements = {}
   self.Notifications = {}
   self.Connections = {}
   self.Visible = true
   
   self:BuildInterface()
   self:SetupKeybind()
   
   return self
end

function Library:BuildInterface()
   self.ScreenGui = Instance.new("ScreenGui")
   self.ScreenGui.Name = "LibraryUI"
   self.ScreenGui.ResetOnSpawn = false
   self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
   self.ScreenGui.Parent = CoreGui
   
   self.MainFrame = Instance.new("Frame")
   self.MainFrame.Size = UDim2.new(0, 680, 0, 480)
   self.MainFrame.Position = UDim2.new(0.5, -340, 0.5, -240)
   self.MainFrame.BackgroundColor3 = self.Theme.Background
   self.MainFrame.BorderSizePixel = 0
   self.MainFrame.Parent = self.ScreenGui
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, self.Settings.CornerRadius)
   corner.Parent = self.MainFrame
   
   local shadow = Instance.new("ImageLabel")
   shadow.Size = UDim2.new(1, 40, 1, 40)
   shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
   shadow.AnchorPoint = Vector2.new(0.5, 0.5)
   shadow.BackgroundTransparency = 1
   shadow.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
   shadow.ImageColor3 = Color3.new(0, 0, 0)
   shadow.ImageTransparency = 0.8
   shadow.ScaleType = Enum.ScaleType.Slice
   shadow.SliceCenter = Rect.new(10, 10, 10, 10)
   shadow.Parent = self.MainFrame
   shadow.ZIndex = -1
   
   self:CreateHeader()
   self:CreatePageContainer()
   self:CreateContentContainer()
   self:EnableDragging()
end

function Library:CreateHeader()
   self.Header = Instance.new("Frame")
   self.Header.Size = UDim2.new(1, 0, 0, 50)
   self.Header.BackgroundColor3 = self.Theme.Secondary
   self.Header.BorderSizePixel = 0
   self.Header.Parent = self.MainFrame
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, self.Settings.CornerRadius)
   corner.Parent = self.Header
   
   local bottom = Instance.new("Frame")
   bottom.Size = UDim2.new(1, 0, 0, self.Settings.CornerRadius)
   bottom.Position = UDim2.new(0, 0, 1, -self.Settings.CornerRadius)
   bottom.BackgroundColor3 = self.Theme.Secondary
   bottom.BorderSizePixel = 0
   bottom.Parent = self.Header
   
   self.Title = Instance.new("TextLabel")
   self.Title.Size = UDim2.new(0.5, 0, 1, 0)
   self.Title.Position = UDim2.new(0, self.Settings.Padding, 0, 0)
   self.Title.BackgroundTransparency = 1
   self.Title.Text = "Library"
   self.Title.TextColor3 = self.Theme.Text
   self.Title.TextScaled = false
   self.Title.TextSize = self.Settings.HeaderSize
   self.Title.TextXAlignment = Enum.TextXAlignment.Left
   self.Title.Font = Enum.Font.Gotham
   self.Title.Parent = self.Header
   
   self.CloseButton = Instance.new("TextButton")
   self.CloseButton.Size = UDim2.new(0, 30, 0, 30)
   self.CloseButton.Position = UDim2.new(1, -40, 0.5, -15)
   self.CloseButton.BackgroundColor3 = self.Theme.Tertiary
   self.CloseButton.Text = "Ã—"
   self.CloseButton.TextColor3 = self.Theme.TextDim
   self.CloseButton.TextSize = 24
   self.CloseButton.Font = Enum.Font.Gotham
   self.CloseButton.BorderSizePixel = 0
   self.CloseButton.Parent = self.Header
   
   local closeCorner = Instance.new("UICorner")
   closeCorner.CornerRadius = UDim.new(0, 6)
   closeCorner.Parent = self.CloseButton
   
   self.CloseButton.MouseEnter:Connect(function()
       TweenService:Create(self.CloseButton, TweenInfo.new(0.2), {
           BackgroundColor3 = self.Theme.Error,
           TextColor3 = self.Theme.Text
       }):Play()
   end)
   
   self.CloseButton.MouseLeave:Connect(function()
       TweenService:Create(self.CloseButton, TweenInfo.new(0.2), {
           BackgroundColor3 = self.Theme.Tertiary,
           TextColor3 = self.Theme.TextDim
       }):Play()
   end)
   
   self.CloseButton.MouseButton1Click:Connect(function()
       self:Toggle()
   end)
end

function Library:CreatePageContainer()
   self.PageContainer = Instance.new("Frame")
   self.PageContainer.Size = UDim2.new(1, -2 * self.Settings.Padding, 0, 40)
   self.PageContainer.Position = UDim2.new(0, self.Settings.Padding, 0, 60)
   self.PageContainer.BackgroundTransparency = 1
   self.PageContainer.Parent = self.MainFrame
   
   self.PageLayout = Instance.new("UIListLayout")
   self.PageLayout.FillDirection = Enum.FillDirection.Horizontal
   self.PageLayout.Padding = UDim.new(0, 8)
   self.PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
   self.PageLayout.Parent = self.PageContainer
end

function Library:CreateContentContainer()
   self.ContentContainer = Instance.new("Frame")
   self.ContentContainer.Size = UDim2.new(1, -2 * self.Settings.Padding, 1, -120)
   self.ContentContainer.Position = UDim2.new(0, self.Settings.Padding, 0, 110)
   self.ContentContainer.BackgroundColor3 = self.Theme.Secondary
   self.ContentContainer.BorderSizePixel = 0
   self.ContentContainer.Parent = self.MainFrame
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, self.Settings.CornerRadius - 2)
   corner.Parent = self.ContentContainer
end

function Library:EnableDragging()
   local dragging, dragStart, startPos
   
   self.Header.InputBegan:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 then
           dragging = true
           dragStart = input.Position
           startPos = self.MainFrame.Position
       end
   end)
   
   UserInputService.InputChanged:Connect(function(input)
       if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
           local delta = input.Position - dragStart
           self.MainFrame.Position = UDim2.new(
               startPos.X.Scale,
               startPos.X.Offset + delta.X,
               startPos.Y.Scale,
               startPos.Y.Offset + delta.Y
           )
       end
   end)
   
   UserInputService.InputEnded:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 then
           dragging = false
       end
   end)
end

function Library:SetupKeybind()
   UserInputService.InputBegan:Connect(function(input, processed)
       if not processed and input.KeyCode == self.Settings.ToggleKey then
           self:Toggle()
       end
   end)
end

function Library:Toggle()
   self.Visible = not self.Visible
   
   if self.Visible then
       self.MainFrame.Visible = true
       TweenService:Create(self.MainFrame, TweenInfo.new(self.Settings.AnimationDuration, Enum.EasingStyle.Quint), {
           Size = UDim2.new(0, 680, 0, 480),
           Position = UDim2.new(0.5, -340, 0.5, -240)
       }):Play()
   else
       local tween = TweenService:Create(self.MainFrame, TweenInfo.new(self.Settings.AnimationDuration, Enum.EasingStyle.Quint), {
           Size = UDim2.new(0, 680, 0, 0),
           Position = UDim2.new(0.5, -340, 0.5, 0)
       })
       tween:Play()
       tween.Completed:Connect(function()
           if not self.Visible then
               self.MainFrame.Visible = false
           end
       end)
       
       if self.Settings.SaveOnClose then
           self:SaveConfiguration()
       end
   end
end

function Library:CreatePage(name)
   local page = {}
   page.Name = name
   page.Elements = {}
   page.Active = false
   
   page.Button = Instance.new("TextButton")
   page.Button.Size = UDim2.new(0, 100, 1, 0)
   page.Button.BackgroundColor3 = self.Theme.Tertiary
   page.Button.Text = name
   page.Button.TextColor3 = self.Theme.TextDim
   page.Button.TextSize = self.Settings.TextSize
   page.Button.Font = Enum.Font.Gotham
   page.Button.BorderSizePixel = 0
   page.Button.Parent = self.PageContainer
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 8)
   corner.Parent = page.Button
   
   page.Frame = Instance.new("ScrollingFrame")
   page.Frame.Size = UDim2.new(1, 0, 1, 0)
   page.Frame.BackgroundTransparency = 1
   page.Frame.BorderSizePixel = 0
   page.Frame.ScrollBarThickness = 4
   page.Frame.ScrollBarImageColor3 = self.Theme.Accent
   page.Frame.CanvasSize = UDim2.new(0, 0, 0, 0)
   page.Frame.Visible = false
   page.Frame.Parent = self.ContentContainer
   
   page.Layout = Instance.new("UIListLayout")
   page.Layout.Padding = UDim.new(0, 8)
   page.Layout.SortOrder = Enum.SortOrder.LayoutOrder
   page.Layout.Parent = page.Frame
   
   page.Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
       page.Frame.CanvasSize = UDim2.new(0, 0, 0, page.Layout.AbsoluteContentSize.Y + 20)
   end)
   
   page.Button.MouseButton1Click:Connect(function()
       self:SelectPage(page)
   end)
   
   if #self.Pages == 0 then
       self:SelectPage(page)
   end
   
   table.insert(self.Pages, page)
   return page
end

function Library:SelectPage(page)
   for _, p in pairs(self.Pages) do
       p.Active = false
       p.Frame.Visible = false
       TweenService:Create(p.Button, TweenInfo.new(0.2), {
           BackgroundColor3 = self.Theme.Tertiary,
           TextColor3 = self.Theme.TextDim
       }):Play()
   end
   
   page.Active = true
   page.Frame.Visible = true
   TweenService:Create(page.Button, TweenInfo.new(0.2), {
       BackgroundColor3 = self.Theme.Accent,
       TextColor3 = self.Theme.Text
   }):Play()
end

function Library:CreateButton(page, config)
   local element = Instance.new("Frame")
   element.Size = UDim2.new(1, -16, 0, self.Settings.ElementHeight)
   element.BackgroundColor3 = self.Theme.Tertiary
   element.BorderSizePixel = 0
   element.Parent = page.Frame
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 8)
   corner.Parent = element
   
   local button = Instance.new("TextButton")
   button.Size = UDim2.new(1, -self.Settings.Padding * 2, 1, -8)
   button.Position = UDim2.new(0, self.Settings.Padding, 0, 4)
   button.BackgroundColor3 = self.Theme.Accent
   button.Text = config.Text or "Button"
   button.TextColor3 = self.Theme.Text
   button.TextSize = self.Settings.TextSize
   button.Font = Enum.Font.Gotham
   button.BorderSizePixel = 0
   button.Parent = element
   
   local buttonCorner = Instance.new("UICorner")
   buttonCorner.CornerRadius = UDim.new(0, 6)
   buttonCorner.Parent = button
   
   button.MouseEnter:Connect(function()
       TweenService:Create(button, TweenInfo.new(0.2), {
           BackgroundColor3 = self.Theme.AccentDim
       }):Play()
   end)
   
   button.MouseLeave:Connect(function()
       TweenService:Create(button, TweenInfo.new(0.2), {
           BackgroundColor3 = self.Theme.Accent
       }):Play()
   end)
   
   button.MouseButton1Click:Connect(function()
       if config.Callback then
           config.Callback()
       end
   end)
   
   return element
end

function Library:CreateToggle(page, config)
   local element = Instance.new("Frame")
   element.Size = UDim2.new(1, -16, 0, self.Settings.ElementHeight)
   element.BackgroundColor3 = self.Theme.Tertiary
   element.BorderSizePixel = 0
   element.Parent = page.Frame
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 8)
   corner.Parent = element
   
   local label = Instance.new("TextLabel")
   label.Size = UDim2.new(0.7, -self.Settings.Padding, 1, 0)
   label.Position = UDim2.new(0, self.Settings.Padding, 0, 0)
   label.BackgroundTransparency = 1
   label.Text = config.Text or "Toggle"
   label.TextColor3 = self.Theme.Text
   label.TextSize = self.Settings.TextSize
   label.TextXAlignment = Enum.TextXAlignment.Left
   label.Font = Enum.Font.Gotham
   label.Parent = element
   
   local toggle = Instance.new("Frame")
   toggle.Size = UDim2.new(0, 46, 0, 24)
   toggle.Position = UDim2.new(1, -56, 0.5, -12)
   toggle.BackgroundColor3 = self.Theme.Border
   toggle.BorderSizePixel = 0
   toggle.Parent = element
   
   local toggleCorner = Instance.new("UICorner")
   toggleCorner.CornerRadius = UDim.new(1, 0)
   toggleCorner.Parent = toggle
   
   local indicator = Instance.new("Frame")
   indicator.Size = UDim2.new(0, 18, 0, 18)
   indicator.Position = UDim2.new(0, 3, 0.5, -9)
   indicator.BackgroundColor3 = self.Theme.Text
   indicator.BorderSizePixel = 0
   indicator.Parent = toggle
   
   local indicatorCorner = Instance.new("UICorner")
   indicatorCorner.CornerRadius = UDim.new(1, 0)
   indicatorCorner.Parent = indicator
   
   local button = Instance.new("TextButton")
   button.Size = UDim2.new(1, 0, 1, 0)
   button.BackgroundTransparency = 1
   button.Text = ""
   button.Parent = toggle
   
   local toggled = config.Default or false
   
   local function UpdateToggle()
       if toggled then
           TweenService:Create(toggle, TweenInfo.new(0.2), {
               BackgroundColor3 = self.Theme.Accent
           }):Play()
           TweenService:Create(indicator, TweenInfo.new(0.2), {
               Position = UDim2.new(1, -21, 0.5, -9)
           }):Play()
       else
           TweenService:Create(toggle, TweenInfo.new(0.2), {
               BackgroundColor3 = self.Theme.Border
           }):Play()
           TweenService:Create(indicator, TweenInfo.new(0.2), {
               Position = UDim2.new(0, 3, 0.5, -9)
           }):Play()
       end
       
       if config.Callback then
           config.Callback(toggled)
       end
   end
   
   button.MouseButton1Click:Connect(function()
       toggled = not toggled
       UpdateToggle()
   end)
   
   UpdateToggle()
   
   return element
end

function Library:CreateSlider(page, config)
   local element = Instance.new("Frame")
   element.Size = UDim2.new(1, -16, 0, self.Settings.ElementHeight + 20)
   element.BackgroundColor3 = self.Theme.Tertiary
   element.BorderSizePixel = 0
   element.Parent = page.Frame
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 8)
   corner.Parent = element
   
   local label = Instance.new("TextLabel")
   label.Size = UDim2.new(0.6, -self.Settings.Padding, 0, 30)
   label.Position = UDim2.new(0, self.Settings.Padding, 0, 0)
   label.BackgroundTransparency = 1
   label.Text = config.Text or "Slider"
   label.TextColor3 = self.Theme.Text
   label.TextSize = self.Settings.TextSize
   label.TextXAlignment = Enum.TextXAlignment.Left
   label.Font = Enum.Font.Gotham
   label.Parent = element
   
   local valueLabel = Instance.new("TextLabel")
   valueLabel.Size = UDim2.new(0.4, -self.Settings.Padding, 0, 30)
   valueLabel.Position = UDim2.new(0.6, 0, 0, 0)
   valueLabel.BackgroundTransparency = 1
   valueLabel.Text = tostring(config.Default or config.Min or 0)
   valueLabel.TextColor3 = self.Theme.TextDim
   valueLabel.TextSize = self.Settings.TextSize
   valueLabel.TextXAlignment = Enum.TextXAlignment.Right
   valueLabel.Font = Enum.Font.Gotham
   valueLabel.Parent = element
   
   local sliderBg = Instance.new("Frame")
   sliderBg.Size = UDim2.new(1, -self.Settings.Padding * 2, 0, 6)
   sliderBg.Position = UDim2.new(0, self.Settings.Padding, 0, 35)
   sliderBg.BackgroundColor3 = self.Theme.Border
   sliderBg.BorderSizePixel = 0
   sliderBg.Parent = element
   
   local sliderBgCorner = Instance.new("UICorner")
   sliderBgCorner.CornerRadius = UDim.new(1, 0)
   sliderBgCorner.Parent = sliderBg
   
   local sliderFill = Instance.new("Frame")
   sliderFill.Size = UDim2.new(0, 0, 1, 0)
   sliderFill.BackgroundColor3 = self.Theme.Accent
   sliderFill.BorderSizePixel = 0
   sliderFill.Parent = sliderBg
   
   local sliderFillCorner = Instance.new("UICorner")
   sliderFillCorner.CornerRadius = UDim.new(1, 0)
   sliderFillCorner.Parent = sliderFill
   
   local handle = Instance.new("Frame")
   handle.Size = UDim2.new(0, 16, 0, 16)
   handle.Position = UDim2.new(0, -8, 0.5, -8)
   handle.BackgroundColor3 = self.Theme.Text
   handle.BorderSizePixel = 0
   handle.Parent = sliderFill
   
   local handleCorner = Instance.new("UICorner")
   handleCorner.CornerRadius = UDim.new(1, 0)
   handleCorner.Parent = handle
   
   local min = config.Min or 0
   local max = config.Max or 100
   local step = config.Step or 1
   local value = config.Default or min
   
   local function UpdateSlider(val)
       val = math.clamp(val, min, max)
       val = math.floor(val / step + 0.5) * step
       value = val
       
       local percent = (value - min) / (max - min)
       TweenService:Create(sliderFill, TweenInfo.new(0.1), {
           Size = UDim2.new(percent, 0, 1, 0)
       }):Play()
       
       valueLabel.Text = tostring(value)
       
       if config.Callback then
           config.Callback(value)
       end
   end
   
   local dragging = false
   
   sliderBg.InputBegan:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 then
           dragging = true
           local percent = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
           UpdateSlider(min + percent * (max - min))
       end
   end)
   
   UserInputService.InputChanged:Connect(function(input)
       if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
           local percent = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
           UpdateSlider(min + percent * (max - min))
       end
   end)
   
   UserInputService.InputEnded:Connect(function(input)
       if input.UserInputType == Enum.UserInputType.MouseButton1 then
           dragging = false
       end
   end)
   
   UpdateSlider(value)
   
   return element
end

function Library:CreateDropdown(page, config)
   local element = Instance.new("Frame")
   element.Size = UDim2.new(1, -16, 0, self.Settings.ElementHeight)
   element.BackgroundColor3 = self.Theme.Tertiary
   element.BorderSizePixel = 0
   element.Parent = page.Frame
   
   local corner = Instance.new("UICorner")
   corner.CornerRadius = UDim.new(0, 8)
   corner.Parent = element
   
   local label = Instance.new("TextLabel")
   label.Size = UDim2.new(0.4, -self.Settings.Padding, 1, 0)
   label.Position = UDim2.new(0, self.Settings.Padding, 0, 0)
   label.BackgroundTransparency = 1
   label.Text = config.Text or "Dropdown"
   label.TextColor3 = self.Theme.Text
   label.TextSize = self.Settings.TextSize
   label.TextXAlignment = Enum.TextXAlignment.Left
   label.Font = Enum.Font.Gotham
   label.Parent = element
   
   local dropdown = Instance.new("Frame")
   dropdown.Size = UDim2.new(0.5, 0, 0, 28)
   dropdown.Position = UDim2.new(0.5, 0, 0.5, -14)
   dropdown.BackgroundColor3 = self.Theme.Background
   dropdown.BorderSizePixel = 0
   dropdown.Parent = element
   
   local dropdownCorner = Instance.new("UICorner")
   dropdownCorner.CornerRadius = UDim.new(0, 6)
   dropdownCorner.Parent = dropdown
   
   local selected = Instance.new("TextLabel")
   selected.Size = UDim2.new(0.85, -8, 1, 0)
   selected.Position = UDim2.new(0, 8, 0, 0)
   selected.BackgroundTransparency = 1
   selected.Text = config.Default or "None"
   selected.TextColor3 = self.Theme.TextDim
   selected.TextSize = self.Settings.TextSize - 1
   selected.TextXAlignment = Enum.TextXAlignment.Left
   selected.Font = Enum.Font.Gotham
   selected.Parent = dropdown
   
   local arrow = Instance.new("TextLabel")
   arrow.Size = UDim2.new(0, 20, 1, 0)
   arrow.Position = UDim2.new(1, -25, 0, 0)
   arrow.BackgroundTransparency = 1
   arrow.Text = "â–¼"
   arrow.TextColor3 = self.Theme.TextDim
   arrow.TextSize = 10
   arrow.Font = Enum.Font.Gotham
   arrow.Parent = dropdown
   
   local button = Instance.new("TextButton")
   button.Size = UDim2.new(1, 0, 1, 0)
   button.BackgroundTransparency = 1
   button.Text = ""
   button.Parent = dropdown
   
   local optionsFrame = Instance.new("Frame")
    optionsFrame.Size = UDim2.new(1, 0, 0, 0)
    optionsFrame.Position = UDim2.new(0, 0, 1, 5)
    optionsFrame.BackgroundColor3 = self.Theme.Background
    optionsFrame.BorderSizePixel = 0
    optionsFrame.Visible = false
    optionsFrame.ClipsDescendants = true
    optionsFrame.Parent = dropdown
    optionsFrame.ZIndex = 10
    
    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = UDim.new(0, 6)
    optionsCorner.Parent = optionsFrame
    
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.Padding = UDim.new(0, 2)
    optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionsLayout.Parent = optionsFrame
    
    local isOpen = false
    local options = config.Options or {}
    local currentValue = config.Default
    
    local function CreateOption(text)
        local option = Instance.new("TextButton")
        option.Size = UDim2.new(1, 0, 0, 26)
        option.BackgroundColor3 = self.Theme.Secondary
        option.Text = text
        option.TextColor3 = self.Theme.TextDim
        option.TextSize = self.Settings.TextSize - 1
        option.Font = Enum.Font.Gotham
        option.BorderSizePixel = 0
        option.Parent = optionsFrame
        
        option.MouseEnter:Connect(function()
            TweenService:Create(option, TweenInfo.new(0.15), {
                BackgroundColor3 = self.Theme.Accent,
                TextColor3 = self.Theme.Text
            }):Play()
        end)
        
        option.MouseLeave:Connect(function()
            TweenService:Create(option, TweenInfo.new(0.15), {
                BackgroundColor3 = self.Theme.Secondary,
                TextColor3 = self.Theme.TextDim
            }):Play()
        end)
        
        option.MouseButton1Click:Connect(function()
            currentValue = text
            selected.Text = text
            isOpen = false
            TweenService:Create(optionsFrame, TweenInfo.new(0.2), {
                Size = UDim2.new(1, 0, 0, 0)
            }):Play()
            TweenService:Create(arrow, TweenInfo.new(0.2), {
                Rotation = 0
            }):Play()
            task.wait(0.2)
            optionsFrame.Visible = false
            
            if config.Callback then
                config.Callback(text)
            end
        end)
        
        return option
    end
    
    local function RefreshOptions()
        for _, child in pairs(optionsFrame:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end
        
        local opts = type(options) == "function" and options() or options
        for _, opt in pairs(opts) do
            CreateOption(opt)
        end
        
        optionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            if isOpen then
                TweenService:Create(optionsFrame, TweenInfo.new(0.2), {
                    Size = UDim2.new(1, 0, 0, math.min(optionsLayout.AbsoluteContentSize.Y, 150))
                }):Play()
            end
        end)
    end
    
    button.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        if isOpen then
            RefreshOptions()
            optionsFrame.Visible = true
            TweenService:Create(optionsFrame, TweenInfo.new(0.2), {
                Size = UDim2.new(1, 0, 0, math.min(optionsLayout.AbsoluteContentSize.Y, 150))
            }):Play()
            TweenService:Create(arrow, TweenInfo.new(0.2), {
                Rotation = 180
            }):Play()
        else
            TweenService:Create(optionsFrame, TweenInfo.new(0.2), {
                Size = UDim2.new(1, 0, 0, 0)
            }):Play()
            TweenService:Create(arrow, TweenInfo.new(0.2), {
                Rotation = 0
            }):Play()
            task.wait(0.2)
            optionsFrame.Visible = false
        end
    end)
    
    RefreshOptions()
    
    return element
end

function Library:CreateMultiDropdown(page, config)
    local element = Instance.new("Frame")
    element.Size = UDim2.new(1, -16, 0, self.Settings.ElementHeight)
    element.BackgroundColor3 = self.Theme.Tertiary
    element.BorderSizePixel = 0
    element.Parent = page.Frame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = element
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.4, -self.Settings.Padding, 1, 0)
    label.Position = UDim2.new(0, self.Settings.Padding, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = config.Text or "Multi-Select"
    label.TextColor3 = self.Theme.Text
    label.TextSize = self.Settings.TextSize
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.Parent = element
    
    local dropdown = Instance.new("Frame")
    dropdown.Size = UDim2.new(0.5, 0, 0, 28)
    dropdown.Position = UDim2.new(0.5, 0, 0.5, -14)
    dropdown.BackgroundColor3 = self.Theme.Background
    dropdown.BorderSizePixel = 0
    dropdown.Parent = element
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 6)
    dropdownCorner.Parent = dropdown
    
    local selected = Instance.new("TextLabel")
    selected.Size = UDim2.new(0.85, -8, 1, 0)
    selected.Position = UDim2.new(0, 8, 0, 0)
    selected.BackgroundTransparency = 1
    selected.Text = "0 Selected"
    selected.TextColor3 = self.Theme.TextDim
    selected.TextSize = self.Settings.TextSize - 1
    selected.TextXAlignment = Enum.TextXAlignment.Left
    selected.Font = Enum.Font.Gotham
    selected.Parent = dropdown
    
    local arrow = Instance.new("TextLabel")
    arrow.Size = UDim2.new(0, 20, 1, 0)
    arrow.Position = UDim2.new(1, -25, 0, 0)
    arrow.BackgroundTransparency = 1
    arrow.Text = "â–¼"
    arrow.TextColor3 = self.Theme.TextDim
    arrow.TextSize = 10
    arrow.Font = Enum.Font.Gotham
    arrow.Parent = dropdown
    
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 1, 0)
    button.BackgroundTransparency = 1
    button.Text = ""
    button.Parent = dropdown
    
    local optionsFrame = Instance.new("Frame")
    optionsFrame.Size = UDim2.new(1, 0, 0, 0)
    optionsFrame.Position = UDim2.new(0, 0, 1, 5)
    optionsFrame.BackgroundColor3 = self.Theme.Background
    optionsFrame.BorderSizePixel = 0
    optionsFrame.Visible = false
    optionsFrame.ClipsDescendants = true
    optionsFrame.Parent = dropdown
    optionsFrame.ZIndex = 10
    
    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = UDim.new(0, 6)
    optionsCorner.Parent = optionsFrame
    
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.Padding = UDim.new(0, 2)
    optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionsLayout.Parent = optionsFrame
    
    local isOpen = false
    local options = config.Options or {}
    local selectedOptions = {}
    
    local function UpdateLabel()
        local count = 0
        for _ in pairs(selectedOptions) do
            count = count + 1
        end
        selected.Text = count > 0 and (count .. " Selected") or "None"
    end
    
    local function CreateOption(text)
        local option = Instance.new("Frame")
        option.Size = UDim2.new(1, 0, 0, 26)
        option.BackgroundColor3 = self.Theme.Secondary
        option.BorderSizePixel = 0
        option.Parent = optionsFrame
        
        local checkbox = Instance.new("Frame")
        checkbox.Size = UDim2.new(0, 18, 0, 18)
        checkbox.Position = UDim2.new(0, 6, 0.5, -9)
        checkbox.BackgroundColor3 = self.Theme.Border
        checkbox.BorderSizePixel = 0
        checkbox.Parent = option
        
        local checkboxCorner = Instance.new("UICorner")
        checkboxCorner.CornerRadius = UDim.new(0, 4)
        checkboxCorner.Parent = checkbox
        
        local check = Instance.new("TextLabel")
        check.Size = UDim2.new(1, 0, 1, 0)
        check.BackgroundTransparency = 1
        check.Text = "âœ“"
        check.TextColor3 = self.Theme.Text
        check.TextSize = 14
        check.Font = Enum.Font.Gotham
        check.Visible = false
        check.Parent = checkbox
        
        local optionLabel = Instance.new("TextLabel")
        optionLabel.Size = UDim2.new(1, -35, 1, 0)
        optionLabel.Position = UDim2.new(0, 30, 0, 0)
        optionLabel.BackgroundTransparency = 1
        optionLabel.Text = text
        optionLabel.TextColor3 = self.Theme.TextDim
        optionLabel.TextSize = self.Settings.TextSize - 1
        optionLabel.TextXAlignment = Enum.TextXAlignment.Left
        optionLabel.Font = Enum.Font.Gotham
        optionLabel.Parent = option
        
        local optionButton = Instance.new("TextButton")
        optionButton.Size = UDim2.new(1, 0, 1, 0)
        optionButton.BackgroundTransparency = 1
        optionButton.Text = ""
        optionButton.Parent = option
        
        optionButton.MouseEnter:Connect(function()
            TweenService:Create(option, TweenInfo.new(0.15), {
                BackgroundColor3 = self.Theme.Tertiary
            }):Play()
        end)
        
        optionButton.MouseLeave:Connect(function()
            TweenService:Create(option, TweenInfo.new(0.15), {
                BackgroundColor3 = self.Theme.Secondary
            }):Play()
        end)
        
        optionButton.MouseButton1Click:Connect(function()
            if selectedOptions[text] then
                selectedOptions[text] = nil
                check.Visible = false
                TweenService:Create(checkbox, TweenInfo.new(0.15), {
                    BackgroundColor3 = self.Theme.Border
                }):Play()
            else
                selectedOptions[text] = true
                check.Visible = true
                TweenService:Create(checkbox, TweenInfo.new(0.15), {
                    BackgroundColor3 = self.Theme.Accent
                }):Play()
            end
            
            UpdateLabel()
            
            if config.Callback then
                local selected = {}
                for opt in pairs(selectedOptions) do
                    table.insert(selected, opt)
                end
                config.Callback(selected)
            end
        end)
        
        return option
    end
    
    local function RefreshOptions()
        for _, child in pairs(optionsFrame:GetChildren()) do
            if child:IsA("Frame") and child ~= optionsLayout then
                child:Destroy()
            end
        end
        
        local opts = type(options) == "function" and options() or options
        for _, opt in pairs(opts) do
            CreateOption(opt)
        end
        
        optionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            if isOpen then
                TweenService:Create(optionsFrame, TweenInfo.new(0.2), {
                    Size = UDim2.new(1, 0, 0, math.min(optionsLayout.AbsoluteContentSize.Y, 150))
                }):Play()
            end
        end)
    end
    
    button.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        if isOpen then
            RefreshOptions()
            optionsFrame.Visible = true
            TweenService:Create(optionsFrame, TweenInfo.new(0.2), {
                Size = UDim2.new(1, 0, 0, math.min(optionsLayout.AbsoluteContentSize.Y, 150))
            }):Play()
            TweenService:Create(arrow, TweenInfo.new(0.2), {
                Rotation = 180
            }):Play()
        else
            TweenService:Create(optionsFrame, TweenInfo.new(0.2), {
                Size = UDim2.new(1, 0, 0, 0)
            }):Play()
            TweenService:Create(arrow, TweenInfo.new(0.2), {
                Rotation = 0
            }):Play()
            task.wait(0.2)
            optionsFrame.Visible = false
        end
    end)
    
    RefreshOptions()
    UpdateLabel()
    
    return element
end

function Library:Notify(config)
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(0, 300, 0, 80)
    notification.Position = UDim2.new(1, 320, 1, -100 - (#self.Notifications * 90))
    notification.BackgroundColor3 = self.Theme.Secondary
    notification.BorderSizePixel = 0
    notification.Parent = self.ScreenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = notification
    
    local accent = Instance.new("Frame")
    accent.Size = UDim2.new(0, 4, 1, 0)
    accent.BackgroundColor3 = config.Type == "success" and self.Theme.Success or 
                               config.Type == "error" and self.Theme.Error or 
                               config.Type == "warning" and self.Theme.Warning or 
                               self.Theme.Accent
    accent.BorderSizePixel = 0
    accent.Parent = notification
    
    local accentCorner = Instance.new("UICorner")
    accentCorner.CornerRadius = UDim.new(0, 10)
    accentCorner.Parent = accent
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -20, 0, 25)
    title.Position = UDim2.new(0, 15, 0, 10)
    title.BackgroundTransparency = 1
    title.Text = config.Title or "Notification"
    title.TextColor3 = self.Theme.Text
    title.TextSize = self.Settings.TextSize + 1
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Font = Enum.Font.GothamBold
    title.Parent = notification
    
    local message = Instance.new("TextLabel")
    message.Size = UDim2.new(1, -20, 0, 30)
    message.Position = UDim2.new(0, 15, 0, 35)
    message.BackgroundTransparency = 1
    message.Text = config.Text or ""
    message.TextColor3 = self.Theme.TextDim
    message.TextSize = self.Settings.TextSize - 1
    message.TextXAlignment = Enum.TextXAlignment.Left
    message.TextYAlignment = Enum.TextYAlignment.Top
    message.TextWrapped = true
    message.Font = Enum.Font.Gotham
    message.Parent = notification
    
    table.insert(self.Notifications, notification)
    
    if #self.Notifications > self.Settings.NotificationMax then
        local old = table.remove(self.Notifications, 1)
        TweenService:Create(old, TweenInfo.new(0.3), {
            Position = UDim2.new(1, 320, old.Position.Y.Scale, old.Position.Y.Offset)
        }):Play()
        task.wait(0.3)
        old:Destroy()
    end
    
    TweenService:Create(notification, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {
        Position = UDim2.new(1, -320, 1, -100 - ((#self.Notifications - 1) * 90))
    }):Play()
    
    for i, notif in pairs(self.Notifications) do
        if notif ~= notification then
            TweenService:Create(notif, TweenInfo.new(0.3), {
                Position = UDim2.new(1, -320, 1, -100 - ((i - 1) * 90))
            }):Play()
        end
    end
    
    task.wait(config.Duration or self.Settings.NotificationDuration)
    
    for i, notif in pairs(self.Notifications) do
        if notif == notification then
            table.remove(self.Notifications, i)
            break
        end
    end
    
    TweenService:Create(notification, TweenInfo.new(0.3), {
        Position = UDim2.new(1, 320, notification.Position.Y.Scale, notification.Position.Y.Offset)
    }):Play()
    
    for i, notif in pairs(self.Notifications) do
        TweenService:Create(notif, TweenInfo.new(0.3), {
            Position = UDim2.new(1, -320, 1, -100 - ((i - 1) * 90))
        }):Play()
    end
    
    task.wait(0.3)
    notification:Destroy()
end

function Library:SetTheme(themeName)
    if Themes[themeName] then
        self.Theme = Themes[themeName]
        self.Settings.Theme = themeName
        self:ApplyTheme()
    end
end

function Library:ApplyTheme()
    TweenService:Create(self.MainFrame, TweenInfo.new(0.3), {
        BackgroundColor3 = self.Theme.Background
    }):Play()
    
    TweenService:Create(self.Header, TweenInfo.new(0.3), {
        BackgroundColor3 = self.Theme.Secondary
    }):Play()
    
    TweenService:Create(self.ContentContainer, TweenInfo.new(0.3), {
        BackgroundColor3 = self.Theme.Secondary
    }):Play()
    
    for _, element in pairs(self.MainFrame:GetDescendants()) do
        if element:IsA("TextLabel") or element:IsA("TextButton") then
            if element.TextColor3 == self.Theme.Text or element.TextColor3 == self.Theme.TextDim then
                TweenService:Create(element, TweenInfo.new(0.3), {
                    TextColor3 = element.TextColor3 == self.Theme.Text and self.Theme.Text or self.Theme.TextDim
                }):Play()
            end
        end
    end
end

function Library:SaveConfiguration()
    local config = {
        Settings = self.Settings,
        Elements = {}
    }
    SaveConfig(config)
end

function Library:LoadConfiguration()
    local config = LoadConfig()
    if config.Settings then
        for k, v in pairs(config.Settings) do
            self.Settings[k] = v
        end
        self:SetTheme(self.Settings.Theme)
    end
end

function Library:Destroy()
    for _, connection in pairs(self.Connections) do
        connection:Disconnect()
    end
    self.ScreenGui:Destroy()
end

return Library
