--[[
    Radion Interface Suite - Enhanced Edition
    Professional & Minimalistic UI Library
    
    Features:
    - Clean, modern design with smooth animations
    - Function-based configuration system
    - Highly customizable components with extensive API
    - Simplified usage with powerful customization
    - Professional color schemes and themes
    - Organized component creation functions
    - Enhanced accessibility and user experience
]]

local RadionLibrary = {}
RadionLibrary.Flags = {}
RadionLibrary.Components = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

-- Animation Constants
local ANIMATION_SETTINGS = {
    Default = 0.25,
    Fast = 0.15,
    Slow = 0.4,
    Hover = 0.12,
    Bounce = 0.35
}

local EASING_STYLES = {
    Smooth = Enum.EasingStyle.Quart,
    Bounce = Enum.EasingStyle.Back,
    Elastic = Enum.EasingStyle.Elastic,
    Linear = Enum.EasingStyle.Linear
}

-- Enhanced Professional Theme System
RadionLibrary.Themes = {
    Professional = {
        Primary = Color3.fromRGB(12, 12, 16),
        Secondary = Color3.fromRGB(18, 18, 22),
        Tertiary = Color3.fromRGB(24, 24, 28),
        Accent = Color3.fromRGB(88, 166, 255),
        AccentHover = Color3.fromRGB(108, 186, 255),
        Text = Color3.fromRGB(250, 250, 252),
        TextSecondary = Color3.fromRGB(180, 180, 190),
        TextMuted = Color3.fromRGB(120, 120, 135),
        Border = Color3.fromRGB(40, 40, 48),
        BorderLight = Color3.fromRGB(55, 55, 65),
        Hover = Color3.fromRGB(28, 28, 34),
        Active = Color3.fromRGB(35, 35, 42),
        Success = Color3.fromRGB(16, 185, 129),
        Warning = Color3.fromRGB(245, 158, 11),
        Error = Color3.fromRGB(239, 68, 68),
        Info = Color3.fromRGB(59, 130, 246)
    },
    
    Minimal = {
        Primary = Color3.fromRGB(255, 255, 255),
        Secondary = Color3.fromRGB(250, 250, 252),
        Tertiary = Color3.fromRGB(245, 245, 248),
        Accent = Color3.fromRGB(59, 130, 246),
        AccentHover = Color3.fromRGB(79, 150, 266),
        Text = Color3.fromRGB(15, 15, 18),
        TextSecondary = Color3.fromRGB(75, 85, 99),
        TextMuted = Color3.fromRGB(156, 163, 175),
        Border = Color3.fromRGB(229, 231, 235),
        BorderLight = Color3.fromRGB(209, 213, 219),
        Hover = Color3.fromRGB(243, 244, 246),
        Active = Color3.fromRGB(237, 238, 242),
        Success = Color3.fromRGB(16, 185, 129),
        Warning = Color3.fromRGB(245, 158, 11),
        Error = Color3.fromRGB(239, 68, 68),
        Info = Color3.fromRGB(59, 130, 246)
    },
    
    Ocean = {
        Primary = Color3.fromRGB(8, 17, 28),
        Secondary = Color3.fromRGB(14, 25, 38),
        Tertiary = Color3.fromRGB(20, 33, 48),
        Accent = Color3.fromRGB(6, 182, 212),
        AccentHover = Color3.fromRGB(26, 202, 232),
        Text = Color3.fromRGB(248, 250, 252),
        TextSecondary = Color3.fromRGB(148, 163, 184),
        TextMuted = Color3.fromRGB(100, 116, 139),
        Border = Color3.fromRGB(30, 41, 59),
        BorderLight = Color3.fromRGB(45, 56, 74),
        Hover = Color3.fromRGB(24, 35, 51),
        Active = Color3.fromRGB(32, 43, 59),
        Success = Color3.fromRGB(6, 182, 212),
        Warning = Color3.fromRGB(245, 158, 11),
        Error = Color3.fromRGB(239, 68, 68),
        Info = Color3.fromRGB(14, 165, 233)
    },
    
    Purple = {
        Primary = Color3.fromRGB(16, 10, 23),
        Secondary = Color3.fromRGB(22, 16, 31),
        Tertiary = Color3.fromRGB(28, 22, 39),
        Accent = Color3.fromRGB(147, 51, 234),
        AccentHover = Color3.fromRGB(167, 71, 254),
        Text = Color3.fromRGB(250, 248, 252),
        TextSecondary = Color3.fromRGB(196, 181, 220),
        TextMuted = Color3.fromRGB(139, 124, 168),
        Border = Color3.fromRGB(45, 39, 56),
        BorderLight = Color3.fromRGB(60, 54, 71),
        Hover = Color3.fromRGB(32, 26, 43),
        Active = Color3.fromRGB(40, 34, 51),
        Success = Color3.fromRGB(34, 197, 94),
        Warning = Color3.fromRGB(245, 158, 11),
        Error = Color3.fromRGB(239, 68, 68),
        Info = Color3.fromRGB(147, 51, 234)
    }
}

-- Current theme reference
local currentTheme = RadionLibrary.Themes.Professional

-- Enhanced Utility Functions
local Utils = {}

function Utils.Animate(object, properties, settings)
    settings = settings or {}
    local duration = settings.Duration or ANIMATION_SETTINGS.Default
    local style = settings.Style or EASING_STYLES.Smooth
    local direction = settings.Direction or Enum.EasingDirection.Out
    
    local tween = TweenService:Create(
        object, 
        TweenInfo.new(duration, style, direction), 
        properties
    )
    
    tween:Play()
    
    if settings.Callback then
        tween.Completed:Connect(settings.Callback)
    end
    
    return tween
end

function Utils.CreateCorner(radius, parent)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    if parent then corner.Parent = parent end
    return corner
end

function Utils.CreateStroke(config, parent)
    config = config or {}
    local stroke = Instance.new("UIStroke")
    stroke.Color = config.Color or currentTheme.Border
    stroke.Thickness = config.Thickness or 1
    stroke.Transparency = config.Transparency or 0
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    if parent then stroke.Parent = parent end
    return stroke
end

function Utils.CreatePadding(padding, parent)
    local pad = Instance.new("UIPadding")
    if typeof(padding) == "table" then
        pad.PaddingTop = UDim.new(0, padding.Top or padding.All or 12)
        pad.PaddingBottom = UDim.new(0, padding.Bottom or padding.All or 12)
        pad.PaddingLeft = UDim.new(0, padding.Left or padding.All or 12)
        pad.PaddingRight = UDim.new(0, padding.Right or padding.All or 12)
    else
        local p = padding or 12
        pad.PaddingTop = UDim.new(0, p)
        pad.PaddingBottom = UDim.new(0, p)
        pad.PaddingLeft = UDim.new(0, p)
        pad.PaddingRight = UDim.new(0, p)
    end
    if parent then pad.Parent = parent end
    return pad
end

function Utils.CreateGradient(config, parent)
    config = config or {}
    local gradient = Instance.new("UIGradient")
    gradient.Color = config.ColorSequence or ColorSequence.new{
        ColorSequenceKeypoint.new(0, currentTheme.Primary),
        ColorSequenceKeypoint.new(1, currentTheme.Secondary)
    }
    gradient.Rotation = config.Rotation or 0
    gradient.Transparency = config.Transparency or NumberSequence.new(0)
    if parent then gradient.Parent = parent end
    return gradient
end

-- Enhanced Animation System
local AnimationSystem = {}

function AnimationSystem.FadeIn(object, settings)
    settings = settings or {}
    object.Visible = true
    
    -- Store original transparencies
    local originalTransparencies = {}
    
    if object.BackgroundTransparency then
        originalTransparencies.Background = object.BackgroundTransparency
        object.BackgroundTransparency = 1
    end
    
    -- Fade in background
    if object.BackgroundTransparency then
        Utils.Animate(object, {BackgroundTransparency = originalTransparencies.Background}, {
            Duration = settings.Duration or ANIMATION_SETTINGS.Default,
            Style = settings.Style or EASING_STYLES.Smooth
        })
    end
    
    -- Fade in all text and image elements
    for _, child in pairs(object:GetDescendants()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") then
            local originalTextTransparency = child.TextTransparency
            child.TextTransparency = 1
            Utils.Animate(child, {TextTransparency = originalTextTransparency}, {
                Duration = settings.Duration or ANIMATION_SETTINGS.Default,
                Style = settings.Style or EASING_STYLES.Smooth
            })
        elseif child:IsA("ImageLabel") or child:IsA("ImageButton") then
            local originalImageTransparency = child.ImageTransparency
            child.ImageTransparency = 1
            Utils.Animate(child, {ImageTransparency = originalImageTransparency}, {
                Duration = settings.Duration or ANIMATION_SETTINGS.Default,
                Style = settings.Style or EASING_STYLES.Smooth
            })
        end
    end
end

function AnimationSystem.FadeOut(object, settings)
    settings = settings or {}
    
    Utils.Animate(object, {BackgroundTransparency = 1}, {
        Duration = settings.Duration or ANIMATION_SETTINGS.Default,
        Style = settings.Style or EASING_STYLES.Smooth
    })
    
    for _, child in pairs(object:GetDescendants()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") then
            Utils.Animate(child, {TextTransparency = 1}, {
                Duration = settings.Duration or ANIMATION_SETTINGS.Default,
                Style = settings.Style or EASING_STYLES.Smooth
            })
        elseif child:IsA("ImageLabel") or child:IsA("ImageButton") then
            Utils.Animate(child, {ImageTransparency = 1}, {
                Duration = settings.Duration or ANIMATION_SETTINGS.Default,
                Style = settings.Style or EASING_STYLES.Smooth
            })
        end
    end
    
    if settings.Callback then
        task.wait(settings.Duration or ANIMATION_SETTINGS.Default)
        settings.Callback()
    end
end

function AnimationSystem.SetupHover(object, config)
    config = config or {}
    local hoverColor = config.HoverColor or currentTheme.Hover
    local normalColor = config.NormalColor or object.BackgroundColor3
    local duration = config.Duration or ANIMATION_SETTINGS.Hover
    
    object.MouseEnter:Connect(function()
        Utils.Animate(object, {BackgroundColor3 = hoverColor}, {Duration = duration})
        if config.OnHover then config.OnHover() end
    end)
    
    object.MouseLeave:Connect(function()
        Utils.Animate(object, {BackgroundColor3 = normalColor}, {Duration = duration})
        if config.OnLeave then config.OnLeave() end
    end)
end

function AnimationSystem.CreateRipple(object, config)
    config = config or {}
    
    object.MouseButton1Click:Connect(function()
        local ripple = Instance.new("Frame")
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.BackgroundColor3 = config.Color or currentTheme.Accent
        ripple.BackgroundTransparency = config.InitialTransparency or 0.7
        ripple.BorderSizePixel = 0
        ripple.ZIndex = object.ZIndex + 1
        ripple.Parent = object
        
        Utils.CreateCorner(999, ripple)
        
        Utils.Animate(ripple, {
            Size = UDim2.new(1, 50, 1, 50),
            BackgroundTransparency = 1
        }, {
            Duration = config.Duration or 0.5,
            Style = Enum.EasingStyle.Circular
        })
        
        task.spawn(function()
            task.wait(config.Duration or 0.5)
            if ripple and ripple.Parent then
                ripple:Destroy()
            end
        end)
        
        if config.Callback then 
            config.Callback() 
        end
    end)
end

-- Enhanced Component Creation Functions
local ComponentCreator = {}

function ComponentCreator.CreateBaseContainer(config)
    config = config or {}
    
    local container = Instance.new("Frame")
    container.Name = config.Name or "Container"
    container.Size = config.Size or UDim2.new(1, 0, 0, 50)
    container.Position = config.Position or UDim2.new(0, 0, 0, 0)
    container.BackgroundColor3 = config.BackgroundColor or currentTheme.Secondary
    container.BackgroundTransparency = config.BackgroundTransparency or 0
    container.BorderSizePixel = 0
    
    if config.CornerRadius then
        Utils.CreateCorner(config.CornerRadius, container)
    end
    
    if config.Stroke then
        Utils.CreateStroke(config.Stroke, container)
    end
    
    if config.Padding then
        Utils.CreatePadding(config.Padding, container)
    end
    
    if config.Gradient then
        Utils.CreateGradient(config.Gradient, container)
    end
    
    return container
end

function ComponentCreator.CreateLabel(config)
    config = config or {}
    
    local label = Instance.new("TextLabel")
    label.Name = config.Name or "Label"
    label.Size = config.Size or UDim2.new(1, 0, 0, 30)
    label.Position = config.Position or UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = config.BackgroundTransparency or 1
    label.BackgroundColor3 = config.BackgroundColor or currentTheme.Secondary
    label.Text = config.Text or "Label"
    label.TextColor3 = config.TextColor or currentTheme.Text
    label.TextSize = config.TextSize or 14
    label.Font = config.Font or Enum.Font.Gotham
    label.TextXAlignment = config.TextXAlignment or Enum.TextXAlignment.Left
    label.TextYAlignment = config.TextYAlignment or Enum.TextYAlignment.Center
    label.TextWrapped = config.TextWrapped or false
    label.TextScaled = config.TextScaled or false
    
    if config.CornerRadius then
        Utils.CreateCorner(config.CornerRadius, label)
    end
    
    return label
end

function ComponentCreator.CreateButton(config)
    config = config or {}
    
    local button = Instance.new("TextButton")
    button.Name = config.Name or "Button"
    button.Size = config.Size or UDim2.new(1, 0, 0, 40)
    button.Position = config.Position or UDim2.new(0, 0, 0, 0)
    button.BackgroundColor3 = config.BackgroundColor or currentTheme.Accent
    button.BorderSizePixel = 0
    button.Text = config.Text or "Button"
    button.TextColor3 = config.TextColor or Color3.fromRGB(255, 255, 255)
    button.TextSize = config.TextSize or 14
    button.Font = config.Font or Enum.Font.GothamMedium
    button.AutoButtonColor = false
    button.ClipsDescendants = true
    
    Utils.CreateCorner(config.CornerRadius or 8, button)
    
    if config.Stroke then
        Utils.CreateStroke(config.Stroke, button)
    end
    
    -- Enhanced hover effect
    AnimationSystem.SetupHover(button, {
        HoverColor = config.HoverColor or currentTheme.AccentHover,
        NormalColor = config.BackgroundColor or currentTheme.Accent,
        Duration = config.HoverDuration or ANIMATION_SETTINGS.Hover,
        OnHover = config.OnHover,
        OnLeave = config.OnLeave
    })
    
    -- Ripple effect
    if config.Ripple ~= false then
        AnimationSystem.CreateRipple(button, {
            Color = config.RippleColor,
            Duration = config.RippleDuration,
            Callback = config.Callback
        })
    else
        button.MouseButton1Click:Connect(config.Callback or function() end)
    end
    
    return button
end

-- Enhanced Component Classes
local Button = {}
Button.__index = Button

function Button.new(config)
    local self = setmetatable({}, Button)
    
    self.Config = config or {}
    self.Element = ComponentCreator.CreateButton(self.Config)
    self.Enabled = true
    self.Visible = true
    
    return self
end

function Button:SetText(text)
    self.Element.Text = text
    return self
end

function Button:SetTextColor(color)
    self.Element.TextColor3 = color
    return self
end

function Button:SetBackgroundColor(color)
    self.Element.BackgroundColor3 = color
    return self
end

function Button:SetSize(size)
    Utils.Animate(self.Element, {Size = size}, {
        Duration = ANIMATION_SETTINGS.Default
    })
    return self
end

function Button:SetPosition(position)
    Utils.Animate(self.Element, {Position = position}, {
        Duration = ANIMATION_SETTINGS.Default
    })
    return self
end

function Button:SetEnabled(enabled)
    self.Enabled = enabled
    self.Element.Interactable = enabled
    
    Utils.Animate(self.Element, {
        BackgroundTransparency = enabled and 0 or 0.5,
        TextTransparency = enabled and 0 or 0.5
    }, {Duration = ANIMATION_SETTINGS.Hover})
    
    return self
end

function Button:SetVisible(visible)
    self.Visible = visible
    
    if visible then
        AnimationSystem.FadeIn(self.Element, {Duration = ANIMATION_SETTINGS.Fast})
    else
        AnimationSystem.FadeOut(self.Element, {Duration = ANIMATION_SETTINGS.Fast})
    end
    
    return self
end

function Button:SetCallback(callback)
    self.Config.Callback = callback
    return self
end

function Button:Click()
    if self.Enabled and self.Config.Callback then
        self.Config.Callback()
    end
    return self
end

function Button:Destroy()
    if self.Element then
        self.Element:Destroy()
    end
end

-- Enhanced Toggle Class
local Toggle = {}
Toggle.__index = Toggle

function Toggle.new(config)
    local self = setmetatable({}, Toggle)
    
    self.Config = config or {}
    self.Value = self.Config.Default or false
    
    -- Create main container
    self.Container = ComponentCreator.CreateBaseContainer({
        Name = self.Config.Name or "Toggle",
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundTransparency = 1,
        Padding = {All = 16}
    })
    
    -- Create label
    self.Label = ComponentCreator.CreateLabel({
        Name = "Label",
        Size = UDim2.new(1, -60, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        Text = self.Config.Text or "Toggle",
        TextColor = currentTheme.Text,
        TextSize = 14,
        Parent = self.Container
    })
    self.Label.Parent = self.Container
    
    -- Create toggle switch
    self.Switch = ComponentCreator.CreateBaseContainer({
        Name = "Switch",
        Size = UDim2.new(0, 50, 0, 26),
        Position = UDim2.new(1, -50, 0.5, -13),
        BackgroundColor = self.Value and currentTheme.Accent or currentTheme.Border,
        CornerRadius = 13
    })
    self.Switch.Parent = self.Container
    
    -- Create knob
    self.Knob = ComponentCreator.CreateBaseContainer({
        Name = "Knob",
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(0, self.Value and 27 or 3, 0.5, -10),
        BackgroundColor = Color3.fromRGB(255, 255, 255),
        CornerRadius = 10
    })
    self.Knob.Parent = self.Switch
    
    -- Create button for interaction
    self.Button = Instance.new("TextButton")
    self.Button.Size = UDim2.new(1, 0, 1, 0)
    self.Button.BackgroundTransparency = 1
    self.Button.Text = ""
    self.Button.Parent = self.Container
    
    -- Setup click functionality
    self.Button.MouseButton1Click:Connect(function()
        self:SetValue(not self.Value, true)
    end)
    
    self.Element = self.Container
    return self
end

function Toggle:SetValue(value, animate)
    self.Value = value
    
    local switchColor = self.Value and currentTheme.Accent or currentTheme.Border
    local knobPosition = UDim2.new(0, self.Value and 27 or 3, 0.5, -10)
    
    if animate then
        Utils.Animate(self.Switch, {BackgroundColor3 = switchColor}, {
            Duration = ANIMATION_SETTINGS.Default
        })
        Utils.Animate(self.Knob, {Position = knobPosition}, {
            Duration = ANIMATION_SETTINGS.Default,
            Style = EASING_STYLES.Bounce
        })
    else
        self.Switch.BackgroundColor3 = switchColor
        self.Knob.Position = knobPosition
    end
    
    if self.Config.Callback then
        self.Config.Callback(self.Value)
    end
    
    return self
end

function Toggle:GetValue()
    return self.Value
end

function Toggle:SetText(text)
    self.Label.Text = text
    return self
end

function Toggle:SetEnabled(enabled)
    self.Button.Interactable = enabled
    Utils.Animate(self.Container, {BackgroundTransparency = enabled and 1 or 0.5}, {
        Duration = ANIMATION_SETTINGS.Hover
    })
    return self
end

function Toggle:Destroy()
    if self.Element then
        self.Element:Destroy()
    end
end

-- Enhanced Slider Class
local Slider = {}
Slider.__index = Slider

function Slider.new(config)
    local self = setmetatable({}, Slider)
    
    self.Config = config or {}
    self.Min = self.Config.Min or 0
    self.Max = self.Config.Max or 100
    self.Step = self.Config.Step or 1
    self.Value = self.Config.Default or self.Min
    self.Dragging = false
    
    -- Create main container
    self.Container = ComponentCreator.CreateBaseContainer({
        Name = self.Config.Name or "Slider",
        Size = UDim2.new(1, 0, 0, 70),
        BackgroundTransparency = 1,
        Padding = {All = 16}
    })
    
    -- Create label
    self.Label = ComponentCreator.CreateLabel({
        Name = "Label",
        Size = UDim2.new(1, -60, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        Text = self.Config.Text or "Slider",
        TextColor = currentTheme.Text,
        TextSize = 14
    })
    self.Label.Parent = self.Container
    
    -- Create value display
    self.ValueLabel = ComponentCreator.CreateLabel({
        Name = "ValueLabel",
        Size = UDim2.new(0, 60, 0, 20),
        Position = UDim2.new(1, -60, 0, 0),
        Text = self:FormatValue(self.Value),
        TextColor = currentTheme.Accent,
        TextSize = 14,
        Font = Enum.Font.GothamMedium,
        TextXAlignment = Enum.TextXAlignment.Right
    })
    self.ValueLabel.Parent = self.Container
    
    -- Create track
    self.Track = ComponentCreator.CreateBaseContainer({
        Name = "Track",
        Size = UDim2.new(1, 0, 0, 6),
        Position = UDim2.new(0, 0, 1, -20),
        BackgroundColor = currentTheme.Border,
        CornerRadius = 3
    })
    self.Track.Parent = self.Container
    
    -- Create fill
    self.Fill = ComponentCreator.CreateBaseContainer({
        Name = "Fill",
        Size = UDim2.new(0, 0, 1, 0),
        BackgroundColor = currentTheme.Accent,
        CornerRadius = 3
    })
    self.Fill.Parent = self.Track
    
    -- Create thumb
    self.Thumb = ComponentCreator.CreateBaseContainer({
        Name = "Thumb",
        Size = UDim2.new(0, 18, 0, 18),
        Position = UDim2.new(0, -9, 0.5, -9),
        BackgroundColor = Color3.fromRGB(255, 255, 255),
        CornerRadius = 9,
        Stroke = {Color = currentTheme.Accent, Thickness = 2}
    })
    self.Thumb.Parent = self.Track
    
    -- Create interaction button
    self.Button = Instance.new("TextButton")
    self.Button.Size = UDim2.new(1, 0, 1, 0)
    self.Button.BackgroundTransparency = 1
    self.Button.Text = ""
    self.Button.Parent = self.Track
    
    -- Setup interaction
    self:SetupInteraction()
    self:UpdateSlider(false)
    
    self.Element = self.Container
    return self
end

function Slider:FormatValue(value)
    local formatted = tostring(value)
    if self.Config.Suffix then
        formatted = formatted .. " " .. self.Config.Suffix
    end
    if self.Config.Prefix then
        formatted = self.Config.Prefix .. " " .. formatted
    end
    return formatted
end

function Slider:SetupInteraction()
    self.Button.MouseButton1Down:Connect(function()
        self.Dragging = true
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            self.Dragging = false
        end
    end)
    
    self.Button.MouseMoved:Connect(function()
        if self.Dragging then
            local mouseX = UserInputService:GetMouseLocation().X
            local trackX = self.Track.AbsolutePosition.X
            local trackWidth = self.Track.AbsoluteSize.X
            
            local percentage = math.clamp((mouseX - trackX) / trackWidth, 0, 1)
            local newValue = self.Min + percentage * (self.Max - self.Min)
            
            self:SetValue(newValue, false)
        end
    end)
end

function Slider:UpdateSlider(animate)
    local percentage = (self.Value - self.Min) / (self.Max - self.Min)
    
    local fillSize = UDim2.new(percentage, 0, 1, 0)
    local thumbPosition = UDim2.new(percentage, -9, 0.5, -9)
    
    if animate then
        Utils.Animate(self.Fill, {Size = fillSize}, {Duration = ANIMATION_SETTINGS.Hover})
        Utils.Animate(self.Thumb, {Position = thumbPosition}, {Duration = ANIMATION_SETTINGS.Hover})
    else
        self.Fill.Size = fillSize
        self.Thumb.Position = thumbPosition
    end
    
    self.ValueLabel.Text = self:FormatValue(self.Value)
end

function Slider:SetValue(value, animate)
    self.Value = math.clamp(value, self.Min, self.Max)
    self.Value = math.floor((self.Value - self.Min) / self.Step + 0.5) * self.Step + self.Min
    
    self:UpdateSlider(animate)
    
    if self.Config.Callback then
        self.Config.Callback(self.Value)
    end
    
    return self
end

function Slider:GetValue()
    return self.Value
end

function Slider:SetText(text)
    self.Label.Text = text
    return self
end

function Slider:SetRange(min, max)
    self.Min = min
    self.Max = max
    self.Value = math.clamp(self.Value, min, max)
    self:UpdateSlider(true)
    return self
end

function Slider:SetStep(step)
    self.Step = step
    return self
end

function Slider:Destroy()
    if self.Element then
        self.Element:Destroy()
    end
end

-- Enhanced Dropdown Class
local Dropdown = {}
Dropdown.__index = Dropdown

function Dropdown.new(config)
    local self = setmetatable({}, Dropdown)
    
    self.Config = config or {}
    self.Options = self.Config.Options or {}
    self.Value = self.Config.Default or (self.Options[1] or "Select...")
    self.IsOpen = false
    
    -- Create main container
    self.Container = ComponentCreator.CreateBaseContainer({
        Name = self.Config.Name or "Dropdown",
        Size = UDim2.new(1, 0, 0, 70),
        BackgroundTransparency = 1,
        Padding = {All = 16}
    })
    
    -- Create label
    self.Label = ComponentCreator.CreateLabel({
        Name = "Label",
        Size = UDim2.new(1, -20, 0, 20),
        Text = self.Config.Text or "Dropdown",
        TextColor = currentTheme.Text,
        TextSize = 14
    })
    self.Label.Parent = self.Container
    
    -- Create dropdown frame
    self.DropdownFrame = ComponentCreator.CreateBaseContainer({
        Name = "DropdownFrame",
        Size = UDim2.new(1, 0, 0, 35),
        Position = UDim2.new(0, 0, 1, -35),
        BackgroundColor = currentTheme.Secondary,
        CornerRadius = 8,
        Stroke = {Color = currentTheme.Border}
    })
    self.DropdownFrame.Parent = self.Container
    
    -- Create selected text
    self.SelectedLabel = ComponentCreator.CreateLabel({
        Name = "SelectedLabel",
        Size = UDim2.new(1, -35, 1, 0),
        Position = UDim2.new(0, 12, 0, 0),
        Text = self.Value,
        TextColor = currentTheme.Text,
        TextSize = 13,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    self.SelectedLabel.Parent = self.DropdownFrame
    
    -- Create arrow
    self.Arrow = ComponentCreator.CreateLabel({
        Name = "Arrow",
        Size = UDim2.new(0, 20, 1, 0),
        Position = UDim2.new(1, -25, 0, 0),
        Text = "▼",
        TextColor = currentTheme.TextSecondary,
        TextSize = 10,
        TextXAlignment = Enum.TextXAlignment.Center
    })
    self.Arrow.Parent = self.DropdownFrame
    
    -- Create options container
    self.OptionsContainer = ComponentCreator.CreateBaseContainer({
        Name = "OptionsContainer",
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 1, 2),
        BackgroundColor = currentTheme.Secondary,
        CornerRadius = 8,
        Stroke = {Color = currentTheme.Border}
    })
    self.OptionsContainer.Visible = false
    self.OptionsContainer.ZIndex = 10
    self.OptionsContainer.Parent = self.DropdownFrame
    
    -- Create layout for options
    self.OptionsLayout = Instance.new("UIListLayout")
    self.OptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    self.OptionsLayout.Parent = self.OptionsContainer
    
    -- Create interaction button
    self.Button = Instance.new("TextButton")
    self.Button.Size = UDim2.new(1, 0, 1, 0)
    self.Button.BackgroundTransparency = 1
    self.Button.Text = ""
    self.Button.Parent = self.DropdownFrame
    
    -- Setup hover
    AnimationSystem.SetupHover(self.DropdownFrame, {
        HoverColor = currentTheme.Hover,
        NormalColor = currentTheme.Secondary
    })
    
    -- Setup click
    self.Button.MouseButton1Click:Connect(function()
        self:Toggle()
    end)
    
    -- Create options
    self:CreateOptions()
    
    self.Element = self.Container
    return self
end

function Dropdown:CreateOptions()
    -- Clear existing options
    for _, child in pairs(self.OptionsContainer:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    -- Create new options
    for i, option in ipairs(self.Options) do
        local optionButton = ComponentCreator.CreateButton({
            Name = "Option_" .. i,
            Size = UDim2.new(1, 0, 0, 35),
            BackgroundColor = currentTheme.Secondary,
            Text = option,
            TextColor = currentTheme.Text,
            TextSize = 13,
            CornerRadius = 0,
            Ripple = false,
            Callback = function()
                self:SetValue(option)
                self:Close()
            end
        })
        
        -- Setup hover for option
        AnimationSystem.SetupHover(optionButton, {
            HoverColor = currentTheme.Hover,
            NormalColor = currentTheme.Secondary
        })
        
        optionButton.Parent = self.OptionsContainer
    end
end

function Dropdown:SetValue(value)
    if table.find(self.Options, value) then
        self.Value = value
        self.SelectedLabel.Text = value
        
        if self.Config.Callback then
            local index = table.find(self.Options, value)
            self.Config.Callback(value, index)
        end
    end
    return self
end

function Dropdown:GetValue()
    return self.Value
end

function Dropdown:SetOptions(options)
    self.Options = options or {}
    self:CreateOptions()
    
    -- Update selected value if it's not in new options
    if not table.find(self.Options, self.Value) then
        self.Value = self.Options[1] or "Select..."
        self.SelectedLabel.Text = self.Value
    end
    
    return self
end

function Dropdown:AddOption(option)
    if not table.find(self.Options, option) then
        table.insert(self.Options, option)
        self:CreateOptions()
    end
    return self
end

function Dropdown:RemoveOption(option)
    local index = table.find(self.Options, option)
    if index then
        table.remove(self.Options, index)
        self:CreateOptions()
        
        -- Update selected value if removed option was selected
        if self.Value == option then
            self.Value = self.Options[1] or "Select..."
            self.SelectedLabel.Text = self.Value
        end
    end
    return self
end

function Dropdown:Toggle()
    self.IsOpen = not self.IsOpen
    
    if self.IsOpen then
        self:Open()
    else
        self:Close()
    end
    
    return self
end

function Dropdown:Open()
    self.IsOpen = true
    self.OptionsContainer.Visible = true
    
    local optionCount = #self.Options
    local maxHeight = 150
    local calculatedHeight = math.min(optionCount * 35, maxHeight)
    
    Utils.Animate(self.Arrow, {Rotation = 180}, {Duration = ANIMATION_SETTINGS.Default})
    Utils.Animate(self.OptionsContainer, {Size = UDim2.new(1, 0, 0, calculatedHeight)}, {
        Duration = ANIMATION_SETTINGS.Default,
        Style = EASING_STYLES.Bounce
    })
    
    return self
end

function Dropdown:Close()
    self.IsOpen = false
    
    Utils.Animate(self.Arrow, {Rotation = 0}, {Duration = ANIMATION_SETTINGS.Default})
    Utils.Animate(self.OptionsContainer, {Size = UDim2.new(1, 0, 0, 0)}, {
        Duration = ANIMATION_SETTINGS.Default,
        Callback = function()
            self.OptionsContainer.Visible = false
        end
    })
    
    return self
end

function Dropdown:SetText(text)
    self.Label.Text = text
    return self
end

function Dropdown:Destroy()
    if self.Element then
        self.Element:Destroy()
    end
end

-- Enhanced TextBox Class
local TextBox = {}
TextBox.__index = TextBox

function TextBox.new(config)
    local self = setmetatable({}, TextBox)
    
    self.Config = config or {}
    self.Value = self.Config.Default or ""
    
    -- Create main container
    self.Container = ComponentCreator.CreateBaseContainer({
        Name = self.Config.Name or "TextBox",
        Size = UDim2.new(1, 0, 0, 70),
        BackgroundTransparency = 1,
        Padding = {All = 16}
    })
    
    -- Create label
    self.Label = ComponentCreator.CreateLabel({
        Name = "Label",
        Size = UDim2.new(1, 0, 0, 20),
        Text = self.Config.Text or "Text Input",
        TextColor = currentTheme.Text,
        TextSize = 14
    })
    self.Label.Parent = self.Container
    
    -- Create text box
    self.TextBoxElement = Instance.new("TextBox")
    self.TextBoxElement.Name = "TextBox"
    self.TextBoxElement.Size = UDim2.new(1, 0, 0, 35)
    self.TextBoxElement.Position = UDim2.new(0, 0, 1, -35)
    self.TextBoxElement.BackgroundColor3 = currentTheme.Secondary
    self.TextBoxElement.BorderSizePixel = 0
    self.TextBoxElement.Text = self.Value
    self.TextBoxElement.PlaceholderText = self.Config.Placeholder or "Enter text..."
    self.TextBoxElement.TextColor3 = currentTheme.Text
    self.TextBoxElement.PlaceholderColor3 = currentTheme.TextMuted
    self.TextBoxElement.TextSize = 13
    self.TextBoxElement.Font = Enum.Font.Gotham
    self.TextBoxElement.TextXAlignment = Enum.TextXAlignment.Left
    self.TextBoxElement.ClearButtonSize = UDim2.new(0, 0, 0, 0)
    self.TextBoxElement.Parent = self.Container
    
    Utils.CreateCorner(8, self.TextBoxElement)
    self.Stroke = Utils.CreateStroke({Color = currentTheme.Border}, self.TextBoxElement)
    Utils.CreatePadding(12, self.TextBoxElement)
    
    -- Setup focus animations
    self.TextBoxElement.Focused:Connect(function()
        Utils.Animate(self.Stroke, {Color = currentTheme.Accent}, {Duration = ANIMATION_SETTINGS.Hover})
        Utils.Animate(self.Stroke, {Thickness = 2}, {Duration = ANIMATION_SETTINGS.Hover})
    end)
    
    self.TextBoxElement.FocusLost:Connect(function()
        Utils.Animate(self.Stroke, {Color = currentTheme.Border}, {Duration = ANIMATION_SETTINGS.Hover})
        Utils.Animate(self.Stroke, {Thickness = 1}, {Duration = ANIMATION_SETTINGS.Hover})
        
        self.Value = self.TextBoxElement.Text
        
        if self.Config.Callback then
            self.Config.Callback(self.Value)
        end
    end)
    
    self.Element = self.Container
    return self
end

function TextBox:SetText(text)
    self.Value = text
    self.TextBoxElement.Text = text
    return self
end

function TextBox:GetText()
    return self.TextBoxElement.Text
end

function TextBox:SetPlaceholder(placeholder)
    self.TextBoxElement.PlaceholderText = placeholder
    return self
end

function TextBox:Clear()
    self.TextBoxElement.Text = ""
    self.Value = ""
    return self
end

function TextBox:Focus()
    self.TextBoxElement:CaptureFocus()
    return self
end

function TextBox:SetLabel(text)
    self.Label.Text = text
    return self
end

function TextBox:Destroy()
    if self.Element then
        self.Element:Destroy()
    end
end

-- Enhanced Window Class
function RadionLibrary:CreateWindow(config)
    local windowConfig = {
        Title = config.Title or "Radion",
        Size = config.Size or UDim2.new(0, 500, 0, 600),
        Theme = config.Theme or "Professional",
        Draggable = config.Draggable ~= false,
        CloseButton = config.CloseButton ~= false,
        MinimizeButton = config.MinimizeButton ~= false,
        Position = config.Position,
        MinSize = config.MinSize or UDim2.new(0, 300, 0, 200),
        MaxSize = config.MaxSize
    }
    
    -- Set theme
    if type(windowConfig.Theme) == "string" and RadionLibrary.Themes[windowConfig.Theme] then
        currentTheme = RadionLibrary.Themes[windowConfig.Theme]
    elseif type(windowConfig.Theme) == "table" then
        currentTheme = windowConfig.Theme
    end
    
    -- Create main GUI
    local gui = Instance.new("ScreenGui")
    gui.Name = "RadionUI_" .. HttpService:GenerateGUID(false)
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.Parent = CoreGui
    
    -- Create main window
    local main = ComponentCreator.CreateBaseContainer({
        Name = "Main",
        Size = windowConfig.Size,
        Position = windowConfig.Position or UDim2.new(0.5, 0, 0.5, 0),
        BackgroundColor = currentTheme.Primary,
        CornerRadius = 12,
        Stroke = {Color = currentTheme.Border, Thickness = 1}
    })
    main.AnchorPoint = Vector2.new(0.5, 0.5)
    main.Parent = gui
    
    -- Create title bar
    local titleBar = ComponentCreator.CreateBaseContainer({
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundColor = currentTheme.Secondary,
        CornerRadius = 12,
        Stroke = {Color = currentTheme.Border, Thickness = 1}
    })
    titleBar.Parent = main
    
    -- Fix bottom corners of title bar
    local cornerFix = ComponentCreator.CreateBaseContainer({
        Name = "CornerFix",
        Size = UDim2.new(1, 0, 0, 12),
        Position = UDim2.new(0, 0, 1, -12),
        BackgroundColor = currentTheme.Secondary
    })
    cornerFix.Parent = titleBar
    
    -- Create title text
    local title = ComponentCreator.CreateLabel({
        Name = "Title",
        Size = UDim2.new(1, -100, 1, 0),
        Position = UDim2.new(0, 20, 0, 0),
        Text = windowConfig.Title,
        TextColor = currentTheme.Text,
        TextSize = 16,
        Font = Enum.Font.GothamMedium,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    title.Parent = titleBar
    
    -- Create content area
    local content = Instance.new("ScrollingFrame")
    content.Name = "Content"
    content.Size = UDim2.new(1, 0, 1, -50)
    content.Position = UDim2.new(0, 0, 0, 50)
    content.BackgroundTransparency = 1
    content.BorderSizePixel = 0
    content.ScrollBarThickness = 6
    content.ScrollBarImageColor3 = currentTheme.Border
    content.ScrollBarImageTransparency = 0.3
    content.CanvasSize = UDim2.new(0, 0, 0, 0)
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.ScrollingDirection = Enum.ScrollingDirection.Y
    content.Parent = main
    
    Utils.CreatePadding(20, content)
    
    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 12)
    layout.Parent = content
    
    -- Make draggable
    if windowConfig.Draggable then
        local dragging = false
        local dragStart = nil
        local startPos = nil
        
        titleBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                dragStart = input.Position
                startPos = main.Position
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local delta = input.Position - dragStart
                main.Position = UDim2.new(
                    startPos.X.Scale, 
                    startPos.X.Offset + delta.X, 
                    startPos.Y.Scale, 
                    startPos.Y.Offset + delta.Y
                )
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
    end
    
    -- Animate window in
    main.Size = UDim2.new(0, 0, 0, 0)
    Utils.Animate(main, {Size = windowConfig.Size}, {
        Duration = ANIMATION_SETTINGS.Bounce,
        Style = EASING_STYLES.Bounce
    })
    
    -- Window object
    local Window = {}
    Window.Elements = {}
    
    function Window:AddButton(config)
        local button = Button.new(config)
        button.Element.Parent = content
        table.insert(self.Elements, button)
        return button
    end
    
    function Window:AddToggle(config)
        local toggle = Toggle.new(config)
        toggle.Element.Parent = content
        table.insert(self.Elements, toggle)
        return toggle
    end
    
    function Window:AddSlider(config)
        local slider = Slider.new(config)
        slider.Element.Parent = content
        table.insert(self.Elements, slider)
        return slider
    end
    
    function Window:AddDropdown(config)
        local dropdown = Dropdown.new(config)
        dropdown.Element.Parent = content
        table.insert(self.Elements, dropdown)
        return dropdown
    end
    
    function Window:AddTextBox(config)
        local textBox = TextBox.new(config)
        textBox.Element.Parent = content
        table.insert(self.Elements, textBox)
        return textBox
    end
    
    function Window:AddLabel(text, config)
        config = config or {}
        local label = ComponentCreator.CreateLabel({
            Text = text,
            Size = UDim2.new(1, 0, 0, config.Height or 30),
            TextColor = config.Color or currentTheme.TextSecondary,
            TextSize = config.TextSize or 14,
            Font = config.Font or Enum.Font.Gotham,
            TextXAlignment = config.Alignment or Enum.TextXAlignment.Left,
            TextWrapped = config.TextWrapped or true
        })
        label.Parent = content
        
        return {
            Element = label,
            SetText = function(newText)
                label.Text = newText
            end,
            SetColor = function(color)
                label.TextColor3 = color
            end,
            Destroy = function()
                label:Destroy()
            end
        }
    end
    
    function Window:AddSeparator(config)
        config = config or {}
        local separator = ComponentCreator.CreateBaseContainer({
            Size = UDim2.new(1, 0, 0, 1),
            BackgroundColor = config.Color or currentTheme.Border
        })
        separator.Parent = content
        
        return {
            Element = separator,
            SetColor = function(color)
                separator.BackgroundColor3 = color
            end,
            Destroy = function()
                separator:Destroy()
            end
        }
    end
    
    function Window:AddSpace(height)
        local space = ComponentCreator.CreateBaseContainer({
            Size = UDim2.new(1, 0, 0, height or 10),
            BackgroundTransparency = 1
        })
        space.Parent = content
        
        return {
            Element = space,
            Destroy = function()
                space:Destroy()
            end
        }
    end
    
    function Window:SetTheme(theme)
        if type(theme) == "string" and RadionLibrary.Themes[theme] then
            currentTheme = RadionLibrary.Themes[theme]
        elseif type(theme) == "table" then
            currentTheme = theme
        end
        
        -- Animate theme changes
        Utils.Animate(main, {BackgroundColor3 = currentTheme.Primary}, {Duration = ANIMATION_SETTINGS.Default})
        Utils.Animate(titleBar, {BackgroundColor3 = currentTheme.Secondary}, {Duration = ANIMATION_SETTINGS.Default})
        Utils.Animate(cornerFix, {BackgroundColor3 = currentTheme.Secondary}, {Duration = ANIMATION_SETTINGS.Default})
        Utils.Animate(title, {TextColor3 = currentTheme.Text}, {Duration = ANIMATION_SETTINGS.Default})
        
        content.ScrollBarImageColor3 = currentTheme.Border
        
        return self
    end
    
    function Window:SetTitle(newTitle)
        title.Text = newTitle
        return self
    end
    
    function Window:SetSize(newSize, animate)
        if animate then
            Utils.Animate(main, {Size = newSize}, {Duration = ANIMATION_SETTINGS.Default})
        else
            main.Size = newSize
        end
        return self
    end
    
    function Window:SetPosition(newPosition, animate)
        if animate then
            Utils.Animate(main, {Position = newPosition}, {Duration = ANIMATION_SETTINGS.Default})
        else
            main.Position = newPosition
        end
        return self
    end
    
    function Window:Toggle()
        if main.Visible then
            self:Hide()
        else
            self:Show()
        end
        return self
    end
    
    function Window:Show()
        main.Visible = true
        AnimationSystem.FadeIn(main, {Duration = ANIMATION_SETTINGS.Default})
        return self
    end
    
    function Window:Hide()
        AnimationSystem.FadeOut(main, {
            Duration = ANIMATION_SETTINGS.Default,
            Callback = function()
                main.Visible = false
            end
        })
        return self
    end
    
    function Window:Destroy()
        Utils.Animate(main, {Size = UDim2.new(0, 0, 0, 0)}, {
            Duration = ANIMATION_SETTINGS.Bounce,
            Style = EASING_STYLES.Bounce,
            Callback = function()
                gui:Destroy()
            end
        })
    end
    
    function Window:GetElements()
        return self.Elements
    end
    
    function Window:ClearElements()
        for _, element in pairs(self.Elements) do
            if element.Destroy then
                element:Destroy()
            end
        end
        self.Elements = {}
        return self
    end
    
    return Window
end

-- Enhanced Notification System
function RadionLibrary:Notify(config)
    config = config or {}
    
    local notification = ComponentCreator.CreateBaseContainer({
        Name = "Notification",
        Size = UDim2.new(0, 320, 0, 80),
        Position = UDim2.new(1, -340, 1, -100),
        BackgroundColor = currentTheme.Secondary,
        CornerRadius = 12,
        Stroke = {Color = currentTheme.Border}
    })
    
    local notifGui = Instance.new("ScreenGui")
    notifGui.Name = "RadionNotification_" .. HttpService:GenerateGUID(false)
    notifGui.Parent = CoreGui
    
    notification.Parent = notifGui
    
    Utils.CreatePadding(16, notification)
    
    local title = ComponentCreator.CreateLabel({
        Name = "Title",
        Size = UDim2.new(1, 0, 0, 20),
        Text = config.Title or "Notification",
        TextColor = currentTheme.Text,
        TextSize = 14,
        Font = Enum.Font.GothamMedium,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    title.Parent = notification
    
    local description = ComponentCreator.CreateLabel({
        Name = "Description",
        Size = UDim2.new(1, 0, 1, -25),
        Position = UDim2.new(0, 0, 0, 25),
        Text = config.Description or "",
        TextColor = currentTheme.TextSecondary,
        TextSize = 12,
        Font = Enum.Font.Gotham,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true
    })
    description.Parent = notification
    
    -- Color based on type
    local accentColor = currentTheme.Accent
    if config.Type == "Success" then
        accentColor = currentTheme.Success
    elseif config.Type == "Warning" then
        accentColor = currentTheme.Warning
    elseif config.Type == "Error" then
        accentColor = currentTheme.Error
    elseif config.Type == "Info" then
        accentColor = currentTheme.Info
    end
    
    -- Create accent bar
    local accentBar = ComponentCreator.CreateBaseContainer({
        Name = "AccentBar",
        Size = UDim2.new(0, 4, 1, 0),
        Position = UDim2.new(0, -16, 0, 0),
        BackgroundColor = accentColor,
        CornerRadius = 2
    })
    accentBar.Parent = notification
    
    -- Animate in
    notification.Position = UDim2.new(1, 0, 1, -100)
    Utils.Animate(notification, {Position = UDim2.new(1, -340, 1, -100)}, {
        Duration = ANIMATION_SETTINGS.Bounce,
        Style = EASING_STYLES.Bounce
    })
    
    -- Auto dismiss
    local duration = config.Duration or 4
    task.spawn(function()
        task.wait(duration)
        Utils.Animate(notification, {Position = UDim2.new(1, 0, 1, -100)}, {
            Duration = ANIMATION_SETTINGS.Default,
            Callback = function()
                notifGui:Destroy()
            end
        })
    end)
    
    -- Click to dismiss
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 1, 0)
    button.BackgroundTransparency = 1
    button.Text = ""
    button.Parent = notification
    
    button.MouseButton1Click:Connect(function()
        Utils.Animate(notification, {Position = UDim2.new(1, 0, 1, -100)}, {
            Duration = ANIMATION_SETTINGS.Default,
            Callback = function()
                notifGui:Destroy()
            end
        })
    end)
    
    return {
        Element = notification,
        Destroy = function()
            notifGui:Destroy()
        end
    }
end

-- Enhanced Configuration System
RadionLibrary.Config = {}

function RadionLibrary.Config:Save(fileName, data)
    if not writefile then
        RadionLibrary:Notify({
            Title = "Save Failed",
            Description = "File writing not supported in this environment",
            Type = "Error"
        })
        return false
    end
    
    local success, result = pcall(function()
        local json = HttpService:JSONEncode(data)
        writefile(fileName .. ".json", json)
    end)
    
    if success then
        RadionLibrary:Notify({
            Title = "Configuration Saved",
            Description = "Settings saved to " .. fileName .. ".json",
            Type = "Success"
        })
        return true
    else
        RadionLibrary:Notify({
            Title = "Save Failed",
            Description = "Could not save: " .. tostring(result),
            Type = "Error"
        })
        return false
    end
end

function RadionLibrary.Config:Load(fileName)
    if not readfile or not isfile then
        RadionLibrary:Notify({
            Title = "Load Failed",
            Description = "File reading not supported in this environment",
            Type = "Error"
        })
        return nil
    end
    
    local filePath = fileName .. ".json"
    
    if not isfile(filePath) then
        RadionLibrary:Notify({
            Title = "File Not Found",
            Description = fileName .. ".json does not exist",
            Type = "Warning"
        })
        return nil
    end
    
    local success, result = pcall(function()
        local content = readfile(filePath)
        return HttpService:JSONDecode(content)
    end)
    
    if success then
        RadionLibrary:Notify({
            Title = "Configuration Loaded",
            Description = "Settings loaded from " .. fileName .. ".json",
            Type = "Success"
        })
        return result
    else
        RadionLibrary:Notify({
            Title = "Load Failed",
            Description = "Could not load: " .. tostring(result),
            Type = "Error"
        })
        return nil
    end
end

-- Utility Functions
function RadionLibrary:SetGlobalTheme(theme)
    if type(theme) == "string" and self.Themes[theme] then
        currentTheme = self.Themes[theme]
    elseif type(theme) == "table" then
        currentTheme = theme
    end
    return self
end

function RadionLibrary:CreateQuickWindow(title, theme)
    return self:CreateWindow({
        Title = title or "Radion UI",
        Size = UDim2.new(0, 450, 0, 550),
        Theme = theme or "Professional"
    })
end

function RadionLibrary:GetCurrentTheme()
    return currentTheme
end

function RadionLibrary:CreateCustomTheme(name, colors)
    self.Themes[name] = colors
    return self
end

-- Enhanced Component Factory for Advanced Usage
RadionLibrary.CreateComponent = {}

function RadionLibrary.CreateComponent:Button(config)
    return Button.new(config)
end

function RadionLibrary.CreateComponent:Toggle(config)
    return Toggle.new(config)
end

function RadionLibrary.CreateComponent:Slider(config)
    return Slider.new(config)
end

function RadionLibrary.CreateComponent:Dropdown(config)
    return Dropdown.new(config)
end

function RadionLibrary.CreateComponent:TextBox(config)
    return TextBox.new(config)
end

-- Advanced Features
function RadionLibrary:CreateColorPicker(config)
    config = config or {}
    
    local colorPicker = ComponentCreator.CreateBaseContainer({
        Name = config.Name or "ColorPicker",
        Size = UDim2.new(1, 0, 0, 70),
        BackgroundTransparency = 1,
        Padding = {All = 16}
    })
    
    local label = ComponentCreator.CreateLabel({
        Name = "Label",
        Size = UDim2.new(1, -40, 0, 20),
        Text = config.Text or "Color Picker",
        TextColor = currentTheme.Text,
        TextSize = 14
    })
    label.Parent = colorPicker
    
    local colorDisplay = ComponentCreator.CreateBaseContainer({
        Name = "ColorDisplay",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -30, 0, 0),
        BackgroundColor = config.Default or Color3.fromRGB(255, 255, 255),
        CornerRadius = 6,
        Stroke = {Color = currentTheme.Border}
    })
    colorDisplay.Parent = colorPicker
    
    local currentColor = config.Default or Color3.fromRGB(255, 255, 255)
    
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 1, 0)
    button.BackgroundTransparency = 1
    button.Text = ""
    button.Parent = colorDisplay
    
    button.MouseButton1Click:Connect(function()
        if config.Callback then
            config.Callback(currentColor)
        end
    end)
    
    return {
        Element = colorPicker,
        SetColor = function(color)
            currentColor = color
            colorDisplay.BackgroundColor3 = color
        end,
        GetColor = function()
            return currentColor
        end,
        SetText = function(text)
            label.Text = text
        end,
        Destroy = function()
            colorPicker:Destroy()
        end
    }
end

function RadionLibrary:CreateKeybind(config)
    config = config or {}
    
    local keybind = ComponentCreator.CreateBaseContainer({
        Name = config.Name or "Keybind",
        Size = UDim2.new(1, 0, 0, 50),
        BackgroundTransparency = 1,
        Padding = {All = 16}
    })
    
    local label = ComponentCreator.CreateLabel({
        Name = "Label",
        Size = UDim2.new(1, -80, 1, 0),
        Text = config.Text or "Keybind",
        TextColor = currentTheme.Text,
        TextSize = 14
    })
    label.Parent = keybind
    
    local keyButton = ComponentCreator.CreateButton({
        Name = "KeyButton",
        Size = UDim2.new(0, 70, 0, 30),
        Position = UDim2.new(1, -70, 0.5, -15),
        BackgroundColor = currentTheme.Secondary,
        Text = config.Default and config.Default.Name or "None",
        TextColor = currentTheme.Text,
        TextSize = 12,
        CornerRadius = 6,
        Ripple = false
    })
    keyButton.Element.Parent = keybind
    
    local currentKey = config.Default
    local listening = false
    
    keyButton.Element.MouseButton1Click:Connect(function()
        if listening then return end
        
        listening = true
        keyButton:SetText("...")
        
        local connection
        connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            
            if input.UserInputType == Enum.UserInputType.Keyboard then
                currentKey = input.KeyCode
                keyButton:SetText(currentKey.Name)
                listening = false
                connection:Disconnect()
                
                if config.Callback then
                    config.Callback(currentKey)
                end
            end
        end)
        
        task.spawn(function()
            task.wait(5) -- Timeout after 5 seconds
            if listening then
                listening = false
                keyButton:SetText(currentKey and currentKey.Name or "None")
                connection:Disconnect()
            end
        end)
    end)
    
    -- Listen for the actual keybind
    if config.Callback then
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed or not currentKey then return end
            
            if input.KeyCode == currentKey then
                config.Callback(currentKey)
            end
        end)
    end
    
    return {
        Element = keybind,
        SetKey = function(key)
            currentKey = key
            keyButton:SetText(key and key.Name or "None")
        end,
        GetKey = function()
            return currentKey
        end,
        SetText = function(text)
            label.Text = text
        end,
        Destroy = function()
            keybind:Destroy()
        end
    }
end

function RadionLibrary:CreateSection(config)
    config = config or {}
    
    local section = ComponentCreator.CreateBaseContainer({
        Name = config.Name or "Section",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor = currentTheme.Tertiary,
        CornerRadius = 8,
        Stroke = {Color = currentTheme.BorderLight},
        Padding = {All = 16}
    })
    
    local sectionLabel = ComponentCreator.CreateLabel({
        Name = "SectionLabel",
        Size = UDim2.new(1, 0, 1, 0),
        Text = config.Text or "Section",
        TextColor = currentTheme.Text,
        TextSize = 15,
        Font = Enum.Font.GothamMedium,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    sectionLabel.Parent = section
    
    return {
        Element = section,
        SetText = function(text)
            sectionLabel.Text = text
        end,
        Destroy = function()
            section:Destroy()
        end
    }
end

-- Example Usage Documentation
--[[

ENHANCED RADION UI LIBRARY EXAMPLES:

-- Basic Window Creation
local window = RadionLibrary:CreateWindow({
    Title = "My Advanced App",
    Size = UDim2.new(0, 500, 0, 650),
    Theme = "Professional", -- Professional, Minimal, Ocean, Purple
    Draggable = true,
    Position = UDim2.new(0.5, 0, 0.5, 0)
})

-- Enhanced Button with Chaining
local button = window:AddButton({
    Text = "Enhanced Button",
    TextSize = 14,
    BackgroundColor = Color3.fromRGB(88, 166, 255),
    HoverColor = Color3.fromRGB(108, 186, 255),
    CornerRadius = 8,
    Callback = function()
        print("Button clicked!")
    end
}):SetText("Updated Text"):SetEnabled(true)

-- Advanced Toggle with Custom Styling
local toggle = window:AddToggle({
    Text = "Advanced Feature",
    Default = false,
    Callback = function(value)
        print("Toggle state:", value)
        button:SetEnabled(value)
    end
})

-- Enhanced Slider with Custom Range
local slider = window:AddSlider({
    Text = "Volume Control",
    Min = 0,
    Max = 100,
    Step = 5,
    Default = 50,
    Suffix = "%",
    Callback = function(value)
        print("Volume:", value)
    end
}):SetRange(0, 200):SetStep(10)

-- Advanced Dropdown with Dynamic Options
local dropdown = window:AddDropdown({
    Text = "Select Mode",
    Options = {"Mode 1", "Mode 2", "Mode 3"},
    Default = "Mode 1",
    Callback = function(selected, index)
        print("Selected:", selected, "Index:", index)
    end
}):AddOption("Mode 4"):RemoveOption("Mode 1")

-- Enhanced TextBox with Validation
local textBox = window:AddTextBox({
    Text = "Username",
    Placeholder = "Enter username...",
    Default = "",
    Callback = function(text)
        if #text >= 3 then
            RadionLibrary:Notify({
                Title = "Valid Username",
                Description = "Username '" .. text .. "' is valid!",
                Type = "Success"
            })
        else
            RadionLibrary:Notify({
                Title = "Invalid Username",
                Description = "Username must be at least 3 characters",
                Type = "Error"
            })
        end
    end
})

-- Advanced Components
local colorPicker = RadionLibrary:CreateColorPicker({
    Text = "Theme Color",
    Default = Color3.fromRGB(88, 166, 255),
    Callback = function(color)
        print("Color selected:", color)
    end
})

local keybind = RadionLibrary:CreateKeybind({
    Text = "Toggle Visibility",
    Default = Enum.KeyCode.F,
    Callback = function(key)
        window:Toggle()
    end
})

-- Add Section Headers
window:AddSection({Text = "Main Settings"})
-- Add your components here
window:AddSection({Text = "Advanced Options"})
-- Add more components

-- Utility Functions
window:AddSeparator()
window:AddSpace(10)

-- Labels with Custom Styling
window:AddLabel("This is a custom label", {
    Color = Color3.fromRGB(255, 255, 255),
    TextSize = 16,
    Height = 35,
    TextWrapped = true
})

-- Theme Management
window:SetTheme("Ocean") -- Change theme dynamically
RadionLibrary:SetGlobalTheme("Purple") -- Set global theme

-- Create Custom Theme
RadionLibrary:CreateCustomTheme("MyTheme", {
    Primary = Color3.fromRGB(20, 20, 25),
    Secondary = Color3.fromRGB(30, 30, 35),
    -- ... other colors
})

-- Configuration Save/Load
local config = {
    volume = slider:GetValue(),
    feature_enabled = toggle:GetValue(),
    username = textBox:GetText(),
    selected_mode = dropdown:GetValue()
}

RadionLibrary.Config:Save("myapp_settings", config)
local loadedConfig = RadionLibrary.Config:Load("myapp_settings")

if loadedConfig then
    slider:SetValue(loadedConfig.volume)
    toggle:SetValue(loadedConfig.feature_enabled)
    textBox:SetText(loadedConfig.username)
    dropdown:SetValue(loadedConfig.selected_mode)
end

-- Enhanced Notifications
RadionLibrary:Notify({
    Title = "Application Ready",
    Description = "All systems initialized successfully!",
    Type = "Success", -- Success, Error, Warning, Info
    Duration = 5
})

-- Window Management
window:SetTitle("Updated Title")
window:SetSize(UDim2.new(0, 600, 0, 700), true) -- true for animation
window:SetPosition(UDim2.new(0, 100, 0, 100), true)
window:Show() -- or Hide(), Toggle()

-- Cleanup
window:ClearElements() -- Remove all elements
window:Destroy() -- Destroy the window

]]

return RadionLibrary
