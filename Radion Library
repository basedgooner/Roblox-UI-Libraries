--[[
    Nexus UI Library
    A modern, lightweight, and highly customizable UI library for Roblox
    Version: 1.0.0
    
    Features:
    - Mobile responsive design
    - Dark/Light themes with custom theme support
    - Modular component system
    - Smooth animations and transitions
    - Full touch and keyboard support
    - Clean, modern aesthetic
    - Easy to use API
]]

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Nexus UI Library
local NexusUI = {}
NexusUI.__index = NexusUI

-- Configuration and Themes
local Config = {
    AnimationSpeed = 0.3,
    CornerRadius = 8,
    Padding = 12,
    FontSize = 14,
    IconSize = 16,
    NotificationDuration = 3,
    MaxNotifications = 5,
    MobileBreakpoint = 768
}

local Themes = {
    Dark = {
        Primary = Color3.fromRGB(88, 101, 242),
        Secondary = Color3.fromRGB(114, 137, 218),
        Background = Color3.fromRGB(32, 34, 37),
        Surface = Color3.fromRGB(47, 49, 54),
        SurfaceVariant = Color3.fromRGB(64, 68, 75),
        OnPrimary = Color3.fromRGB(255, 255, 255),
        OnSecondary = Color3.fromRGB(255, 255, 255),
        OnBackground = Color3.fromRGB(220, 221, 222),
        OnSurface = Color3.fromRGB(220, 221, 222),
        Outline = Color3.fromRGB(79, 84, 92),
        Success = Color3.fromRGB(67, 181, 129),
        Warning = Color3.fromRGB(250, 166, 26),
        Error = Color3.fromRGB(237, 66, 69),
        Shadow = Color3.fromRGB(0, 0, 0)
    },
    Light = {
        Primary = Color3.fromRGB(88, 101, 242),
        Secondary = Color3.fromRGB(114, 137, 218),
        Background = Color3.fromRGB(255, 255, 255),
        Surface = Color3.fromRGB(248, 249, 250),
        SurfaceVariant = Color3.fromRGB(241, 243, 244),
        OnPrimary = Color3.fromRGB(255, 255, 255),
        OnSecondary = Color3.fromRGB(255, 255, 255),
        OnBackground = Color3.fromRGB(32, 33, 36),
        OnSurface = Color3.fromRGB(32, 33, 36),
        Outline = Color3.fromRGB(189, 193, 198),
        Success = Color3.fromRGB(52, 168, 83),
        Warning = Color3.fromRGB(251, 188, 4),
        Error = Color3.fromRGB(234, 67, 53),
        Shadow = Color3.fromRGB(0, 0, 0)
    }
}

-- Utility Functions
local function IsMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

local function CreateTween(object, properties, duration, easingStyle)
    duration = duration or Config.AnimationSpeed
    easingStyle = easingStyle or Enum.EasingStyle.Quint
    
    local tweenInfo = TweenInfo.new(
        duration,
        easingStyle,
        Enum.EasingDirection.Out
    )
    
    return TweenService:Create(object, tweenInfo, properties)
end

local function CreateCorner(radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or Config.CornerRadius)
    return corner
end

local function CreatePadding(padding)
    local pad = Instance.new("UIPadding")
    local p = padding or Config.Padding
    pad.PaddingTop = UDim.new(0, p)
    pad.PaddingBottom = UDim.new(0, p)
    pad.PaddingLeft = UDim.new(0, p)
    pad.PaddingRight = UDim.new(0, p)
    return pad
end

local function CreateGradient(colorSequence, transparency)
    local gradient = Instance.new("UIGradient")
    if colorSequence then
        gradient.Color = colorSequence
    end
    if transparency then
        gradient.Transparency = transparency
    end
    return gradient
end

local function CreateShadow(parent, intensity)
    intensity = intensity or 0.1
    
    local shadow = Instance.new("Frame")
    shadow.Name = "Shadow"
    shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    shadow.BackgroundTransparency = 1 - intensity
    shadow.BorderSizePixel = 0
    shadow.Position = UDim2.new(0, 2, 0, 2)
    shadow.Size = UDim2.new(1, 0, 1, 0)
    shadow.ZIndex = parent.ZIndex - 1
    shadow.Parent = parent.Parent
    
    CreateCorner(Config.CornerRadius).Parent = shadow
    
    return shadow
end

-- Constructor
function NexusUI.new(options)
    options = options or {}
    
    local self = setmetatable({}, NexusUI)
    
    self.Theme = Themes[options.Theme or "Dark"]
    self.Config = options.Config or Config
    self.Windows = {}
    self.Notifications = {}
    
    -- Create main GUI
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "NexusUI"
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.ScreenGui.Parent = PlayerGui
    
    -- Create notification container
    self.NotificationContainer = Instance.new("Frame")
    self.NotificationContainer.Name = "NotificationContainer"
    self.NotificationContainer.BackgroundTransparency = 1
    self.NotificationContainer.Position = UDim2.new(1, -20, 0, 20)
    self.NotificationContainer.Size = UDim2.new(0, 300, 1, -40)
    self.NotificationContainer.AnchorPoint = Vector2.new(1, 0)
    self.NotificationContainer.Parent = self.ScreenGui
    
    local notifLayout = Instance.new("UIListLayout")
    notifLayout.FillDirection = Enum.FillDirection.Vertical
    notifLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    notifLayout.VerticalAlignment = Enum.VerticalAlignment.Top
    notifLayout.Padding = UDim.new(0, 8)
    notifLayout.Parent = self.NotificationContainer
    
    -- Mobile responsiveness
    if IsMobile() then
        self.NotificationContainer.Size = UDim2.new(0, 280, 1, -40)
        self.NotificationContainer.Position = UDim2.new(1, -10, 0, 10)
    end
    
    return self
end

-- Theme Management
function NexusUI:SetTheme(themeName)
    if Themes[themeName] then
        self.Theme = Themes[themeName]
        self:RefreshTheme()
    end
end

function NexusUI:CreateCustomTheme(name, colors)
    Themes[name] = colors
end

function NexusUI:RefreshTheme()
    -- Refresh all existing windows and components
    for _, window in pairs(self.Windows) do
        window:RefreshTheme()
    end
end

-- Window Creation
function NexusUI:CreateWindow(options)
    options = options or {}
    
    local window = {
        Title = options.Title or "Nexus UI",
        Size = options.Size or UDim2.new(0, 500, 0, 400),
        Position = options.Position or UDim2.new(0.5, 0, 0.5, 0),
        Draggable = options.Draggable ~= false,
        Resizable = options.Resizable or false,
        MinSize = options.MinSize or Vector2.new(300, 200),
        Pages = {},
        CurrentPage = nil,
        UI = self
    }
    
    -- Create window frame
    window.Frame = Instance.new("Frame")
    window.Frame.Name = "Window"
    window.Frame.BackgroundColor3 = self.Theme.Background
    window.Frame.BorderSizePixel = 0
    window.Frame.Position = window.Position
    window.Frame.Size = window.Size
    window.Frame.AnchorPoint = Vector2.new(0.5, 0.5)
    window.Frame.ZIndex = 100
    window.Frame.Parent = self.ScreenGui
    
    CreateCorner().Parent = window.Frame
    CreateShadow(window.Frame, 0.15)
    
    -- Title bar
    window.TitleBar = Instance.new("Frame")
    window.TitleBar.Name = "TitleBar"
    window.TitleBar.BackgroundColor3 = self.Theme.Surface
    window.TitleBar.BorderSizePixel = 0
    window.TitleBar.Size = UDim2.new(1, 0, 0, 40)
    window.TitleBar.Parent = window.Frame
    
    CreateCorner().Parent = window.TitleBar
    
    -- Title bar bottom cover
    local titleCover = Instance.new("Frame")
    titleCover.BackgroundColor3 = self.Theme.Surface
    titleCover.BorderSizePixel = 0
    titleCover.Position = UDim2.new(0, 0, 1, -8)
    titleCover.Size = UDim2.new(1, 0, 0, 8)
    titleCover.Parent = window.TitleBar
    
    -- Title text
    window.TitleLabel = Instance.new("TextLabel")
    window.TitleLabel.Name = "Title"
    window.TitleLabel.BackgroundTransparency = 1
    window.TitleLabel.Position = UDim2.new(0, 16, 0, 0)
    window.TitleLabel.Size = UDim2.new(1, -80, 1, 0)
    window.TitleLabel.Text = window.Title
    window.TitleLabel.TextColor3 = self.Theme.OnSurface
    window.TitleLabel.TextSize = 16
    window.TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    window.TitleLabel.Font = Enum.Font.GothamMedium
    window.TitleLabel.Parent = window.TitleBar
    
    -- Close button
    window.CloseButton = Instance.new("TextButton")
    window.CloseButton.Name = "CloseButton"
    window.CloseButton.BackgroundColor3 = self.Theme.Error
    window.CloseButton.BorderSizePixel = 0
    window.CloseButton.Position = UDim2.new(1, -32, 0, 8)
    window.CloseButton.Size = UDim2.new(0, 24, 0, 24)
    window.CloseButton.Text = "Ã—"
    window.CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    window.CloseButton.TextSize = 16
    window.CloseButton.Font = Enum.Font.GothamBold
    window.CloseButton.Parent = window.TitleBar
    
    CreateCorner(12).Parent = window.CloseButton
    
    -- Navigation container
    window.NavContainer = Instance.new("Frame")
    window.NavContainer.Name = "Navigation"
    window.NavContainer.BackgroundColor3 = self.Theme.SurfaceVariant
    window.NavContainer.BorderSizePixel = 0
    window.NavContainer.Position = UDim2.new(0, 0, 0, 40)
    window.NavContainer.Size = UDim2.new(0, 150, 1, -40)
    window.NavContainer.Parent = window.Frame
    
    local navLayout = Instance.new("UIListLayout")
    navLayout.FillDirection = Enum.FillDirection.Vertical
    navLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    navLayout.Padding = UDim.new(0, 4)
    navLayout.Parent = window.NavContainer
    
    CreatePadding(8).Parent = window.NavContainer
    
    -- Content container
    window.ContentContainer = Instance.new("Frame")
    window.ContentContainer.Name = "Content"
    window.ContentContainer.BackgroundTransparency = 1
    window.ContentContainer.Position = UDim2.new(0, 150, 0, 40)
    window.ContentContainer.Size = UDim2.new(1, -150, 1, -40)
    window.ContentContainer.Parent = window.Frame
    
    -- Add dragging functionality
    if window.Draggable then
        local dragging = false
        local dragStart = nil
        local startPos = nil
        
        window.TitleBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = window.Frame.Position
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - dragStart
                window.Frame.Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)
    end
    
    -- Close button functionality
    window.CloseButton.MouseButton1Click:Connect(function()
        window:Destroy()
    end)
    
    -- Window methods
    function window:CreatePage(options)
        options = options or {}
        
        local page = {
            Title = options.Title or "Page",
            Icon = options.Icon,
            Window = self,
            Elements = {},
            Visible = false
        }
        
        -- Create navigation button
        page.NavButton = Instance.new("TextButton")
        page.NavButton.Name = "NavButton"
        page.NavButton.BackgroundColor3 = self.UI.Theme.Surface
        page.NavButton.BorderSizePixel = 0
        page.NavButton.Size = UDim2.new(1, 0, 0, 36)
        page.NavButton.Text = page.Title
        page.NavButton.TextColor3 = self.UI.Theme.OnSurface
        page.NavButton.TextSize = 14
        page.NavButton.Font = Enum.Font.Gotham
        page.NavButton.Parent = self.NavContainer
        
        CreateCorner(6).Parent = page.NavButton
        
        -- Create page content
        page.Content = Instance.new("ScrollingFrame")
        page.Content.Name = "PageContent"
        page.Content.BackgroundTransparency = 1
        page.Content.BorderSizePixel = 0
        page.Content.Size = UDim2.new(1, 0, 1, 0)
        page.Content.CanvasSize = UDim2.new(0, 0, 0, 0)
        page.Content.ScrollBarThickness = 4
        page.Content.ScrollBarImageColor3 = self.UI.Theme.Outline
        page.Content.Visible = false
        page.Content.Parent = self.ContentContainer
        
        local pageLayout = Instance.new("UIListLayout")
        pageLayout.FillDirection = Enum.FillDirection.Vertical
        pageLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        pageLayout.Padding = UDim.new(0, 8)
        pageLayout.Parent = page.Content
        
        CreatePadding().Parent = page.Content
        
        -- Auto-resize canvas
        pageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.Content.CanvasSize = UDim2.new(0, 0, 0, pageLayout.AbsoluteContentSize.Y + 24)
        end)
        
        -- Navigation functionality
        page.NavButton.MouseButton1Click:Connect(function()
            self:ShowPage(page)
        end)
        
        -- Page methods
        function page:CreateButton(options)
            return self.Window.UI:CreateButton(options, self.Content)
        end
        
        function page:CreateToggle(options)
            return self.Window.UI:CreateToggle(options, self.Content)
        end
        
        function page:CreateDropdown(options)
            return self.Window.UI:CreateDropdown(options, self.Content)
        end
        
        function page:CreateSlider(options)
            return self.Window.UI:CreateSlider(options, self.Content)
        end
        
        function page:CreateTextbox(options)
            return self.Window.UI:CreateTextbox(options, self.Content)
        end
        
        function page:CreateLabel(options)
            return self.Window.UI:CreateLabel(options, self.Content)
        end
        
        function page:CreateSection(options)
            return self.Window.UI:CreateSection(options, self.Content)
        end
        
        self.Pages[#self.Pages + 1] = page
        
        -- Show first page by default
        if #self.Pages == 1 then
            self:ShowPage(page)
        end
        
        return page
    end
    
    function window:ShowPage(page)
        -- Hide current page
        if self.CurrentPage then
            self.CurrentPage.Content.Visible = false
            self.CurrentPage.NavButton.BackgroundColor3 = self.UI.Theme.Surface
        end
        
        -- Show new page
        page.Content.Visible = true
        page.NavButton.BackgroundColor3 = self.UI.Theme.Primary
        self.CurrentPage = page
    end
    
    function window:RefreshTheme()
        self.Frame.BackgroundColor3 = self.UI.Theme.Background
        self.TitleBar.BackgroundColor3 = self.UI.Theme.Surface
        self.TitleLabel.TextColor3 = self.UI.Theme.OnSurface
        self.NavContainer.BackgroundColor3 = self.UI.Theme.SurfaceVariant
        
        for _, page in pairs(self.Pages) do
            page.NavButton.BackgroundColor3 = page == self.CurrentPage and self.UI.Theme.Primary or self.UI.Theme.Surface
            page.NavButton.TextColor3 = self.UI.Theme.OnSurface
        end
    end
    
    function window:Destroy()
        local tween = CreateTween(self.Frame, {
            Size = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 1
        })
        tween:Play()
        
        tween.Completed:Connect(function()
            self.Frame:Destroy()
        end)
        
        -- Remove from windows list
        for i, w in pairs(self.UI.Windows) do
            if w == self then
                table.remove(self.UI.Windows, i)
                break
            end
        end
    end
    
    self.Windows[#self.Windows + 1] = window
    
    -- Entrance animation
    window.Frame.Size = UDim2.new(0, 0, 0, 0)
    window.Frame.BackgroundTransparency = 1
    
    local tween = CreateTween(window.Frame, {
        Size = window.Size,
        BackgroundTransparency = 0
    })
    tween:Play()
    
    return window
end

-- Element Creation Functions
function NexusUI:CreateButton(options, parent)
    options = options or {}
    
    local button = Instance.new("TextButton")
    button.Name = "Button"
    button.BackgroundColor3 = options.Color or self.Theme.Primary
    button.BorderSizePixel = 0
    button.Size = options.Size or UDim2.new(1, 0, 0, 36)
    button.Text = options.Text or "Button"
    button.TextColor3 = options.TextColor or self.Theme.OnPrimary
    button.TextSize = options.TextSize or Config.FontSize
    button.Font = Enum.Font.GothamMedium
    button.Parent = parent or self.ScreenGui
    
    CreateCorner().Parent = button
    
    -- Hover effect
    button.MouseEnter:Connect(function()
        CreateTween(button, {BackgroundColor3 = self.Theme.Secondary}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        CreateTween(button, {BackgroundColor3 = options.Color or self.Theme.Primary}):Play()
    end)
    
    -- Click callback
    if options.Callback then
        button.MouseButton1Click:Connect(options.Callback)
    end
    
    return button
end

function NexusUI:CreateToggle(options, parent)
    options = options or {}
    
    local container = Instance.new("Frame")
    container.Name = "ToggleContainer"
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Size = UDim2.new(1, 0, 0, 40)
    container.Parent = parent or self.ScreenGui
    
    CreateCorner().Parent = container
    CreatePadding().Parent = container
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Size = UDim2.new(1, -60, 1, 0)
    label.Text = options.Text or "Toggle"
    label.TextColor3 = self.Theme.OnSurface
    label.TextSize = Config.FontSize
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    -- Toggle switch
    local switch = Instance.new("Frame")
    switch.Name = "Switch"
    switch.BackgroundColor3 = options.Value and self.Theme.Primary or self.Theme.Outline
    switch.BorderSizePixel = 0
    switch.Position = UDim2.new(1, -50, 0.5, -10)
    switch.Size = UDim2.new(0, 40, 0, 20)
    switch.AnchorPoint = Vector2.new(0, 0.5)
    switch.Parent = container
    
    CreateCorner(10).Parent = switch
    
    local thumb = Instance.new("Frame")
    thumb.Name = "Thumb"
    thumb.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    thumb.BorderSizePixel = 0
    thumb.Position = options.Value and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
    thumb.Size = UDim2.new(0, 16, 0, 16)
    thumb.AnchorPoint = Vector2.new(0, 0.5)
    thumb.Parent = switch
    
    CreateCorner(8).Parent = thumb
    
    -- Toggle functionality
    local toggled = options.Value or false
    
    local function updateToggle()
        CreateTween(switch, {
            BackgroundColor3 = toggled and self.Theme.Primary or self.Theme.Outline
        }):Play()
        
        CreateTween(thumb, {
            Position = toggled and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
        }):Play()
        
        if options.Callback then
            options.Callback(toggled)
        end
    end
    
    container.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            toggled = not toggled
            updateToggle()
        end
    end)
    
    return {
        Container = container,
        GetValue = function() return toggled end,
        SetValue = function(value)
            toggled = value
            updateToggle()
        end
    }
end

function NexusUI:CreateDropdown(options, parent)
    options = options or {}
    
    local container = Instance.new("Frame")
    container.Name = "DropdownContainer"
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Size = UDim2.new(1, 0, 0, 40)
    container.ClipsDescendants = true
    container.Parent = parent or self.ScreenGui
    
    CreateCorner().Parent = container
    
    local button = Instance.new("TextButton")
    button.Name = "DropdownButton"
    button.BackgroundTransparency = 1
    button.Size = UDim2.new(1, 0, 0, 40)
    button.Text = ""
    button.Parent = container
    
    CreatePadding().Parent = button
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Size = UDim2.new(1, -20, 1, 0)
    label.Text = options.Selected or options.Placeholder or "Select..."
    label.TextColor3 = self.Theme.OnSurface
    label.TextSize = Config.FontSize
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.Parent = button
    
    local arrow = Instance.new("TextLabel")
    arrow.Name = "Arrow"
    arrow.BackgroundTransparency = 1
    arrow.Position = UDim2.new(1, -20, 0, 0)
    arrow.Size = UDim2.new(0, 20, 1, 0)
    arrow.Text = "â–¼"
    arrow.TextColor3 = self.Theme.OnSurface
    arrow.TextSize = 12
    arrow.Font = Enum.Font.Gotham
    arrow.Parent = button
    
    -- Options container
    local optionsContainer = Instance.new("Frame")
    optionsContainer.Name = "Options"
    optionsContainer.BackgroundColor3 = self.Theme.SurfaceVariant
    optionsContainer.BorderSizePixel = 0
    optionsContainer.Position = UDim2.new(0, 0, 1, 0)
    optionsContainer.Size = UDim2.new(1, 0, 0, 0)
    optionsContainer.Parent = container
    
    CreateCorner().Parent = optionsContainer
    
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.FillDirection = Enum.FillDirection.Vertical
    optionsLayout.Parent = optionsContainer
    
    -- Dropdown state
    local isOpen = false
    local selectedValue = options.Selected
    local selectedValues = options.MultiSelect and {} or nil
    
    local function createOption(optionText, value)
        local option = Instance.new("TextButton")
        option.Name = "Option"
        option.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        option.BackgroundTransparency = 1
        option.BorderSizePixel = 0
        option.Size = UDim2.new(1, 0, 0, 32)
        option.Text = optionText
        option.TextColor3 = self.Theme.OnSurface
        option.TextSize = Config.FontSize
        option.TextXAlignment = Enum.TextXAlignment.Left
        option.Font = Enum.Font.Gotham
        option.Parent = optionsContainer
        
        CreatePadding(8).Parent = option
        
        -- Option hover effect
        option.MouseEnter:Connect(function()
            CreateTween(option, {BackgroundTransparency = 0.9}):Play()
        end)
        
        option.MouseLeave:Connect(function()
            CreateTween(option, {BackgroundTransparency = 1}):Play()
        end)
        
        -- Option click
        option.MouseButton1Click:Connect(function()
            if options.MultiSelect then
                -- Multi-select logic
                local index = table.find(selectedValues, value)
                if index then
                    table.remove(selectedValues, index)
                else
                    table.insert(selectedValues, value)
                end
                
                label.Text = #selectedValues > 0 and table.concat(selectedValues, ", ") or (options.Placeholder or "Select...")
                
                if options.Callback then
                    options.Callback(selectedValues)
                end
            else
                -- Single select
                selectedValue = value
                label.Text = optionText
                
                -- Close dropdown
                isOpen = false
                CreateTween(container, {Size = UDim2.new(1, 0, 0, 40)}):Play()
                CreateTween(arrow, {Rotation = 0}):Play()
                
                if options.Callback then
                    options.Callback(value)
                end
            end
        end)
        
        return option
    end
    
    -- Create options
    if options.Options then
        for _, option in pairs(options.Options) do
            if type(option) == "string" then
                createOption(option, option)
            elseif type(option) == "table" then
                createOption(option.Text or option.Name, option.Value or option.Text or option.Name)
            end
        end
    end
    
    -- Toggle dropdown
    button.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        
        if isOpen then
            local optionsHeight = #options.Options * 32
            CreateTween(container, {Size = UDim2.new(1, 0, 0, 40 + optionsHeight)}):Play()
            CreateTween(arrow, {Rotation = 180}):Play()
        else
            CreateTween(container, {Size = UDim2.new(1, 0, 0, 40)}):Play()
            CreateTween(arrow, {Rotation = 0}):Play()
        end
    end)
    
    return {
        Container = container,
        GetValue = function() 
            return options.MultiSelect and selectedValues or selectedValue 
        end,
        SetValue = function(value)
            if options.MultiSelect then
                selectedValues = type(value) == "table" and value or {value}
                label.Text = #selectedValues > 0 and table.concat(selectedValues, ", ") or (options.Placeholder or "Select...")
            else
                selectedValue = value
                label.Text = value or (options.Placeholder or "Select...")
            end
        end,
        AddOption = function(optionText, value)
            createOption(optionText, value or optionText)
        end
    }
end

function NexusUI:CreateSlider(options, parent)
    options = options or {}
    
    local container = Instance.new("Frame")
    container.Name = "SliderContainer"
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Size = UDim2.new(1, 0, 0, 50)
    container.Parent = parent or self.ScreenGui
    
    CreateCorner().Parent = container
    CreatePadding().Parent = container
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Size = UDim2.new(1, -60, 0, 20)
    label.Text = options.Text or "Slider"
    label.TextColor3 = self.Theme.OnSurface
    label.TextSize = Config.FontSize
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "ValueLabel"
    valueLabel.BackgroundTransparency = 1
    valueLabel.Position = UDim2.new(1, -60, 0, 0)
    valueLabel.Size = UDim2.new(0, 60, 0, 20)
    valueLabel.Text = tostring(options.Value or options.Min or 0)
    valueLabel.TextColor3 = self.Theme.Primary
    valueLabel.TextSize = Config.FontSize
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Font = Enum.Font.GothamMedium
    valueLabel.Parent = container
    
    -- Slider track
    local track = Instance.new("Frame")
    track.Name = "Track"
    track.BackgroundColor3 = self.Theme.Outline
    track.BorderSizePixel = 0
    track.Position = UDim2.new(0, 0, 0, 30)
    track.Size = UDim2.new(1, 0, 0, 4)
    track.Parent = container
    
    CreateCorner(2).Parent = track
    
    -- Slider fill
    local fill = Instance.new("Frame")
    fill.Name = "Fill"
    fill.BackgroundColor3 = self.Theme.Primary
    fill.BorderSizePixel = 0
    fill.Position = UDim2.new(0, 0, 0, 0)
    fill.Size = UDim2.new(0, 0, 1, 0)
    fill.Parent = track
    
    CreateCorner(2).Parent = fill
    
    -- Slider thumb
    local thumb = Instance.new("Frame")
    thumb.Name = "Thumb"
    thumb.BackgroundColor3 = self.Theme.Primary
    thumb.BorderSizePixel = 0
    thumb.Position = UDim2.new(0, -6, 0.5, -6)
    thumb.Size = UDim2.new(0, 12, 0, 12)
    thumb.AnchorPoint = Vector2.new(0, 0.5)
    thumb.Parent = track
    
    CreateCorner(6).Parent = thumb
    
    -- Slider functionality
    local min = options.Min or 0
    local max = options.Max or 100
    local value = options.Value or min
    local increment = options.Increment or 1
    local dragging = false
    
    local function updateSlider()
        local percentage = (value - min) / (max - min)
        fill.Size = UDim2.new(percentage, 0, 1, 0)
        thumb.Position = UDim2.new(percentage, -6, 0.5, -6)
        valueLabel.Text = options.Suffix and (tostring(value) .. options.Suffix) or tostring(value)
        
        if options.Callback then
            options.Callback(value)
        end
    end
    
    local function getValue(input)
        local trackSize = track.AbsoluteSize.X
        local relativePos = math.clamp((input.Position.X - track.AbsolutePosition.X) / trackSize, 0, 1)
        local newValue = min + (relativePos * (max - min))
        
        if increment > 0 then
            newValue = math.floor((newValue / increment) + 0.5) * increment
        end
        
        return math.clamp(newValue, min, max)
    end
    
    track.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            value = getValue(input)
            updateSlider()
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            value = getValue(input)
            updateSlider()
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    updateSlider()
    
    return {
        Container = container,
        GetValue = function() return value end,
        SetValue = function(newValue)
            value = math.clamp(newValue, min, max)
            updateSlider()
        end
    }
end

function NexusUI:CreateTextbox(options, parent)
    options = options or {}
    
    local container = Instance.new("Frame")
    container.Name = "TextboxContainer"
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Size = UDim2.new(1, 0, 0, 36)
    container.Parent = parent or self.ScreenGui
    
    CreateCorner().Parent = container
    
    local textbox = Instance.new("TextBox")
    textbox.Name = "Textbox"
    textbox.BackgroundTransparency = 1
    textbox.Position = UDim2.new(0, 12, 0, 0)
    textbox.Size = UDim2.new(1, -24, 1, 0)
    textbox.Text = options.Text or ""
    textbox.PlaceholderText = options.Placeholder or ""
    textbox.TextColor3 = self.Theme.OnSurface
    textbox.PlaceholderColor3 = self.Theme.Outline
    textbox.TextSize = Config.FontSize
    textbox.TextXAlignment = Enum.TextXAlignment.Left
    textbox.Font = Enum.Font.Gotham
    textbox.ClearTextOnFocus = options.ClearOnFocus or false
    textbox.Parent = container
    
    -- Focus effects
    textbox.Focused:Connect(function()
        CreateTween(container, {BackgroundColor3 = self.Theme.SurfaceVariant}):Play()
    end)
    
    textbox.FocusLost:Connect(function()
        CreateTween(container, {BackgroundColor3 = self.Theme.Surface}):Play()
        
        if options.Callback then
            options.Callback(textbox.Text)
        end
    end)
    
    return {
        Container = container,
        Textbox = textbox,
        GetValue = function() return textbox.Text end,
        SetValue = function(text) textbox.Text = text end
    }
end

function NexusUI:CreateLabel(options, parent)
    options = options or {}
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.BackgroundTransparency = 1
    label.Size = options.Size or UDim2.new(1, 0, 0, 20)
    label.Text = options.Text or "Label"
    label.TextColor3 = options.Color or self.Theme.OnSurface
    label.TextSize = options.TextSize or Config.FontSize
    label.TextXAlignment = options.Alignment or Enum.TextXAlignment.Left
    label.Font = options.Font or Enum.Font.Gotham
    label.TextWrapped = options.TextWrapped or false
    label.Parent = parent or self.ScreenGui
    
    return label
end

function NexusUI:CreateSection(options, parent)
    options = options or {}
    
    local section = Instance.new("Frame")
    section.Name = "Section"
    section.BackgroundTransparency = 1
    section.Size = UDim2.new(1, 0, 0, 30)
    section.Parent = parent or self.ScreenGui
    
    local line = Instance.new("Frame")
    line.Name = "Line"
    line.BackgroundColor3 = self.Theme.Outline
    line.BorderSizePixel = 0
    line.Position = UDim2.new(0, 0, 1, -1)
    line.Size = UDim2.new(1, 0, 0, 1)
    line.Parent = section
    
    local label = Instance.new("TextLabel")
    label.Name = "SectionLabel"
    label.BackgroundColor3 = self.Theme.Background
    label.BorderSizePixel = 0
    label.Position = UDim2.new(0, 0, 0, 10)
    label.Size = UDim2.new(0, 0, 0, 20)
    label.Text = " " .. (options.Text or "Section") .. " "
    label.TextColor3 = self.Theme.OnBackground
    label.TextSize = options.TextSize or 12
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.GothamMedium
    label.Parent = section
    
    -- Auto-size the label
    local textService = game:GetService("TextService")
    local textSize = textService:GetTextSize(
        label.Text,
        label.TextSize,
        label.Font,
        Vector2.new(math.huge, 20)
    )
    label.Size = UDim2.new(0, textSize.X, 0, 20)
    
    return section
end

-- Notification System
function NexusUI:CreateNotification(options)
    options = options or {}
    
    -- Remove old notifications if at limit
    while #self.Notifications >= Config.MaxNotifications do
        self.Notifications[1]:Destroy()
        table.remove(self.Notifications, 1)
    end
    
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.BackgroundColor3 = self.Theme.Surface
    notification.BorderSizePixel = 0
    notification.Size = UDim2.new(0, 280, 0, 60)
    notification.Position = UDim2.new(0, 300, 0, 0)
    notification.Parent = self.NotificationContainer
    
    CreateCorner().Parent = notification
    CreateShadow(notification, 0.1)
    CreatePadding().Parent = notification
    
    -- Icon (optional)
    if options.Icon then
        local icon = Instance.new("TextLabel")
        icon.Name = "Icon"
        icon.BackgroundTransparency = 1
        icon.Position = UDim2.new(0, 0, 0, 0)
        icon.Size = UDim2.new(0, 20, 0, 20)
        icon.Text = options.Icon
        icon.TextColor3 = options.IconColor or self.Theme.Primary
        icon.TextSize = 16
        icon.Font = Enum.Font.GothamBold
        icon.Parent = notification
    end
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0, options.Icon and 30 or 0, 0, 0)
    title.Size = UDim2.new(1, options.Icon and -30 or 0, 0, 20)
    title.Text = options.Title or "Notification"
    title.TextColor3 = self.Theme.OnSurface
    title.TextSize = 14
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Font = Enum.Font.GothamMedium
    title.Parent = notification
    
    -- Description (optional)
    if options.Description then
        local desc = Instance.new("TextLabel")
        desc.Name = "Description"
        desc.BackgroundTransparency = 1
        desc.Position = UDim2.new(0, options.Icon and 30 or 0, 0, 20)
        desc.Size = UDim2.new(1, options.Icon and -30 or 0, 1, -20)
        desc.Text = options.Description
        desc.TextColor3 = self.Theme.Outline
        desc.TextSize = 12
        desc.TextXAlignment = Enum.TextXAlignment.Left
        desc.TextYAlignment = Enum.TextYAlignment.Top
        desc.Font = Enum.Font.Gotham
        desc.TextWrapped = true
        desc.Parent = notification
        
        -- Adjust notification height for description
        notification.Size = UDim2.new(0, 280, 0, 80)
    end
    
    -- Color accent based on type
    local accent = Instance.new("Frame")
    accent.Name = "Accent"
    accent.BackgroundColor3 = self.Theme.Primary
    accent.BorderSizePixel = 0
    accent.Position = UDim2.new(0, 0, 0, 0)
    accent.Size = UDim2.new(0, 3, 1, 0)
    accent.Parent = notification
    
    if options.Type then
        if options.Type == "success" then
            accent.BackgroundColor3 = self.Theme.Success
        elseif options.Type == "warning" then
            accent.BackgroundColor3 = self.Theme.Warning
        elseif options.Type == "error" then
            accent.BackgroundColor3 = self.Theme.Error
        end
    end
    
    CreateCorner().Parent = accent
    
    -- Entrance animation
    CreateTween(notification, {Position = UDim2.new(0, 0, 0, 0)}):Play()
    
    -- Auto dismiss
    local duration = options.Duration or Config.NotificationDuration
    if duration > 0 then
        task.wait(duration)
        self:DismissNotification(notification)
    end
    
    -- Click to dismiss
    notification.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self:DismissNotification(notification)
        end
    end)
    
    self.Notifications[#self.Notifications + 1] = notification
    
    return notification
end

function NexusUI:DismissNotification(notification)
    local tween = CreateTween(notification, {
        Position = UDim2.new(0, 300, notification.Position.Y.Scale, notification.Position.Y.Offset),
        BackgroundTransparency = 1
    })
    tween:Play()
    
    tween.Completed:Connect(function()
        -- Remove from notifications list
        for i, notif in pairs(self.Notifications) do
            if notif == notification then
                table.remove(self.Notifications, i)
                break
            end
        end
        notification:Destroy()
    end)
end

-- Utility Methods
function NexusUI:LoadConfig(configData)
    for key, value in pairs(configData) do
        if Config[key] ~= nil then
            Config[key] = value
        end
    end
end

function NexusUI:SaveConfig()
    return Config
end

function NexusUI:Destroy()
    self.ScreenGui:Destroy()
end

-- Quick notification methods
function NexusUI:Notify(title, description, duration)
    return self:CreateNotification({
        Title = title,
        Description = description,
        Duration = duration
    })
end

function NexusUI:Success(title, description, duration)
    return self:CreateNotification({
        Title = title,
        Description = description,
        Duration = duration,
        Type = "success",
        Icon = "âœ“"
    })
end

function NexusUI:Warning(title, description, duration)
    return self:CreateNotification({
        Title = title,
        Description = description,
        Duration = duration,
        Type = "warning",
        Icon = "âš "
    })
end

function NexusUI:Error(title, description, duration)
    return self:CreateNotification({
        Title = title,
        Description = description,
        Duration = duration,
        Type = "error",
        Icon = "âœ•"
    })
end

--[[
    USAGE EXAMPLE:
    
    local NexusUI = loadstring(game:HttpGet("YOUR_SCRIPT_URL"))()
    
    -- Create library instance
    local UI = NexusUI.new({
        Theme = "Dark" -- or "Light"
    })
    
    -- Create main window
    local Window = UI:CreateWindow({
        Title = "My Script Hub",
        Size = UDim2.new(0, 600, 0, 450)
    })
    
    -- Create pages
    local MainPage = Window:CreatePage({Title = "Main"})
    local SettingsPage = Window:CreatePage({Title = "Settings"})
    
    -- Add elements to pages
    MainPage:CreateButton({
        Text = "Click Me!",
        Callback = function()
            UI:Success("Success!", "Button was clicked!")
        end
    })
    
    MainPage:CreateToggle({
        Text = "Enable Feature",
        Value = false,
        Callback = function(value)
            print("Toggle:", value)
        end
    })
    
    MainPage:CreateDropdown({
        Text = "Select Option",
        Options = {"Option 1", "Option 2", "Option 3"},
        Callback = function(value)
            print("Selected:", value)
        end
    })
    
    MainPage:CreateSlider({
        Text = "Speed",
        Min = 0,
        Max = 100,
        Value = 50,
        Increment = 1,
        Suffix = "%",
        Callback = function(value)
            print("Slider value:", value)
        end
    })
    
    MainPage:CreateTextbox({
        Placeholder = "Enter text...",
        Callback = function(text)
            print("Text entered:", text)
        end
    })
    
    -- Sections for organization
    MainPage:CreateSection({Text = "Combat"})
    
    MainPage:CreateButton({
        Text = "Auto Attack",
        Color = Color3.fromRGB(220, 53, 69),
        Callback = function()
            UI:Warning("Warning", "This feature is experimental!")
        end
    })
    
    -- Settings page
    SettingsPage:CreateDropdown({
        Text = "Theme",
        Options = {"Dark", "Light"},
        Selected = "Dark",
        Callback = function(theme)
            UI:SetTheme(theme)
            UI:Notify("Theme Changed", "UI theme updated to " .. theme)
        end
    })
]]

return NexusUI
